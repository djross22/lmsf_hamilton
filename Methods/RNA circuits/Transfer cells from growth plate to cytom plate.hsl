 namespace _Method { #include "HSLML_STARLib.hsl" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\Dictionary.hsl" } 
 namespace _Method { #include "HSLExtensions\\String.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\File.hsl" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "STAR Tools\\STAR Tip Tools.hs_" } 
 namespace _Method { #include "Common\\iSWAP-PlateAndLidMovement.hs_" } 
 namespace _Method { #include "NIST\\Libraries\\NIST_Device_Controllers.hs_" } 
 namespace _Method { #include "HslHamHeaterShakerLib.hsl" } 
 namespace _Method { #include "NIST\\Libraries\\NIST_TruSeqNano_Prep.hs_" } 
 namespace _Method { #include "HSLMthLib.hsl" } 
 namespace _Method { #include "HSLFilLib.hsl" } 
 namespace _Method { #include "Common\\LMSF_Utilities.hs_" } 
 namespace _Method { #include "Common\\GSF-IMS.shared_submethods.hs_" } 
#include "RNA circuit plate growth and cytometry.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable bln_Global_SimulatorMode;
variable dilution_factor;
variable cell_volume;
variable media_volume;
global device ML_STAR ("RNA circuit plate growth and cytometry.lay", "ML_STAR", hslTrue);
global device HxFan ("RNA circuit plate growth and cytometry.lay", "HxFan", hslTrue);
variable loopCounter2;
variable gp_labware_id;
sequence disp_seq;
variable well_id;
variable has_key;
sequence asp_seq;
variable plasmid_id;
variable strain_1_id;
variable worklist_file_path;
variable cytom_volume;
variable pbs_source_for_col_arr[];
sequence cytom_column_arr[];
variable cytom_labware_id;
variable column_num;
variable row_num;
variable pbs_volume;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
 namespace _Method { #include "HSLSTCCLib.hs_" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
STAR_TIP_TOOLS::_InitLibrary();
ISWAP_PLATEANDLIDMOVEMENT::_InitLibrary();
NIST_DEVICE_CONTROLLERS::_InitLibrary();
NIST_TRUSEQNANO_PREP::_InitLibrary();
LMSF_UTILITIES::_InitLibrary();
GSF_IMS_SHARED_SUBMETHODS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "d3470de1_a95d_4c82_8a708cbee5fa520d" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
bln_Global_SimulatorMode = HSLML_STAR::IsSimulatorMode(ML_STAR);
// }} ""
// {{{ 2 1 0 "5d8b454f_6e7c_486b_9f2fe67e1ce98ba4" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{{ 3 1 0 "06fb8438_9292_443e_8d6e56a39c7ed99b" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
GetParams();
// }} ""
// {{ 4 1 0 "2199f493_69fc_4266_be48153b1d636791" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 5 1 0 "9af80f99_c62c_4010_b31a54915b8d185b" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
cell_volume = cytom_volume / (dilution_factor * 1.0);
// }} ""
// {{ 6 1 0 "d2be3f93_e7da_4822_804d3f3faa23bed6" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
pbs_volume = cytom_volume - cell_volume;
// }} ""
// {{ 7 1 0 "2199f493_69fc_4266_be48153b1d636791" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 8 1 0 "2d7bd34e_707a_4086_8d1aa3cc4427ba1a" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 9 1 0 "c8b47212_b2e0_4ab4_aad7e688879cbf91" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("****************************************************************************************\nTake lids off of GP and cytom plate\n****************************************************************************************"));
// }} ""
// {{{ 10 1 0 "ceaee79f_de49_4426_9913da47519a133a" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Growth_Plate_lid, ML_STAR.Growth_Plate_Lid_parking, 0, 0, ML_STAR);
// }} ""
// {{{ 11 1 0 "330e05ac_82f0_40e7_957eee60dcfbaf60" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Cytometry_plate_lid, ML_STAR.Cytometry_plate_lid_parking, 1, 1, ML_STAR);
// }} ""
// {{ 12 1 0 "2d7bd34e_707a_4086_8d1aa3cc4427ba1a" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 13 1 0 "f6c3ba08_8ccb_46e5_aa2f0ed6fa2cb2a8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 14 1 0 "c8a690cf_18cd_4a6c_8f0c0e4cc69f02c9" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("****************************************************************************************\nPipette cells from Growth Plate to Cytom plate\n****************************************************************************************"));
// }} ""
// {{{ 15 1 0 "3cffcc8e_5059_47eb_bfa5adbf6e8e5d19" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
gp_labware_id = SeqGetLabwareId(ML_STAR.Growth_Plate);
// }} ""
// {{{ 16 1 0 "4b0a680c_bd32_4ec9_8f30c9669fd6247b" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
cytom_labware_id = SeqGetLabwareId(ML_STAR.Cytometry_plate);
// }} ""
// {{ 17 1 0 "33b5152a_f672_43bf_9887b094fa2d4767" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
loopCounter2 = 0;
ML_STAR.Growth_Plate.SetCurrentPosition(1);
while (
   (ML_STAR.Growth_Plate.GetCurrentPosition() > 0)
)
{
AlignSequences(hslTrue, ML_STAR.Growth_Plate, 1);
loopCounter2 = loopCounter2 + 1;
// }} ""
// {{{ 18 1 0 "5f5d8b83_78a6_43ed_b528f2f387079f26" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
well_id = SeqGetPositionId(ML_STAR.Growth_Plate);
// }} ""
// {{{ 19 1 0 "521bedd7_db14_4bdb_90162ae95c86a19d" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
has_key = HSLExtensions::Dictionary::ExistsItem(Translate("plasmid_by_well_dict"), well_id);
// }} ""
// {{ 20 1 0 "3c6be622_823b_4d6a_a649b6bde3332851" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (has_key == 1)
{
// }} ""
// {{{ 21 1 0 "95f124ba_7c37_46d8_b60f29a7355c18b6" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
SeqAdd(asp_seq, gp_labware_id, well_id);
// }} ""
// {{{ 22 1 0 "ca00fb2a_a8ff_47f5_be8200f453c30312" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
SeqAdd(disp_seq, cytom_labware_id, well_id);
// }} ""
// {{{ 23 1 0 "7087529f_d2c3_4486_b276d2550fbd2dbd" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TrcTrace(Translate("added "), well_id);
// }} ""
// {{ 24 1 0 "3c6be622_823b_4d6a_a649b6bde3332851" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{{ 25 1 0 "641b6722_ddc3_4450_b1c33cfc5645617f" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
SeqIncrement(ML_STAR.Growth_Plate, 1);
// }} ""
// {{ 26 1 0 "33b5152a_f672_43bf_9887b094fa2d4767" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
if (
   (ML_STAR.Growth_Plate.GetCurrentPosition() > 0 && ML_STAR.Growth_Plate.GetMax() == 0 )
)
{ MECC::EndlessSequenceLoopWarning(GetFileName()); }

}
ML_STAR.Growth_Plate.SetMax(ML_STAR.Growth_Plate.GetTotal());
ML_STAR.Growth_Plate.SetCurrentPosition(1);
}
// }} ""
// {{ 27 1 0 "fb41d472_4b15_4849_9205aab7fbeea53e" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_CF281C72D7BF45b49D38302A52811F17[];
sequence arrseqDispense_CF281C72D7BF45b49D38302A52811F17[];
arrseqAspirate_CF281C72D7BF45b49D38302A52811F17.SetSize(1);
arrseqAspirate_CF281C72D7BF45b49D38302A52811F17.SetAt(0, asp_seq);
arrseqDispense_CF281C72D7BF45b49D38302A52811F17.SetSize(1);
arrseqDispense_CF281C72D7BF45b49D38302A52811F17.SetAt(0, disp_seq);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 0);
PTL::SetPipettingState("AspirateFluidHeight", 1.5);
PTL::SetPipettingState("AspirateSubmergeDepth", 0);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslFalse);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar300ulStandardVolumeTipWithFilter, arrseqAspirate_CF281C72D7BF45b49D38302A52811F17, arrseqDispense_CF281C72D7BF45b49D38302A52811F17, 1, 1, cell_volume, 0, 1, hslInfinite, hslInfinite, 1, "", asp_seq, disp_seq) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 28 1 0 "f6c3ba08_8ccb_46e5_aa2f0ed6fa2cb2a8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 29 1 0 "8f4be0cf_8111_4fa5_ba5286d11100f6a1" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 30 1 0 "7188934a_d019_4c5c_8b61f7e2423f54e7" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("****************************************************************************************\nPut lids back on to GP and overnight plate\n****************************************************************************************"));
// }} ""
// {{{ 31 1 0 "e9485b1b_e5c0_49ea_835c32ab97d121fa" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Growth_Plate_Lid_parking, ML_STAR.Growth_Plate_lid, 0, 0, ML_STAR);
// }} ""
// {{{ 32 1 0 "904e7977_6c5d_4d18_89bce4e718213b75" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Cytometry_plate_lid_parking, ML_STAR.Cytometry_plate_lid, 1, 1, ML_STAR);
// }} ""
// {{ 33 1 0 "8f4be0cf_8111_4fa5_ba5286d11100f6a1" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 34 1 0 "fac9219d_1775_4be3_8a7f7c7b62b3f69d" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
STAR_TIP_TOOLS::_ExitLibrary();
ISWAP_PLATEANDLIDMOVEMENT::_ExitLibrary();
NIST_DEVICE_CONTROLLERS::_ExitLibrary();
NIST_TRUSEQNANO_PREP::_ExitLibrary();
LMSF_UTILITIES::_ExitLibrary();
GSF_IMS_SHARED_SUBMETHODS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2024-06-11 18:08$$checksum=a4e3d6f2$$length=085$$