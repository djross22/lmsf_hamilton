//  ------------------------------------------------------------------------------------
//  Hamilton Company Software Product
//  Copyright (c) 2009 by Hamilton Bonaduz AG.
//  ------------------------------------------------------------------------------------
//
//  Modification History
//  --------------------
//  1.00  2006-10-24/cjoerg    Library created.
//  1.20  2008-02-12/cjoerg    Edited step with SW 4.2. Updated error settings for new/changed errors.
//  1.30  2009-11-19/cjoerg    Edited step with SW 4.3. Updated error settings for new/changed errors.
//  ------------------------------------------------------------------------------------

#pragma once

#ifndef INCLUDED_FROM_METHOD
	#ifndef HSL_RUNTIME
		device ML_STAR;
	#endif
#endif

#ifdef _DEBUG_STAR_STEPPARAMS
	#ifndef __MlStarStepsUtilLib_hsl__
	#include "MlStarStepsUtilLib.hsl"
	#endif
#endif


function Nano_Aspirate_001(
	device   ML_STAR,
	sequence& aspirateSequence,
	variable volumeArray[],
	variable channelVariable,
	variable sequenceCounting,
	variable aspirateOilGap,
	variable channelID,
	variable pressureLLD,
	variable liquidFollowing,
	variable aspirationPressure,
	variable submergeDepth,
	variable liquidHeight,
	variable swapSpeed) variable[]
{
	variable rc[];

	#ifdef _DEBUG_STAR_STEPPARAMS
	{
		variable stepName;
		stepName = GetFunctionName();
		DEBUG::TraceStepParamDevice(stepName, "device", ML_STAR);
		DEBUG::TraceStepParamSequence(stepName, "aspirateSequence", aspirateSequence);
		DEBUG::TraceStepParamVariableArray(stepName, "aspirateVolumes", volumeArray);
		DEBUG::TraceStepParamVariable(stepName, "channelVariable", channelVariable);
		DEBUG::TraceStepParamVariable(stepName, "sequenceCounting", sequenceCounting);
		DEBUG::TraceStepParamVariable(stepName, "aspirateOilGap", aspirateOilGap);
		DEBUG::TraceStepParamVariable(stepName, "channelID", channelID);
		DEBUG::TraceStepParamVariable(stepName, "pressureLLD", pressureLLD);
		DEBUG::TraceStepParamVariable(stepName, "liquidFollowing", liquidFollowing);
		DEBUG::TraceStepParamVariable(stepName, "aspirationPressure", aspirationPressure);
		DEBUG::TraceStepParamVariable(stepName, "submergeDepth", submergeDepth);
		DEBUG::TraceStepParamVariable(stepName, "liquidHeight", liquidHeight);
		DEBUG::TraceStepParamVariable(stepName, "swapSpeed", swapSpeed);

	}
	#endif

	// Abort must be invisible in the error settings
	rc = ML_STAR._2B4AC04E_DAFC_45aa_96A2_1572B13F6210( "580bfffd_4755_4179_a30a2a4a16274fa2" ); // NanoAspirate
	return( rc );
}	

// $$author=wbarmettler$$valid=1$$time=2017-03-14 13:14$$checksum=c0fe95b5$$length=088$$