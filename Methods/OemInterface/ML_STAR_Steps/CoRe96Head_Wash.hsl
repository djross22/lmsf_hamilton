//  ------------------------------------------------------------------------------------
//  Hamilton Company Software Product
//  Copyright (c) 2009 by Hamilton Bonaduz AG.
//  ------------------------------------------------------------------------------------
//
//  Modification History
//  --------------------
//  1.00  2004-10-18/cjoerg    Library created.
//  1.01  2005-07-28/cjoerg    Added debug traces for step parameters.
//  1.10  2005-07-28/cjoerg    Updated for actual parameters of step Head96Wash
//                             Step is completely redesigne in corrent version
//  1.20  2006-10-23/cjoerg    Updated for parameters needed for dual chamber wash station.
//  1.30  2008-02-11/cjoerg    Edited step with SW 4.2. Updated error settings for new/changed errors.
//                             Fixed bug that 'one_LiquidChange' has been passed for chamber two
//                             instead of 'two_LiquidChange'.
//  1.30  2009-11-19/cjoerg    Edited step with SW 4.3. Updated error settings for new/changed errors.
//  ------------------------------------------------------------------------------------
#pragma once

#ifndef INCLUDED_FROM_METHOD
	#ifndef HSL_RUNTIME
		device ML_STAR;
	#endif
#endif

#ifdef _DEBUG_STAR_STEPPARAMS
	#ifndef __MlStarStepsUtilLib_hsl__
	#include "MlStarStepsUtilLib.hsl"
	#endif
#endif


function CoRe96Head_Wash_002(
	device   ML_STAR,
	variable washCycles,
	variable startWashChamber,
	variable one_LiquidFollowing_Head,
	variable one_WashCycles_Head,
	variable one_RefillAfterWash,
	variable one_WashLiquid,
	variable one_LiquidChange,
	variable two_LiquidFollowing_Head,
	variable two_WashCycles_Head,
	variable two_RefillAfterWash,
	variable two_WashLiquid,
	variable two_LiquidChange,
	variable one_WashVolume_Head,
	variable one_SubmergeDepth_Head,
	variable two_WashVolume_Head,
	variable two_SubmergeDepth_Head) variable[]
{
	variable rc[];

	#ifdef _DEBUG_STAR_STEPPARAMS
	{
		variable stepName;
		stepName = GetFunctionName();
		DEBUG::TraceStepParamDevice(stepName, "device", ML_STAR);
		DEBUG::TraceStepParamVariable(stepName, "washCycles", washCycles);
		DEBUG::TraceStepParamVariable(stepName, "startWashChamber", startWashChamber);
		DEBUG::TraceStepParamVariable(stepName, "one_LiquidFollowing_Head", one_LiquidFollowing_Head);
		DEBUG::TraceStepParamVariable(stepName, "one_WashCycles_Head", one_WashCycles_Head);
		DEBUG::TraceStepParamVariable(stepName, "one_RefillAfterWash", one_RefillAfterWash);
		DEBUG::TraceStepParamVariable(stepName, "one_WashLiquid", one_WashLiquid);
		DEBUG::TraceStepParamVariable(stepName, "one_LiquidChange", one_LiquidChange);
		DEBUG::TraceStepParamVariable(stepName, "two_LiquidFollowing_Head", two_LiquidFollowing_Head);
		DEBUG::TraceStepParamVariable(stepName, "two_WashCycles_Head", two_WashCycles_Head);
		DEBUG::TraceStepParamVariable(stepName, "two_RefillAfterWash", two_RefillAfterWash);
		DEBUG::TraceStepParamVariable(stepName, "two_WashLiquid", two_WashLiquid);
		DEBUG::TraceStepParamVariable(stepName, "two_LiquidChange", two_LiquidChange);
		DEBUG::TraceStepParamVariable(stepName, "one_WashVolume_Head", one_WashVolume_Head);
		DEBUG::TraceStepParamVariable(stepName, "one_SubmergeDepth_Head", one_SubmergeDepth_Head);
		DEBUG::TraceStepParamVariable(stepName, "two_WashVolume_Head", two_WashVolume_Head);
		DEBUG::TraceStepParamVariable(stepName, "two_SubmergeDepth_Head", two_SubmergeDepth_Head);
	}
	#endif

	// Abort must be invisible in the error settings
	rc = ML_STAR._9D6F471C_FED9_4dd1_AA4E_8821C287FD1C( "bbd71b9f_f7ec_4c9e_b53098caef757fb1" ); // Head96Wash
	return( rc );
}	

// $$author=wbarmettler$$valid=1$$time=2017-03-14 13:14$$checksum=76b57268$$length=088$$