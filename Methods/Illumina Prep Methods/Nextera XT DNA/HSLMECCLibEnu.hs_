//  ------------------------------------------------------------------------------------
//  Hamilton Company Software Product
//  File: HSLMECCLibEnu.hs_
//
//  This is a part of the module HxMetEdCompCmd.
//  Language dependant part of the MECC Template Library.
//
//  File creation date:  2001-12-05 by CJo
//  Last revision date:  2005-02-09 by CJo
//
//  Copyright (c) 2005 by Hamilton Bonaduz AG.
//
//
//  Modification History
//  --------------------
//  1.00  2001-12-05 by CJo  Initial file creation.
//  1.01  2003-03-12 by CJo  Add string Ids for steps 'Submethod Call' and 'Return'.
//  1.10  2003-10-20 by CJo  Add IDS:errorStepFileOpenFailed / ::errorStepFailedTimeout
//  1.20  2005-02-09 by CJo  Added :trcActionWarning / ::trcEndlessLoopWarning
//  ------------------------------------------------------------------------------------


function StringTable()
{
	Insert(IDE::noError,								"No error."											);
	Insert(IDE::invalidParameter,					"The parameter is incorrect."					);
	Insert(IDE::createObjectFailed,				"Create Object failed: "						);
	Insert(IDE::getObjectFailed,					"Get Object (querry interface) failed: "	);

	Insert(IDS::openingBracket,					"<"													);
	Insert(IDS::closingBracket,					">"													);
	Insert(IDS::point,								"."													);
	Insert(IDS::runtimeError,						"Runtime error in step "						);
	Insert(IDS::trcSource,							"SYSTEM"											);
	Insert(IDS::trcEndlessLoopWarning,			"WARNING 'Loop over Sequences': Detected condition that indicates an endless loop. (Maximum number of positions for a controlling sequence is zero at the End Loop.)" );

	Insert(IDS::errorUnspecified,					"Unspecified error."								);
	Insert(IDS::errorStepFailed,					"Step failed."										);
	Insert(IDS::errorStepFileOpenFailed,		"Failed to open file: "							);	// extended with a file name.
	Insert(IDS::errorStepFailedTimeout,			"Step failed (e.g. timeout)." );

	Insert(IDS::stepNameComment,					"Comment"											);
	Insert(IDS::stepNameAssignment,				"Assignment"										);
	Insert(IDS::stepNameMathematicalExpr,		"Assignment with Calculation"					);
	Insert(IDS::stepNameLoop,						"Loop"												);
	Insert(IDS::stepNameLoopBreak,				"Loop: Break"										);
	Insert(IDS::stepNameIfThenElse,				"If, Else"											);
	Insert(IDS::stepNameSeqSetCurrent,			"Sequence: Set Current Position"				);
	Insert(IDS::stepNameSeqGetCurrent,			"Sequence: Get Current Position"				);
	Insert(IDS::stepNameSeqSetEnd,				"Sequence: Set End Position"					);
	Insert(IDS::stepNameSeqGetEnd,				"Sequence: Get End Position"					);
	Insert(IDS::stepNameAlignSequences,			"Adjust Sequences"								);
	Insert(IDS::stepNameFileOpen,					"File: Open"										);
	Insert(IDS::stepNameFileSetPos,				"File: Set Position"								);
	Insert(IDS::stepNameFileRead,					"File: Read"										);
	Insert(IDS::stepNameFileWrite,				"File: Write"										);
	Insert(IDS::stepNameFileClose,				"File: Close"										);
	Insert(IDS::stepNameTimerStart,				"Timer: Start"										);
	Insert(IDS::stepNameTimerWait,				"Timer: Wait for"									);
	Insert(IDS::stepNameTimerReadElapsed,		"Timer: Read Elapsed Time"						);
	Insert(IDS::stepNameTimerRestart,			"Timer: Restart"									);
	Insert(IDS::stepNameDlgUserInput,			"User Input"										);
	Insert(IDS::stepNameDlgUserOutput,			"User Output"										);
	Insert(IDS::stepNameComPortOpen,				"Communication Port: Open"						);
	Insert(IDS::stepNameComPortRead,				"Communication Port: Read"						);
	Insert(IDS::stepNameComPortWrite,			"Communication Port: Write"					);
	Insert(IDS::stepNameComPortClose,			"Communication Port: Close"					);
	Insert(IDS::stepNameShell,						"Shell"												);
	Insert(IDS::stepNameSetEvent,					"Set Event"											);
	Insert(IDS::stepNameWaitForEvent,			"Wait for Event"									);
	Insert(IDS::stepNameAbort,						"Abort"												);
	Insert(IDS::stepNameUserHandleError,		"Error Handling by the User"					);
	Insert(IDS::stepNameThreadBegin,				"Begin Parallel"									);
	Insert(IDS::stepNameThreadWaitFor,			"End Parallel"										);
	Insert(IDS::stepNameLibFunctionCall,		"Library Function Call"							);
	Insert(IDS::stepNameSingleLibFunctionCall,"Single Library Function Call"				);
	Insert(IDS::stepNameSubmethodCall,			"Sub-method Call"									);
	Insert(IDS::stepNameReturn,					"Return"												);
}
// $$author=cjoerg$$valid=0$$time=2005-02-09 10:45$$checksum=4acf51b1$$length=083$$