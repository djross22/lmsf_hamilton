 namespace _Method { #include "ASWStandardDialogs\\ASWStandardDialogs.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "ASWStandard\\TraceLevel\\TraceLevel.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable strReultSelected;
variable strReagentList;
variable ListSelectLoopCounter;
variable arrList[];
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "da944e71_1f66_4a9a_9c13d040315d12d6" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Abstract();
// }} ""
// {{{ 2 1 0 "c2cc7eb4_6cc3_462f_ba78234ddd68f83b" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TRACELEVEL::SetTraceLevel(TRACE_LEVEL_DEBUG);
// }} ""
// {{{ 3 1 0 "887e9b37_d3d7_4b0a_a1e093bcd9ca8657" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::Initialize();
// }} ""
// {{ 4 1 0 "fb7f4b92_bf0e_44a5_9edac016d8f380f1" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(ListSelectLoopCounter = 0; ListSelectLoopCounter < 32;)
{
ListSelectLoopCounter = ListSelectLoopCounter + 1;
// }} ""
// {{{ 5 1 0 "0ce70e03_26c7_487b_9350517db6dd7d54" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
strReagentList = StrConcat2(Translate("Reagent "), ListSelectLoopCounter);
// }} ""
// {{ 6 1 0 "d0ef55ae_a833_48d7_81389a85a6baa058" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
arrList.AddAsLast(strReagentList);
// }} ""
// {{ 7 1 0 "fb7f4b92_bf0e_44a5_9edac016d8f380f1" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{{ 8 1 0 "8d3309b8_e62a_42b6_a4fd45026b35b84d" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::ListSelectDialog(Translate("Reagent selection"), AswStandardDialogs::ButtonType::OkCancel, 900, 200, Translate("Please select a Reagent to execute"), Translate("Press 'ok' to continue"), arrList, strReultSelected);
// }} ""
// {{{ 9 1 0 "6513d7b7_409c_42cd_889a7b108fb60fc0" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::Terminate();
// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=ofunke$$valid=0$$time=2011-12-13 10:46$$checksum=ef6ed0c5$$length=085$$