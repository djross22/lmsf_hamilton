 namespace _Method { #include "ASWStandardDialogs\\ASWStandardDialogs.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "ASWStandard\\TraceLevel\\TraceLevel.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable intListLoopCounter;
variable arrList[];
variable strListSelection;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "d31571bf_5ced_483f_95aed55b84eec253" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Abstract();
// }} ""
// {{{ 2 1 0 "1c01d8bb_b4e3_4458_8c777264038bfa37" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TRACELEVEL::SetTraceLevel(TRACE_LEVEL_DEBUG);
// }} ""
// {{{ 3 1 0 "a60445fc_b86a_4d2a_affa51c56050d219" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::Initialize();
// }} ""
// {{ 4 1 0 "88cf7f28_4205_4261_95ebd9ab0a7e4dbe" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(intListLoopCounter = 0; intListLoopCounter < 10;)
{
intListLoopCounter = intListLoopCounter + 1;
// }} ""
// {{{ 5 1 0 "7216a993_806b_4546_977b5fdae4bcc621" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
strListSelection = StrConcat4(Translate("Reagent "), intListLoopCounter, Translate(""), Translate(""));
// }} ""
// {{ 6 1 0 "578c6290_976b_4cda_ae9b6d54c142f2a1" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
arrList.AddAsLast(strListSelection);
// }} ""
// {{ 7 1 0 "88cf7f28_4205_4261_95ebd9ab0a7e4dbe" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{{ 8 1 0 "154bd154_577c_471e_aa7f532d87fe37fb" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::ListDialog(Translate("Reagent selection"), AswStandardDialogs::IconType::Question, AswStandardDialogs::ButtonType::OkCancel, 500, 0, 10, Translate("Please select the Reagent to execute"), Translate("Press 'ok' to continue"), arrList);
// }} ""
// {{{ 9 1 0 "71067212_39e7_49f9_bdb98a381f28f147" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::Terminate();
// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=ofunke$$valid=0$$time=2011-12-13 10:46$$checksum=1b316508$$length=085$$