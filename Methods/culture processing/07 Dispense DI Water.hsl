 namespace _Method { #include "Hamilton\\HSLHamiltonMediaFillModule.hsl" } 
 namespace _Method { #include "HSLML_STARLib.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "Culture processing\\LabwareHandling.hs_" } 
 namespace _Method { #include "If_and_If_or.hs_" } 
 namespace _Method { #include "PAA\\RunTimeErrorHandling.hs_" } 
 namespace _Method { #include "Culture processing\\TipHandling.hs_" } 
 namespace _Method { #include "HSLFileDirectoryLib.hsl" } 
 namespace _Method { #include "DeleteSchemaIniFromWorklistFolder.hs_" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "Aliquot_with_EasySteps\\Aliquot_with_EasySteps.hs_" } 
 namespace _Method { #include "Culture processing\\Move96HeadAndArm.hs_" } 
#include "07 Dispense DI Water.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable _blnAbortFlag;
variable _intMediaLineInstrumentID;
variable _blnSimulationMode;
variable _intMediaLineCOMPort;
variable _intSimulationMode;
variable _strFilepathStatus;
variable _strTransferPositionTips1000;
variable _strTips1000Name;
variable _strWastePositionTips50;
variable _strWastePositionTips1000;
variable _strWastePositionTips300;
variable _strPCRPlateName;
variable _strTransferPositionPCRPlate;
variable _intMediaLinePumpID;
global device ML_STAR ("07 Dispense DI Water.lay", "ML_STAR", hslTrue);
variable _strTips1000EmptyName;
variable _strTransferPositionTips1000Empty;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
LABWAREHANDLING::_InitLibrary();
IF_AND_IF_OR::_InitLibrary();
RUNTIMEERRORHANDLING::_InitLibrary();
TIPHANDLING::_InitLibrary();
DELETESCHEMAINIFROMWORKLISTFOLDER::_InitLibrary();
ALIQUOT_WITH_EASYSTEPS::_InitLibrary();
MOVE96HEADANDARM::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "6fa73df6_0de0_4541_8664148cf055e55d" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 2 1 0 "7664c843_2c9f_4b34_89aad2a1a567f39c" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 3 1 0 "c62fdbfc_030f_4d3b_ac9b0124fb835871" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
A_Definitions();
// }} ""
// {{{ 4 1 0 "967f9f09_6cd8_425b_bd7940bb4378e859" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
B_Initialise();
// }} ""
// {{{ 5 1 0 "2ab43315_b984_4ca3_a3c842c6d2e1126e" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
C_Pipetting();
// }} ""
// {{{ 6 1 0 "647f8a3a_1c65_4ca5_9722bd7840c4ea60" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
D_Cleanup();
// }} ""
// {{ 2 "AutoExitBlock" ""
LABWAREHANDLING::_ExitLibrary();
IF_AND_IF_OR::_ExitLibrary();
RUNTIMEERRORHANDLING::_ExitLibrary();
TIPHANDLING::_ExitLibrary();
DELETESCHEMAINIFROMWORKLISTFOLDER::_ExitLibrary();
ALIQUOT_WITH_EASYSTEPS::_ExitLibrary();
MOVE96HEADANDARM::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2018-08-08 10:49$$checksum=0b8ce09a$$length=087$$