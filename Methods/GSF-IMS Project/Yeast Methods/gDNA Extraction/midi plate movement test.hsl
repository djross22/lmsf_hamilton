 namespace _Method { #include "Common\\iSWAP-PlateAndLidMovement.hs_" } 
 namespace _Method { #include "HSLML_STARLib.hsl" } 
 namespace _Method { #include "NIST\\Libraries\\NIST_Device_Controllers.hs_" } 
 namespace _Method { #include "HslHamHeaterShakerLib.hsl" } 
 namespace _Method { #include "NIST\\Libraries\\NIST_TruSeqNano_Prep.hs_" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\Dictionary.hsl" } 
 namespace _Method { #include "HSLExtensions\\String.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\File.hsl" } 
 namespace _Method { #include "HSLMthLib.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "HSLFilLib.hsl" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
#include "gDNA Extraction.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable ODTC;
global device ML_STAR ("gDNA Extraction.lay", "ML_STAR", hslTrue);
global device HxFan ("gDNA Extraction.lay", "HxFan", hslTrue);
variable SetTempHHS1;
variable HHS1;
variable HHS2;
variable SetTempHHS2;
variable HHS3;
variable SetTempCPAC;
variable SetTempHHS3;
variable bln_Global_SimulatorMode;
variable str_Global_ODTCIPAddress;
variable var_Global_HHSNode1;
variable var_Global_HHSNode3;
variable var_Global_HHSNode2;
timer timer1;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
 namespace _Method { #include "HSLSTCCLib.hs_" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
ISWAP_PLATEANDLIDMOVEMENT::_InitLibrary();
NIST_DEVICE_CONTROLLERS::_InitLibrary();
NIST_TRUSEQNANO_PREP::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "b3df0a0d_4c17_49d4_a7085c8f8e57435b" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("************************************************************************************\ntest method\n\n****************************************************************************************"));
// }} ""
// {{{ 2 1 0 "831c3c31_2739_4343_840f2acd0b01b7ec" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{{ 3 1 0 "5f68136b_69f0_4872_b2820457696af3cb" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::SetPlateLock(HHS1, 1);
// }} ""
// {{{ 4 1 0 "9570c848_cfbb_4860_88444dbb8962be1a" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StartShaker(HHS1, 1000);
// }} ""
// {{ 5 1 0 "503d7528_207d_47db_849da4e0be9dda3c" "{B31F353E-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.SetTimer(10) )
{
    MECC::RaiseRuntimeErrorEx(-1355939584, MECC::IDS::stepNameTimerStart, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{ 6 1 0 "6e8c2abf_f857_451c_a415d41a16fb3c0f" "{B31F353F-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.WaitTimer(hslTrue, hslTrue) )
{
    MECC::RaiseRuntimeErrorEx(-1339162368, MECC::IDS::stepNameTimerWait, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{{ 7 1 0 "ea59d46e_fa2c_4684_90247513e5338aed" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StopShaker(HHS1);
// }} ""
// {{ 8 1 0 "639930c8_9d45_47bf_acb3c744a98a3971" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 9 1 0 "67c14316_f708_4495_a269dd6116a4a125" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::SetPlateLock(HHS1, 0);
// }} ""
// {{{ 10 1 0 "c5c5910f_43af_4ad9_8a7107ba5c915ab2" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::SetPlateLock(HHS2, 0);
// }} ""
// {{{ 11 1 0 "be2ff7c0_0ddc_4c25_a1a1392d6edfd9fc" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveMidiPlate(ML_STAR.Midi_on_HHS, ML_STAR.Midi_on_HHS_RT, 1, 0, ML_STAR);
// }} ""
// {{{ 12 1 0 "c76624a1_d0b2_450d_b88ec457fecd79de" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::SetPlateLock(HHS2, 1);
// }} ""
// {{{ 13 1 0 "8cc60a65_e47f_485d_b8595a5757d1e40a" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StartShaker(HHS2, 1000);
// }} ""
// {{ 14 1 0 "b1a66208_82a3_43ed_9c66a2f20582e585" "{B31F353E-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.SetTimer(10) )
{
    MECC::RaiseRuntimeErrorEx(-1355939584, MECC::IDS::stepNameTimerStart, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{ 15 1 0 "5ffc0320_fdef_467a_92648fc031bb7181" "{B31F353F-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.WaitTimer(hslTrue, hslTrue) )
{
    MECC::RaiseRuntimeErrorEx(-1339162368, MECC::IDS::stepNameTimerWait, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{{ 16 1 0 "a3a066b8_08f1_4701_87f3c1f4d1fa5793" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StopShaker(HHS2);
// }} ""
// {{{ 17 1 0 "d4e32ca5_bc50_4289_93922cef22410850" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::SetPlateLock(HHS2, 0);
// }} ""
// {{{ 18 1 0 "f5015a24_3314_45b9_92e372df3f3fb0fe" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveMidiPlate(ML_STAR.Midi_on_HHS_RT, ML_STAR.Midi_on_HHS, 1, 0, ML_STAR);
// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{{ 19 1 0 "a5f65c65_3424_457d_a0e160042a246879" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveMidiPlate(ML_STAR.Midi_on_magnet, ML_STAR.Midi_on_HHS, 1, 0, ML_STAR);
// }} ""
// {{{ 20 1 0 "5cb972df_93ca_4f0c_aaa24958f1c828e5" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveMidiPlate(ML_STAR.Midi_on_HHS, ML_STAR.Midi_on_magnet, 1, 0, ML_STAR);
// }} ""
// {{{ 21 1 0 "68bd06f7_1b50_411d_ac9a6d3fd5e85fb2" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveMidiPlate(ML_STAR.Midi_on_magnet, ML_STAR.MIDI_Waste, 0, 1, ML_STAR);
// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{ 2 "AutoExitBlock" ""
ISWAP_PLATEANDLIDMOVEMENT::_ExitLibrary();
NIST_DEVICE_CONTROLLERS::_ExitLibrary();
NIST_TRUSEQNANO_PREP::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2021-09-24 17:37$$checksum=9d2f623a$$length=087$$