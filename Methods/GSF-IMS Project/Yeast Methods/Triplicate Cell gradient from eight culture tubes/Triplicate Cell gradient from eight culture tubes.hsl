 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
 namespace _Method { #include "HSLExtensions\\Dictionary.hsl" } 
 namespace _Method { #include "HSLExtensions\\String.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "Common\\PlateAndLidMovement.hs_" } 
#include "Triplicate Cell gradient from eight culture tubes.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable tip_counter_1000_channels;
variable tip_counter_300_channels;
global device ML_STAR ("Triplicate Cell gradient from eight culture tubes.lay", "ML_STAR", hslTrue);
variable culture_volume;
variable volume_ratio;
variable move_plates_and_lids;
variable mix_volume;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
PLATEANDLIDMOVEMENT::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "5a695990_4065_4742_bcebd2d50db3c0af" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{{ 2 1 0 "cb0e2fbc_8b9b_4a7e_b89525018f30f4b8" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
GetParams();
// }} ""
// {{ 3 1 0 "e67ae80f_f0d9_4eb0_9886dc3af63c2c31" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
volume_ratio = culture_volume / (500 * 1.0);
// }} ""
// {{ 4 1 0 "fb90b2e3_82b1_469b_87ffb8ceb637f512" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 5 1 0 "c73d7614_75d2_4503_a92a4cad35c14c01" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 6 1 0 "c49a9eba_be38_4a39_9eeb183cc4578aeb" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (move_plates_and_lids == "Yes")
{
// }} ""
// {{ 7 1 0 "f7cbf023_de44_47a0_9a59001ae44e74c8" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("=============================================================\nRemove lid from Growth plate\n============================================================="));
// }} ""
// {{{ 8 1 0 "ae03c0c9_f191_4cdc_b9fe1ce7f11df923" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Move_GP_lid, ML_STAR.Move_GP_lid_parking, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 1, ML_STAR);
// }} ""
// {{ 9 1 0 "c49a9eba_be38_4a39_9eeb183cc4578aeb" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 10 1 0 "c73d7614_75d2_4503_a92a4cad35c14c01" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 11 1 0 "6445032f_6588_425b_bc014bfe480a4a21" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 12 1 0 "18735cd0_f9fe_497b_93462d99df9db854" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("=============================================================\nPipette media into Abgene plate and Growth plate\n============================================================="));
// }} ""
// {{ 13 1 0 "e6abe3eb_c61a_40f4_b1a6fc731a96346d" "ML_STAR:{541143FA-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FA_7FA2_11D3_AD85_0004ACB1DCB2("e6abe3eb_c61a_40f4_b1a6fc731a96346d"); // TipPickUp
}
// }} ""
// {{ 14 1 0 "c7381345_d785_407a_b75c752cc4bffeb7" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_EDCB616161AE4ef09821427D249AFDA7[];
sequence arrseqDispense_EDCB616161AE4ef09821427D249AFDA7[];
arrseqAspirate_EDCB616161AE4ef09821427D249AFDA7.SetSize(1);
arrseqAspirate_EDCB616161AE4ef09821427D249AFDA7.SetAt(0, ML_STAR.Media_source);
arrseqDispense_EDCB616161AE4ef09821427D249AFDA7.SetSize(1);
arrseqDispense_EDCB616161AE4ef09821427D249AFDA7.SetAt(0, ML_STAR.Media_for_cells_10x);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslFalse);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslFalse);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 12);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslFalse);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_EDCB616161AE4ef09821427D249AFDA7, arrseqDispense_EDCB616161AE4ef09821427D249AFDA7, 1, 1, 800, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Media_source, ML_STAR.Media_for_cells_10x) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 15 1 0 "85cf2403_c8d9_486b_b9d497e5219916c1" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_A6C81FF2032541c8BBC547F13123AF1F[];
sequence arrseqDispense_A6C81FF2032541c8BBC547F13123AF1F[];
arrseqAspirate_A6C81FF2032541c8BBC547F13123AF1F.SetSize(1);
arrseqAspirate_A6C81FF2032541c8BBC547F13123AF1F.SetAt(0, ML_STAR.Media_source);
arrseqDispense_A6C81FF2032541c8BBC547F13123AF1F.SetSize(1);
arrseqDispense_A6C81FF2032541c8BBC547F13123AF1F.SetAt(0, ML_STAR.Media_for_cells_2x);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslFalse);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslFalse);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 12);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslFalse);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_A6C81FF2032541c8BBC547F13123AF1F, arrseqDispense_A6C81FF2032541c8BBC547F13123AF1F, 1, 1, 800, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Media_source, ML_STAR.Media_for_cells_2x) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 16 1 0 "30951aa5_e141_4f72_8551af90fe2425ca" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_5E3144A38F2940c38E1D15732F0279BD[];
sequence arrseqDispense_5E3144A38F2940c38E1D15732F0279BD[];
arrseqAspirate_5E3144A38F2940c38E1D15732F0279BD.SetSize(1);
arrseqAspirate_5E3144A38F2940c38E1D15732F0279BD.SetAt(0, ML_STAR.Media_source);
arrseqDispense_5E3144A38F2940c38E1D15732F0279BD.SetSize(1);
arrseqDispense_5E3144A38F2940c38E1D15732F0279BD.SetAt(0, ML_STAR.Media_dispense);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslFalse);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslFalse);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 7);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslFalse);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_5E3144A38F2940c38E1D15732F0279BD, arrseqDispense_5E3144A38F2940c38E1D15732F0279BD, 1, 1, culture_volume, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Media_source, ML_STAR.Media_dispense) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 17 1 0 "cd8dfc1c_b6a5_461c_9ca93b263fa3faa3" "ML_STAR:{541143FC-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FC_7FA2_11D3_AD85_0004ACB1DCB2("cd8dfc1c_b6a5_461c_9ca93b263fa3faa3"); // TipEject
}
// }} ""
// {{ 18 1 0 "6445032f_6588_425b_bc014bfe480a4a21" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 19 1 0 "08620302_0ece_4562_b0e0955e8aa59a30" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 20 1 0 "a2689ba0_9bbd_4700_9332478830e7b3f4" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("=============================================================\nPipette cells from tubes to Abgene plate\n============================================================="));
// }} ""
// {{ 21 1 0 "61bc83ca_ed4a_4c32_b16dc9f9c8e99824" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_64E7FAB4FAFB4afb91B2A82889788738[];
sequence arrseqDispense_64E7FAB4FAFB4afb91B2A82889788738[];
arrseqAspirate_64E7FAB4FAFB4afb91B2A82889788738.SetSize(1);
arrseqAspirate_64E7FAB4FAFB4afb91B2A82889788738.SetAt(0, ML_STAR.Cell_Stocks);
arrseqDispense_64E7FAB4FAFB4afb91B2A82889788738.SetSize(1);
arrseqDispense_64E7FAB4FAFB4afb91B2A82889788738.SetAt(0, ML_STAR.Cells_10x);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 3);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 6);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 500);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_64E7FAB4FAFB4afb91B2A82889788738, arrseqDispense_64E7FAB4FAFB4afb91B2A82889788738, 1, 1, 200, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Cell_Stocks, ML_STAR.Cells_10x) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 22 1 0 "483a10fb_ec55_405e_8073cbe131be7bdb" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_84FD203D5CE34df1AD8A44CBFC2CFC02[];
sequence arrseqDispense_84FD203D5CE34df1AD8A44CBFC2CFC02[];
arrseqAspirate_84FD203D5CE34df1AD8A44CBFC2CFC02.SetSize(1);
arrseqAspirate_84FD203D5CE34df1AD8A44CBFC2CFC02.SetAt(0, ML_STAR.Cells_10x);
arrseqDispense_84FD203D5CE34df1AD8A44CBFC2CFC02.SetSize(1);
arrseqDispense_84FD203D5CE34df1AD8A44CBFC2CFC02.SetAt(0, ML_STAR.Cells_2x_all);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 3);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 500);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_84FD203D5CE34df1AD8A44CBFC2CFC02, arrseqDispense_84FD203D5CE34df1AD8A44CBFC2CFC02, 1, 1, 200, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Cells_10x, ML_STAR.Cells_2x_all) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 23 1 0 "08620302_0ece_4562_b0e0955e8aa59a30" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 24 1 0 "a6519815_2381_40ef_8f296d4d38e0f163" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 25 1 0 "bd083b29_1bf1_488b_a0729c93c46adff0" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("=============================================================\nPipette cell gradients in Growth Plate\n============================================================="));
// }} ""
// {{ 26 1 0 "3bb42661_a640_4633_b0d7d2a7eb788fd4" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
mix_volume = volume_ratio * 500;
// }} ""
// {{ 27 1 0 "4da8d16f_136d_4e87_a2fe56f86741bf90" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_E129C9610E9B413aBB1400BBA600E40C[];
sequence arrseqDispense_E129C9610E9B413aBB1400BBA600E40C[];
arrseqAspirate_E129C9610E9B413aBB1400BBA600E40C.SetSize(1);
arrseqAspirate_E129C9610E9B413aBB1400BBA600E40C.SetAt(0, ML_STAR.Cells_dilute_from_1);
arrseqDispense_E129C9610E9B413aBB1400BBA600E40C.SetSize(1);
arrseqDispense_E129C9610E9B413aBB1400BBA600E40C.SetAt(0, ML_STAR.Cells_dilute_to_1);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 1);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 3);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", mix_volume);
PTL::SetPipettingState("DispenseSubmergeDepth", 1);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_E129C9610E9B413aBB1400BBA600E40C, arrseqDispense_E129C9610E9B413aBB1400BBA600E40C, 1, 1, culture_volume, 0, 1, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Cells_dilute_from_1, ML_STAR.Cells_dilute_to_1) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 28 1 0 "c33740bc_d2fd_4759_9a72fee63ebe0f71" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_1427B26CE2164c4188048F57E0F703BD[];
sequence arrseqDispense_1427B26CE2164c4188048F57E0F703BD[];
arrseqAspirate_1427B26CE2164c4188048F57E0F703BD.SetSize(1);
arrseqAspirate_1427B26CE2164c4188048F57E0F703BD.SetAt(0, ML_STAR.Cells_dilute_from_2);
arrseqDispense_1427B26CE2164c4188048F57E0F703BD.SetSize(1);
arrseqDispense_1427B26CE2164c4188048F57E0F703BD.SetAt(0, ML_STAR.Cells_dilute_to_2);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 1);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 3);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", mix_volume);
PTL::SetPipettingState("DispenseSubmergeDepth", 1);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_1427B26CE2164c4188048F57E0F703BD, arrseqDispense_1427B26CE2164c4188048F57E0F703BD, 1, 1, culture_volume, 0, 1, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Cells_dilute_from_2, ML_STAR.Cells_dilute_to_2) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 29 1 0 "2961ef9e_9222_468d_b4c7de6e66af8b95" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_C39990A5AD6F4a06AE34891237950C41[];
sequence arrseqDispense_C39990A5AD6F4a06AE34891237950C41[];
arrseqAspirate_C39990A5AD6F4a06AE34891237950C41.SetSize(1);
arrseqAspirate_C39990A5AD6F4a06AE34891237950C41.SetAt(0, ML_STAR.Cells_dilute_from_3);
arrseqDispense_C39990A5AD6F4a06AE34891237950C41.SetSize(1);
arrseqDispense_C39990A5AD6F4a06AE34891237950C41.SetAt(0, ML_STAR.Cells_dilute_to_3);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 1);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 3);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", mix_volume);
PTL::SetPipettingState("DispenseSubmergeDepth", 1);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_C39990A5AD6F4a06AE34891237950C41, arrseqDispense_C39990A5AD6F4a06AE34891237950C41, 1, 1, culture_volume, 0, 1, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Cells_dilute_from_3, ML_STAR.Cells_dilute_to_3) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 30 1 0 "a6519815_2381_40ef_8f296d4d38e0f163" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 31 1 0 "0e91ba3d_f6cc_444c_8ceedb25d8b65fa4" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 32 1 0 "b9127569_ed86_4929_9843f744ee342ddc" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (move_plates_and_lids == "Yes")
{
// }} ""
// {{ 33 1 0 "77042c9b_5ada_4877_8b9d754ca2c647cd" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("=============================================================\nRemove lid from Growth plate\n============================================================="));
// }} ""
// {{{ 34 1 0 "bac8ee81_b977_4427_8109357a958d3c48" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Move_GP_lid_parking, ML_STAR.Move_GP_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 35 1 0 "c54bd864_05c6_43e1_9f26f000658552a6" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveGrowthPlateWithLid(ML_STAR.Move_GP, ML_STAR.Move_GP_lid, ML_STAR.Move_GP_Handoff, ML_STAR.Move_GP_Handoff_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 0, ML_STAR);
// }} ""
// {{{ 36 1 0 "cfb0132a_6215_40c2_9e2e397907955649" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLidNoTap(ML_STAR.Move_GP_Handoff_lid, ML_STAR.Move_GP_lid_waste, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 37 1 0 "b9127569_ed86_4929_9843f744ee342ddc" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 38 1 0 "0e91ba3d_f6cc_444c_8ceedb25d8b65fa4" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 39 1 0 "c8c8a400_69a4_4865_8b32ae4ad87b4f8a" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
PLATEANDLIDMOVEMENT::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2019-05-15 13:06$$checksum=97bd2b84$$length=087$$