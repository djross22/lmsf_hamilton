 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "Common\\LMSF_Utilities.hs_" } 
 namespace _Method { #include "HSLExtensions\\Dictionary.hsl" } 
 namespace _Method { #include "HSLExtensions\\String.hsl" } 
 namespace _Method { #include "HSLExtensions\\File.hsl" } 
 namespace _Method { #include "Common\\Tip Handling\\With 96-Head\\Tip Handling with 96-Head.hs_" } 
 namespace _Method { #include "HSLExtensions\\Sequence.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "Common\\PlateAndLidMovement.hs_" } 
#include "Cytometry for 6 variants.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable inducer_stock_concentration;
variable inducer_id;
variable inducer_units;
variable worklist_file_path;
variable strain_str;
variable plasmid_str;
sequence tip_seq_arr[];
variable tip_counter_array[];
variable is_pipetting;
variable culture_volume;
variable pipette_volume;
variable mix_volume;
variable is_debugging;
dialog dialogHandleFE8420022C664703B721380EF21E3A35;
dialog dialogHandle645D7A0751374f4f808D5D2935F98BD0;
variable dilution_factor;
variable media_volume;
variable cell_volume;
variable grad_start_volume;
variable inducer_volume;
variable grad_start_media_volume;
variable additive_stock_concentration;
variable additive_id;
variable additive_units;
sequence Inducer_grad_start_arr[];
sequence Inducer_dil_to_arr[];
sequence Inducer_dil_from_arr[];
variable sequence_number;
variable pipette_multiplier;
variable grad_start_volume_cells;
variable plasmid_C_id;
variable plasmid_B_id;
variable plasmid_G_id;
variable plasmid_F_id;
variable plasmid_E_id;
variable plasmid_D_id;
variable grad_plate_number;
variable lineage;
sequence old_GP_lid_arr[];
global device ML_STAR ("Cytometry for 6 variants.lay", "ML_STAR", hslTrue);
variable bead_z_shift;
variable bead_z_unshift;
variable bead_xy_unshift;
variable bead_xy_shift;
variable strain_B_id;
variable strain_G_id;
variable strain_F_id;
variable strain_E_id;
variable strain_D_id;
variable strain_C_id;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
LMSF_UTILITIES::_InitLibrary();
TIP_HANDLING_WITH_96_HEAD::_InitLibrary();
PLATEANDLIDMOVEMENT::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "29fd5554_30f3_4c6f_90a7c0ed6c4903ac" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("==============================================================\nThis method used for preparing plate 2, with inducer gradient but no selector\n\nIt uses 16 1000 uL tips and 8 300 uL tips\nand 1.2 mL of inducer stock\n=============================================================="));
// }} ""
// {{{ 2 1 0 "cce62d4b_3982_4429_8b29d38153690e67" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
GetParams();
// }} ""
// {{{ 3 1 0 "6402e3b3_9e93_49a2_a2440617c9fd4825" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{ 4 1 0 "fabb78c2_aeda_4575_b14a429b4a935966" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 5 1 0 "4e09f4a1_b417_426b_a1e78773b938986f" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 6 1 0 "6dffaaf7_b3e2_44d3_87f8a98c87ed12a6" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
old_GP_lid_arr.SetSize(0);
// }} ""
// {{ 7 1 0 "d5ab442f_3979_440a_8a87713195f9eb48" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
old_GP_lid_arr.AddAsLast(ML_STAR.Lid_parking_Old_Growth_Plate);
// }} ""
// {{ 8 1 0 "05701e33_5aff_4a71_aded7e5f31d893d5" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
old_GP_lid_arr.AddAsLast(ML_STAR.Lid_parking_Old_Growth_Plate_2);
// }} ""
// {{ 9 1 0 "7ec90dcc_f8cd_41cd_a8adc3470aa7fa52" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 10 1 0 "fabb78c2_aeda_4575_b14a429b4a935966" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 11 1 0 "b86e843b_aee9_45aa_8653d66e89754aea" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 12 1 0 "17f28966_da44_41ef_b7d9ff1aa1b7a314" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveGrowthPlateWithLid(ML_STAR.Move_Growth_Plate_Handoff, ML_STAR.Growth_Plate_Handoff_lid, ML_STAR.Move_Growth_Plate, ML_STAR.Growth_Plate_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 13 1 0 "268c3cce_ea31_4e0b_a4266ea719f9f0a2" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Growth_Plate_lid, ML_STAR.Lid_parking_Growth_Plate, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 0, ML_STAR);
// }} ""
// {{{ 14 1 0 "9cb37857_4deb_4d2b_9bfd6b1ff97237b1" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Media_source_lid, ML_STAR.Lid_parking_Media_trough, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 15 1 0 "b86e843b_aee9_45aa_8653d66e89754aea" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 16 1 0 "4f94624a_3f46_4af2_bdee16eaa8d60b1b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 17 1 0 "6408aca8_efb1_4d51_a39226c97d7b059a" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 18 1 0 "cf2a6da1_b8d3_4269_9eb32a301526c94a" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
Inducer_grad_start_arr.SetSize(0);
// }} ""
// {{ 19 1 0 "2e841555_e803_4068_b0baf2d22671e797" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_grad_start_arr.AddAsLast(ML_STAR.Inducer_grad_start_1);
// }} ""
// {{ 20 1 0 "2a97724a_391d_4fe7_83c7746a351d0d1d" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_grad_start_arr.AddAsLast(ML_STAR.Inducer_grad_start_2);
// }} ""
// {{ 21 1 0 "036b18be_36a1_4d70_a667fff431670856" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_grad_start_arr.AddAsLast(ML_STAR.Inducer_grad_start_3);
// }} ""
// {{ 22 1 0 "37923eb7_f836_4af6_9a0fe3e9da227aea" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_grad_start_arr.AddAsLast(ML_STAR.Inducer_grad_start_4);
// }} ""
// {{ 23 1 0 "12fb3ae2_e005_4b85_ae2c09d409507194" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
Inducer_dil_to_arr.SetSize(0);
// }} ""
// {{ 24 1 0 "e935278e_bbec_40f6_88060ddaea164d52" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_dil_to_arr.AddAsLast(ML_STAR.Inducer_dil_to_1);
// }} ""
// {{ 25 1 0 "594533b8_098c_4e4e_8fd43a796f746ba4" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_dil_to_arr.AddAsLast(ML_STAR.Inducer_dil_to_2);
// }} ""
// {{ 26 1 0 "f0e09963_54c2_44d2_98f5a642011c41c0" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_dil_to_arr.AddAsLast(ML_STAR.Inducer_dil_to_3);
// }} ""
// {{ 27 1 0 "8f86543b_d762_4d12_b6cae4a3f2a74a06" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_dil_to_arr.AddAsLast(ML_STAR.Inducer_dil_to_4);
// }} ""
// {{ 28 1 0 "809357c9_8106_4f41_850d2287e6428c45" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
Inducer_dil_from_arr.SetSize(0);
// }} ""
// {{ 29 1 0 "81fee047_d8b9_4c4d_8d9ebe9ceb38dd1f" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_dil_from_arr.AddAsLast(ML_STAR.Inducer_dil_from_1);
// }} ""
// {{ 30 1 0 "d5fbc212_7d9d_412f_a0959cbb12e10cbb" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_dil_from_arr.AddAsLast(ML_STAR.Inducer_dil_from_2);
// }} ""
// {{ 31 1 0 "e461b55f_c4ac_4738_aa71282d3a785a33" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_dil_from_arr.AddAsLast(ML_STAR.Inducer_dil_from_3);
// }} ""
// {{ 32 1 0 "98e75dd7_0b5c_445b_8d482c53e35a613d" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
Inducer_dil_from_arr.AddAsLast(ML_STAR.Inducer_dil_from_4);
// }} ""
// {{ 33 1 0 "4f94624a_3f46_4af2_bdee16eaa8d60b1b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 34 1 0 "3d974e74_6a86_4779_b6c865ecc3691cdf" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 35 1 0 "11bed50c_2de5_4390_b86cc6969fb37b52" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("==============================================================\nPipette media into growth plate \ngradient starter plate is pipetted by hand\n=============================================================="));
// }} ""
// {{{ 36 1 0 "1d2db1fc_cac8_49bb_9dcb0bd8c8a35c25" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
LMSF_UTILITIES::SeqXYZShift(ML_STAR.Media_dispense, bead_xy_shift, bead_xy_shift, bead_z_shift, ML_STAR);
// }} ""
// {{ 37 1 0 "47fc387e_cf40_4ba8_8014549dc6edd6f7" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 38 1 0 "100e117c_7580_407d_a69cff15433e9383" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 39 1 0 "3edaea01_5712_4986_ae1b30e0b3d2516d" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
pipette_multiplier = culture_volume / (500 * 1.0);
// }} ""
// {{ 40 1 0 "8e124cc9_12c1_4dfb_a629510925bc235b" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
cell_volume = culture_volume / (dilution_factor * 1.0);
// }} ""
// {{ 41 1 0 "2e99e511_43e3_445a_bb6d1f5ae24ea6c2" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
media_volume = culture_volume - cell_volume;
// }} ""
// {{ 42 1 0 "21d5d67c_e8d6_41bd_a0264be44d0e4c31" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
grad_start_volume = culture_volume * 1.5;
// }} ""
// {{ 43 1 0 "d8006532_a709_4bee_949bd710872f2516" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
grad_start_volume_cells = grad_start_volume / (dilution_factor * 1.0);
// }} ""
// {{ 44 1 0 "81d07b38_f2aa_42fb_a84248b71f5d1bf6" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
grad_start_media_volume = grad_start_volume - grad_start_volume_cells;
// }} ""
// {{ 45 1 0 "7ab52c84_eced_4333_88f0bcb863298c1d" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 46 1 0 "103ae935_11b1_4ad6_ad9663024b2ad41e" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (grad_plate_number == 1)
{
// }} ""
// {{ 47 1 0 "61c0acbc_720c_4eab_82334e2248eecead" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
inducer_volume = grad_start_volume / (5 * 1.0);
// }} ""
// {{ 48 1 0 "103ae935_11b1_4ad6_ad9663024b2ad41e" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{ 49 1 0 "887a0c95_9665_454f_9e8098c223e231e1" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
inducer_volume = grad_start_media_volume / (5 * 1.0);
// }} ""
// {{ 50 1 0 "103ae935_11b1_4ad6_ad9663024b2ad41e" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 51 1 0 "f3d8d512_2851_4937_92eca453c8310ca0" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 52 1 0 "a62aa805_c425_4539_875dcccff8617f90" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
grad_start_media_volume = grad_start_media_volume - inducer_volume;
// }} ""
// {{{ 53 1 0 "26a89144_6c6b_44a8_86ab84cb59f6d2a7" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TrcTrace(Translate("dilution_factor: "), dilution_factor);
// }} ""
// {{{ 54 1 0 "64d7d956_b22d_48d3_b50fe49dac28dfe7" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TrcTrace(Translate("cell_volume: "), cell_volume);
// }} ""
// {{{ 55 1 0 "76a22241_fd18_4ae5_aa00504a63a66f11" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TrcTrace(Translate("media_volume: "), media_volume);
// }} ""
// {{ 56 1 0 "e005d8a4_e0c6_4f86_affef837b5301541" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 57 1 0 "47fc387e_cf40_4ba8_8014549dc6edd6f7" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 58 1 0 "ed30ce12_dd62_49c1_9aeec5b348670f78" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_pipetting == "true")
{
// }} ""
// {{ 59 1 0 "839f4f5c_5fba_4ced_88d6f873fe23fdc5" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 60 1 0 "be6c4e6d_de00_43fd_b4226b85757743e8" "{E09A7A75-BB29-4e45-B265-7C8388E27D2C}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", 0);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("TipCountingEnabled", hslFalse);
PTL::SetTipHandlingState("TipCountingIdentifier", "");
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipPickupCustomStepID", 0);
PTL::SetTipHandlingState("TipPickupChannelVariable", "");
PTL::SetTipHandlingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetTipHandlingState("TipPickupSequenceReducible", hslTrue);
if( 0 == PTL::TipPickup(ML_STAR, ML_STAR.Tips_1000_Channels) )
{
    PTL::RaiseRuntimeError(-1472986880, PTL::IDS::smartStepTipPickup, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 61 1 0 "6fc969cc_2424_49f2_894d8db2d15a457a" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = media_volume;
// }} ""
// {{ 62 1 0 "def2dddd_6b5d_4733_9f5cebe58574664e" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_41DE3FBF0B5049be812268AF65BD66E0[];
sequence arrseqDispense_41DE3FBF0B5049be812268AF65BD66E0[];
arrseqAspirate_41DE3FBF0B5049be812268AF65BD66E0.SetSize(1);
arrseqAspirate_41DE3FBF0B5049be812268AF65BD66E0.SetAt(0, ML_STAR.Media_source);
arrseqDispense_41DE3FBF0B5049be812268AF65BD66E0.SetSize(1);
arrseqDispense_41DE3FBF0B5049be812268AF65BD66E0.SetAt(0, ML_STAR.Media_dispense);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslFalse);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslFalse);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslFalse);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_41DE3FBF0B5049be812268AF65BD66E0, arrseqDispense_41DE3FBF0B5049be812268AF65BD66E0, 1, 1, pipette_volume, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Media_source, ML_STAR.Media_dispense) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{ 63 1 0 "20e82d4c_370b_447c_829d09a8eb3effe2" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = grad_start_media_volume;
// }} ""
// {{ 64 1 0 "90b9550a_5f26_41bd_81591ed2db432dd9" "{B31F353A-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.Media_source.SetCurrentPosition(1);
// }} ""
// {{ 65 1 0 "27fc96a1_1f55_4826_8b8eb79fff80c973" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 66 1 0 "a6aebe47_15fa_4613_b29da0dfe4327eaf" "ML_STAR:{541143F5-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143F5_7FA2_11D3_AD85_0004ACB1DCB2("a6aebe47_15fa_4613_b29da0dfe4327eaf"); // Aspirate
}
// }} ""
// {{ 67 1 0 "b107bc5d_7d4f_4e08_ae5d544380231cc4" "ML_STAR:{541143F8-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143F8_7FA2_11D3_AD85_0004ACB1DCB2("b107bc5d_7d4f_4e08_ae5d544380231cc4"); // Dispense
}
// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{ 68 1 0 "05a67b0e_0ec4_4dc7_a43a035a26ff3198" "{2C884145-FBC2-46a3-9A50-7B1731970262}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", hslInfinite);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectChannelVariable", "");
if( 0 == PTL::TipEject(ML_STAR) )
{
    PTL::RaiseRuntimeError(-1456209664, PTL::IDS::smartStepTipEject, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 69 1 0 "f034d055_9a97_4749_9fb678ac9db4d50a" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 70 1 0 "ed30ce12_dd62_49c1_9aeec5b348670f78" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{ 71 1 0 "faafcb43_74f7_4f87_b0580c8a708ffb0f" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_debugging == "true")
{
// }} ""
// {{ 72 1 0 "ec5f3311_c8e6_4659_bdc229c4db38597c" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandleFE8420022C664703B721380EF21E3A35.SetOutput(Translate("media into growth plate"), "\n", Translate("media into Abgene plate"), "\n");
dialogHandleFE8420022C664703B721380EF21E3A35.ShowOutput(Translate("Pipetting"), hslOKOnly | hslInformation | hslDefButton1, hslInfinite);
// }} ""
// {{ 73 1 0 "faafcb43_74f7_4f87_b0580c8a708ffb0f" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 74 1 0 "ed30ce12_dd62_49c1_9aeec5b348670f78" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{{ 75 1 0 "5494b32b_90d9_43ce_9b1ec378f9ee75bd" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
LMSF_UTILITIES::SeqXYZShift(ML_STAR.Media_dispense, bead_xy_unshift, bead_xy_unshift, bead_z_unshift, ML_STAR);
// }} ""
// {{ 76 1 0 "3d974e74_6a86_4779_b6c865ecc3691cdf" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 77 1 0 "48684724_ef5e_4f4c_98843fe5e7a3a491" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 78 1 0 "23ea7c07_4138_4350_a1c526abe8662817" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Lid_parking_Media_trough, ML_STAR.Media_source_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 79 1 0 "21be9cb1_3f75_4bde_84d9da8aef00e634" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.ABGene_plate_0002_lid, ML_STAR.Lid_parking_ABGene_plate, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 80 1 0 "48684724_ef5e_4f4c_98843fe5e7a3a491" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 81 1 0 "ff38fdd9_c7a8_4c70_b9a269e92ef6c7d3" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 82 1 0 "107e9ea7_cb75_4fde_83c011eb7776708b" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("==============================================================\nPipete inducer dilution gradient\n=============================================================="));
// }} ""
// {{{ 83 1 0 "c8bc17cf_1f36_468d_94b4ad5810755fde" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
LMSF_UTILITIES::SeqXYZShift(ML_STAR.Media_dispense, bead_xy_shift, bead_xy_shift, bead_z_shift, ML_STAR);
// }} ""
// {{ 84 1 0 "fa817549_b397_402b_9459916e92df031a" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_pipetting == "true")
{
// }} ""
// {{ 85 1 0 "4c18ad90_60f1_4ecc_ac8f79d07ed83af4" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = media_volume * 1;
// }} ""
// {{ 86 1 0 "2d797362_277b_4e6a_8545d51465c652c8" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
mix_volume = pipette_multiplier * 500;
// }} ""
// {{ 87 1 0 "1f62b2b9_5730_433b_99abd345dd926928" "{E09A7A75-BB29-4e45-B265-7C8388E27D2C}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", 0);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("TipCountingEnabled", hslFalse);
PTL::SetTipHandlingState("TipCountingIdentifier", "");
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipPickupCustomStepID", 0);
PTL::SetTipHandlingState("TipPickupChannelVariable", "");
PTL::SetTipHandlingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetTipHandlingState("TipPickupSequenceReducible", hslTrue);
if( 0 == PTL::TipPickup(ML_STAR, ML_STAR.Tips_1000_Channels) )
{
    PTL::RaiseRuntimeError(-1472986880, PTL::IDS::smartStepTipPickup, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 88 1 0 "6ca2d9a2_c744_40d7_85e58e990efbd50d" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_DAA332794ABC429e978E1FB694CBBBAC[];
sequence arrseqDispense_DAA332794ABC429e978E1FB694CBBBAC[];
Util2::SeqArrCheckIndex(Inducer_dil_from_arr, sequence_number, "Inducer_dil_from_arr");
Util2::SeqArrCheckIndex(Inducer_dil_from_arr, sequence_number, "Inducer_dil_from_arr");
Util2::SeqArrCheckIndex(Inducer_dil_to_arr, sequence_number, "Inducer_dil_to_arr");
Util2::SeqArrCheckIndex(Inducer_dil_to_arr, sequence_number, "Inducer_dil_to_arr");
arrseqAspirate_DAA332794ABC429e978E1FB694CBBBAC.SetSize(1);
arrseqAspirate_DAA332794ABC429e978E1FB694CBBBAC.SetAt(0, Inducer_dil_from_arr.ElementAt(sequence_number-1));
arrseqDispense_DAA332794ABC429e978E1FB694CBBBAC.SetSize(1);
arrseqDispense_DAA332794ABC429e978E1FB694CBBBAC.SetAt(0, Inducer_dil_to_arr.ElementAt(sequence_number-1));
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslFalse);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslFalse);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 4);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1.5);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", mix_volume);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_DAA332794ABC429e978E1FB694CBBBAC, arrseqDispense_DAA332794ABC429e978E1FB694CBBBAC, 1, 1, pipette_volume, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", Inducer_dil_from_arr.ElementAt(sequence_number-1), Inducer_dil_to_arr.ElementAt(sequence_number-1)) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 89 1 0 "8d147a2f_7b34_429c_ac53da07fe748aea" "{2C884145-FBC2-46a3-9A50-7B1731970262}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", hslInfinite);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectChannelVariable", "");
if( 0 == PTL::TipEject(ML_STAR) )
{
    PTL::RaiseRuntimeError(-1456209664, PTL::IDS::smartStepTipEject, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 90 1 0 "148de7ba_9948_4d57_a8810f33470199f3" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 91 1 0 "fa817549_b397_402b_9459916e92df031a" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{ 92 1 0 "919022f0_a99f_41e0_829e44bd2d7c47d7" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_debugging == "true")
{
// }} ""
// {{ 93 1 0 "97163e40_a180_4d79_94a0109522d753ce" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandle645D7A0751374f4f808D5D2935F98BD0.SetOutput(Translate("Growth plate and Abgene plate"), "\n");
dialogHandle645D7A0751374f4f808D5D2935F98BD0.ShowOutput(Translate("Pipetting"), hslOKOnly | hslInformation | hslDefButton1, hslInfinite);
// }} ""
// {{ 94 1 0 "919022f0_a99f_41e0_829e44bd2d7c47d7" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 95 1 0 "fa817549_b397_402b_9459916e92df031a" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{{ 96 1 0 "44db668d_e3ee_4212_bd62ed3f9c3609e5" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
LMSF_UTILITIES::SeqXYZShift(ML_STAR.Media_dispense, bead_xy_unshift, bead_xy_unshift, bead_z_unshift, ML_STAR);
// }} ""
// {{ 97 1 0 "ff38fdd9_c7a8_4c70_b9a269e92ef6c7d3" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 98 1 0 "4c307d17_e2ff_4037_bbb09d91cdc74a7e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 99 1 0 "917967bf_393d_44fe_9f3c6906c6ae8bb2" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Lid_parking_Growth_Plate, ML_STAR.Growth_Plate_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 100 1 0 "88588c11_6ac2_41b6_841ac2807f4a1aa5" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Lid_parking_ABGene_plate, ML_STAR.ABGene_plate_0002_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 101 1 0 "4c307d17_e2ff_4037_bbb09d91cdc74a7e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 102 1 0 "eb69218c_6f48_4919_af6e80ea697024f0" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("-----------------------------------------------------------------------------------------------------------"));
// }} ""
// {{{ 103 1 0 "83385b55_a480_4da1_818397dbd2ad8c99" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CalculateOutputs();
// }} ""
// {{{ 104 1 0 "1ad70334_739d_4d61_88667ca67b5aaa7e" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
SaveWorklistAndMetadata();
// }} ""
// {{{ 105 1 0 "af13fb68_17bf_4f43_b95488dd2ab87f18" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
LMSF_UTILITIES::_ExitLibrary();
TIP_HANDLING_WITH_96_HEAD::_ExitLibrary();
PLATEANDLIDMOVEMENT::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2020-10-14 13:33$$checksum=053263c5$$length=087$$