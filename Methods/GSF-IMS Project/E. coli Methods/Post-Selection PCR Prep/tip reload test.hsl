 namespace _Method { #include "Common\\iSWAP-PlateAndLidMovement.hs_" } 
 namespace _Method { #include "HSLML_STARLib.hsl" } 
 namespace _Method { #include "NIST\\Libraries\\NIST_Device_Controllers.hs_" } 
 namespace _Method { #include "HslHamHeaterShakerLib.hsl" } 
 namespace _Method { #include "NIST\\Libraries\\NIST_TruSeqNano_Prep.hs_" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\Dictionary.hsl" } 
 namespace _Method { #include "HSLExtensions\\String.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\File.hsl" } 
 namespace _Method { #include "HSLMthLib.hsl" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "HSLFilLib.hsl" } 
 namespace _Method { #include "Common\\LMSF_Utilities.hs_" } 
 namespace _Method { #include "STAR Tools\\STAR Tip Tools.hs_" } 
#include "Post-Selection PCR and clean-up.24 samples.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
global device ML_STAR ("Post-Selection PCR and clean-up.24 samples.lay", "ML_STAR", hslTrue);
global device HxFan ("Post-Selection PCR and clean-up.24 samples.lay", "HxFan", hslTrue);
variable loopCounter8;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
 namespace _Method { #include "HSLSTCCLib.hs_" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
ISWAP_PLATEANDLIDMOVEMENT::_InitLibrary();
NIST_DEVICE_CONTROLLERS::_InitLibrary();
NIST_TRUSEQNANO_PREP::_InitLibrary();
LMSF_UTILITIES::_InitLibrary();
STAR_TIP_TOOLS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "5d8b454f_6e7c_486b_9f2fe67e1ce98ba4" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{ 2 1 0 "8efbc154_10ca_4934_8a7e5def09748b06" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(loopCounter8 = 0; loopCounter8 < 2;)
{
loopCounter8 = loopCounter8 + 1;
// }} ""
// {{{ 3 1 0 "c0b4260e_6f5d_4b9e_8d76f6db1f7ccd92" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
TipPickupWithErrorHandling(ML_STAR.MlStar50ulTipWithFilter);
// }} ""
// {{ 4 1 0 "f5bd72f9_631c_42ce_abe431823f26800b" "ML_STAR:{541143FC-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FC_7FA2_11D3_AD85_0004ACB1DCB2("f5bd72f9_631c_42ce_abe431823f26800b"); // TipEject
}
// }} ""
// {{ 5 1 0 "8efbc154_10ca_4934_8a7e5def09748b06" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{ 6 1 0 "94f03100_747a_41bf_becc7b6cf1c12cf5" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 7 1 0 "c272bb38_8d7e_471b_b8adc2e20969dc4b" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(loopCounter8 = 0; loopCounter8 < 2;)
{
loopCounter8 = loopCounter8 + 1;
// }} ""
// {{{ 8 1 0 "99de0bd5_d1f3_4038_aef9757540eb9203" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
TipPickupWithErrorHandling(ML_STAR.MlStar1000ulHighVolumeTipWithFilter);
// }} ""
// {{ 9 1 0 "2ad2bcd2_1c4b_453d_95cb3387e17adfee" "ML_STAR:{541143FC-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FC_7FA2_11D3_AD85_0004ACB1DCB2("2ad2bcd2_1c4b_453d_95cb3387e17adfee"); // TipEject
}
// }} ""
// {{ 10 1 0 "c272bb38_8d7e_471b_b8adc2e20969dc4b" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{ 11 1 0 "58dc322b_483b_4965_b71389f998727d34" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 12 1 0 "3583c44f_97cf_4fa3_80d5f25c39cd8509" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(loopCounter8 = 0; loopCounter8 < 2;)
{
loopCounter8 = loopCounter8 + 1;
// }} ""
// {{{ 13 1 0 "7c86fb7c_6232_47ad_99eaa1c087e147f3" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
TipPickupWithErrorHandling(ML_STAR.MlStar300ulStandardVolumeTipWithFilter);
// }} ""
// {{ 14 1 0 "adceae56_5baa_4926_bc9cb70c3abd7cd1" "ML_STAR:{541143FC-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FC_7FA2_11D3_AD85_0004ACB1DCB2("adceae56_5baa_4926_bc9cb70c3abd7cd1"); // TipEject
}
// }} ""
// {{ 15 1 0 "3583c44f_97cf_4fa3_80d5f25c39cd8509" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{ 16 1 0 "93eac470_a77a_4b20_856cf1f47656de0c" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 17 1 0 "fac9219d_1775_4be3_8a7f7c7b62b3f69d" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
ISWAP_PLATEANDLIDMOVEMENT::_ExitLibrary();
NIST_DEVICE_CONTROLLERS::_ExitLibrary();
NIST_TRUSEQNANO_PREP::_ExitLibrary();
LMSF_UTILITIES::_ExitLibrary();
STAR_TIP_TOOLS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2023-04-06 11:48$$checksum=9162323d$$length=087$$