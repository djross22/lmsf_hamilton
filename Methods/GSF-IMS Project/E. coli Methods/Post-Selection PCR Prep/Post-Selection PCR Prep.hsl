global device ML_STAR ("Post-Selection PCR Prep.lay", "ML_STAR", hslTrue);
 namespace _Method { #include "Common\\PlateAndLidMovement.hs_" } 
 namespace _Method { #include "Common\\LMSF_Utilities.hs_" } 
 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
#include "Post-Selection PCR Prep.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable pipette_volume;
variable mix_volume;
dialog customDialogE6FD0E6C031D4a2490825FB0CBCDB27A;
dialog customDialog3AC04A584AC54a26B8CA9BE8536A39E6;
variable primer_mix_volume;
dialog dialogHandle1;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
PLATEANDLIDMOVEMENT::_InitLibrary();
LMSF_UTILITIES::_InitLibrary();
COMMON96HEADSUBMETHODS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "0eefca31_9e08_4f84_971e3dba59c10890" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("0eefca31_9e08_4f84_971e3dba59c10890"); // Initialize
}
// }} ""
// {{ 2 1 0 "25ac269b_9824_4865_aabf4332249bb7b6" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 3 1 0 "14aa1ea6_d858_447f_894fc10d43cd9b33" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.PCR_Plate_lid, ML_STAR.PCR_Plate_Lid_Parking, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 4 1 0 "0ab6ecc6_cc3f_4f02_8f36b29b42de2b88" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Elution_Plate_lid, ML_STAR.Elution_Plate_Lid_Parking, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 5 1 0 "25ac269b_9824_4865_aabf4332249bb7b6" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 6 1 0 "309e6528_af3e_4ed2_828623b02a82a3f2" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 7 1 0 "ea4e4bd1_039b_4f88_8cb8e9b51a1afc0e" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("***************************************************************************\nTransfer DNA template from Elution Plate to PCR plate\n***************************************************************************"));
// }} ""
// {{ 8 1 0 "9098c71d_e5c5_4fc7_9b7bdade48150c8e" "ML_STAR:{BD0D210B-0816-4C86-A903-D6B2DF73F78B}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._BD0D210B_0816_4C86_A903_D6B2DF73F78B("9098c71d_e5c5_4fc7_9b7bdade48150c8e"); // Head96TipPickUp
}
// }} ""
// {{ 9 1 0 "dbaecb33_73a3_4410_b3483fa7ea844bda" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = 40;
// }} ""
// {{ 10 1 0 "d0fc3054_332d_449a_a8e9b1c9cae30033" "ML_STAR:{827392A0-B7E8-4472-9ED3-B45B71B5D27A}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._827392A0_B7E8_4472_9ED3_B45B71B5D27A("d0fc3054_332d_449a_a8e9b1c9cae30033"); // Head96Aspirate
}
// }} ""
// {{ 11 1 0 "9fbd29f7_be17_4ace_9d56adeb5401b715" "ML_STAR:{A48573A5-62ED-4951-9EF9-03207EFE34FB}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._A48573A5_62ED_4951_9EF9_03207EFE34FB("9fbd29f7_be17_4ace_9d56adeb5401b715"); // Head96Dispense
}
// }} ""
// {{{ 12 1 0 "d6924876_c818_4564_8a4859ce557bc0f8" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
COMMON96HEADSUBMETHODS::Eject96HeadTipsAndShake(ML_STAR, 10);
// }} ""
// {{ 13 1 0 "0c77114a_c729_49b4_828bc64ce51cf758" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("***************************************************************************\nAdd Enzyme to PCR plate\n***************************************************************************"));
// }} ""
// {{ 14 1 0 "ed941c55_638f_4358_b5ed84579c9d891e" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = 5;
// }} ""
// {{ 15 1 0 "056a6c39_94de_474e_ba5e27b3c4abe60b" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
mix_volume = 25;
// }} ""
// {{ 16 1 0 "98d3ca55_38db_4d36_9acfa5bc2fcc0a78" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_EE0C1D44991348a2B6BC9BEF0871FA2E[];
sequence arrseqDispense_EE0C1D44991348a2B6BC9BEF0871FA2E[];
arrseqAspirate_EE0C1D44991348a2B6BC9BEF0871FA2E.SetSize(1);
arrseqAspirate_EE0C1D44991348a2B6BC9BEF0871FA2E.SetAt(0, ML_STAR.Restr_Enzyme);
arrseqDispense_EE0C1D44991348a2B6BC9BEF0871FA2E.SetSize(1);
arrseqDispense_EE0C1D44991348a2B6BC9BEF0871FA2E.SetAt(0, ML_STAR.PCR_Plate);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "Tip_50ulFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "Tip_50ulFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("DispensePrerinsingMixCycles", 3);
PTL::SetPipettingState("DispensePrerinsingMixPosition", 1);
PTL::SetPipettingState("DispensePrerinsingMixVolume", mix_volume);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar50ulTipWithFilter, arrseqAspirate_EE0C1D44991348a2B6BC9BEF0871FA2E, arrseqDispense_EE0C1D44991348a2B6BC9BEF0871FA2E, 1, 1, pipette_volume, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Restr_Enzyme, ML_STAR.PCR_Plate) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 17 1 0 "309e6528_af3e_4ed2_828623b02a82a3f2" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 18 1 0 "119ce155_a9fd_4448_9a189b47559cacba" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 19 1 0 "315ff93b_388a_43f3_94e356ebab03754f" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.PCR_Plate_Lid_Parking, ML_STAR.PCR_Plate_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 20 1 0 "6ce9167b_b609_4858_9461684b63eb0410" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Elution_Plate_Lid_Parking, ML_STAR.Elution_Plate_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 21 1 0 "119ce155_a9fd_4448_9a189b47559cacba" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 22 1 0 "89fb7087_9cd7_4c36_b0b987a67b1b4965" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 23 1 0 "84bd86d5_5afe_495e_a58f51beed92764f" "{998A7CCC-4374-484D-A6ED-E8A4F0EB71BA}"
customDialog3AC04A584AC54a26B8CA9BE8536A39E6.InitCustomDialog( "84bd86d5_5afe_495e_a58f51beed92764f" );
customDialog3AC04A584AC54a26B8CA9BE8536A39E6.ShowCustomDialog();
// }} ""
// {{ 24 1 0 "9f04576d_6b37_41f1_a5133ec5bd794696" "{998A7CCC-4374-484D-A6ED-E8A4F0EB71BA}"
customDialogE6FD0E6C031D4a2490825FB0CBCDB27A.InitCustomDialog( "9f04576d_6b37_41f1_a5133ec5bd794696" );
customDialogE6FD0E6C031D4a2490825FB0CBCDB27A.ShowCustomDialog();
// }} ""
// {{ 25 1 0 "89fb7087_9cd7_4c36_b0b987a67b1b4965" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 26 1 0 "2c236336_827c_407c_9f5d3241cd35051a" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 27 1 0 "e548472d_01f0_4b80_8500de692c9501b6" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.PCR_Plate_lid, ML_STAR.PCR_Plate_Lid_Parking, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 28 1 0 "d7aa35af_02f3_42a3_83d3d4ab1a6b29d6" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Primer_Plate_lid, ML_STAR.Primer_Plate_Lid_Parking, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 29 1 0 "2c236336_827c_407c_9f5d3241cd35051a" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 30 1 0 "0ac7a005_a370_48c6_b6ffe6460e21789e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 31 1 0 "50904b81_9425_4d2f_ab9ada74b1b86ad1" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
primer_mix_volume = 100;
// }} ""
// {{ 32 1 0 "d49ce14e_6c56_4183_95276dd67231cf9f" "{B31F3539-5D80-11d4-A5EB-0050DA737D89}"
dialogHandle1.SetInputSize(1);
dialogHandle1.SetInputField(0, Translate("primer mixing volume: "), hslFloat, primer_mix_volume, 0, 200);
dialogHandle1.ShowInput(Translate("Enter Primer Mixing Volume"), hslInfinite, hslOKOnly | hslDefButton1);
primer_mix_volume = dialogHandle1.GetInputField(0);
// }} ""
// {{ 33 1 0 "80e54f88_30ad_4b3a_893737192f3aaa62" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_3488535110F247f79BCCA9B0375EF775[];
sequence arrseqDispense_3488535110F247f79BCCA9B0375EF775[];
arrseqAspirate_3488535110F247f79BCCA9B0375EF775.SetSize(1);
arrseqAspirate_3488535110F247f79BCCA9B0375EF775.SetAt(0, ML_STAR.Primer_mix_from_1);
arrseqDispense_3488535110F247f79BCCA9B0375EF775.SetSize(1);
arrseqDispense_3488535110F247f79BCCA9B0375EF775.SetAt(0, ML_STAR.Primer_mix_to_1);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("DispensePrerinsingMixCycles", 3);
PTL::SetPipettingState("DispensePrerinsingMixPosition", 1);
PTL::SetPipettingState("DispensePrerinsingMixVolume", primer_mix_volume);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar300ulStandardVolumeTipWithFilter, arrseqAspirate_3488535110F247f79BCCA9B0375EF775, arrseqDispense_3488535110F247f79BCCA9B0375EF775, 1, 1, primer_mix_volume, 0, 1, hslInfinite, hslInfinite, 1, "", ML_STAR.Primer_mix_from_1, ML_STAR.Primer_mix_to_1) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 34 1 0 "fc90d2da_6763_464e_a4fe68fe461bf9a4" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_857AD46D24AA48feA7AFA063AE1AD73C[];
sequence arrseqDispense_857AD46D24AA48feA7AFA063AE1AD73C[];
arrseqAspirate_857AD46D24AA48feA7AFA063AE1AD73C.SetSize(1);
arrseqAspirate_857AD46D24AA48feA7AFA063AE1AD73C.SetAt(0, ML_STAR.Primer_mix_from_2);
arrseqDispense_857AD46D24AA48feA7AFA063AE1AD73C.SetSize(1);
arrseqDispense_857AD46D24AA48feA7AFA063AE1AD73C.SetAt(0, ML_STAR.Primer_mix_to_2);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "11000000");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "11000000");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "11000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "11000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "11000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("DispensePrerinsingMixCycles", 3);
PTL::SetPipettingState("DispensePrerinsingMixPosition", 1);
PTL::SetPipettingState("DispensePrerinsingMixVolume", primer_mix_volume);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar300ulStandardVolumeTipWithFilter, arrseqAspirate_857AD46D24AA48feA7AFA063AE1AD73C, arrseqDispense_857AD46D24AA48feA7AFA063AE1AD73C, 1, 1, primer_mix_volume, 0, 1, hslInfinite, hslInfinite, 1, "", ML_STAR.Primer_mix_from_2, ML_STAR.Primer_mix_to_2) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 35 1 0 "0ac7a005_a370_48c6_b6ffe6460e21789e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 36 1 0 "5e7e9bc9_d83a_4604_9ac5df192885b1f6" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 37 1 0 "86690f57_fadd_4e88_a2634fa4402de7cd" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("***************************************************************************\nAdd Primers to PCR plate\n***************************************************************************"));
// }} ""
// {{ 38 1 0 "986440a1_9f32_4e7b_ab7c51c2d7bc7e7e" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = 2.5;
// }} ""
// {{ 39 1 0 "10665ee9_992c_4438_a3c2f36e0c58d1c0" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_CF936F99086F45d3A675E41F19BBB111[];
sequence arrseqDispense_CF936F99086F45d3A675E41F19BBB111[];
arrseqAspirate_CF936F99086F45d3A675E41F19BBB111.SetSize(1);
arrseqAspirate_CF936F99086F45d3A675E41F19BBB111.SetAt(0, ML_STAR.Primer_1);
arrseqDispense_CF936F99086F45d3A675E41F19BBB111.SetSize(1);
arrseqDispense_CF936F99086F45d3A675E41F19BBB111.SetAt(0, ML_STAR.PCR_Plate);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "Tip_50ulFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "Tip_50ulFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar50ulTipWithFilter, arrseqAspirate_CF936F99086F45d3A675E41F19BBB111, arrseqDispense_CF936F99086F45d3A675E41F19BBB111, 1, 1, pipette_volume, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Primer_1, ML_STAR.PCR_Plate) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 40 1 0 "cf720ad6_573e_48b5_878ef636ed574e43" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_AD8A954113EC46c4A0C284D8F56B77C0[];
sequence arrseqDispense_AD8A954113EC46c4A0C284D8F56B77C0[];
arrseqAspirate_AD8A954113EC46c4A0C284D8F56B77C0.SetSize(1);
arrseqAspirate_AD8A954113EC46c4A0C284D8F56B77C0.SetAt(0, ML_STAR.Primer_2);
arrseqDispense_AD8A954113EC46c4A0C284D8F56B77C0.SetSize(1);
arrseqDispense_AD8A954113EC46c4A0C284D8F56B77C0.SetAt(0, ML_STAR.PCR_Plate);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "Tip_50ulFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "Tip_50ulFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar50ulTipWithFilter, arrseqAspirate_AD8A954113EC46c4A0C284D8F56B77C0, arrseqDispense_AD8A954113EC46c4A0C284D8F56B77C0, 1, 1, pipette_volume, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Primer_2, ML_STAR.PCR_Plate) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 41 1 0 "1c2ff330_5b7f_4d77_8563abb4a8896785" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("***************************************************************************\nAdd PCR Master Mix to PCR plate\n***************************************************************************"));
// }} ""
// {{ 42 1 0 "e1763df3_817c_4ece_b15b5b4acf06e60a" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = 50;
// }} ""
// {{ 43 1 0 "3f32fb88_445f_4fe7_af92328c37275dea" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
mix_volume = 50;
// }} ""
// {{ 44 1 0 "e6c91676_9b39_43a1_a7523c6a2f57c2b8" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_5A02977E805B4a438B054168A80F7E79[];
sequence arrseqDispense_5A02977E805B4a438B054168A80F7E79[];
arrseqAspirate_5A02977E805B4a438B054168A80F7E79.SetSize(1);
arrseqAspirate_5A02977E805B4a438B054168A80F7E79.SetAt(0, ML_STAR.Master_Mix);
arrseqDispense_5A02977E805B4a438B054168A80F7E79.SetSize(1);
arrseqDispense_5A02977E805B4a438B054168A80F7E79.SetAt(0, ML_STAR.PCR_Plate);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "Tip_50ulFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "Tip_50ulFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("DispensePrerinsingMixCycles", 3);
PTL::SetPipettingState("DispensePrerinsingMixPosition", 2);
PTL::SetPipettingState("DispensePrerinsingMixVolume", mix_volume);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar50ulTipWithFilter, arrseqAspirate_5A02977E805B4a438B054168A80F7E79, arrseqDispense_5A02977E805B4a438B054168A80F7E79, 1, 1, pipette_volume, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Master_Mix, ML_STAR.PCR_Plate) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 45 1 0 "5e7e9bc9_d83a_4604_9ac5df192885b1f6" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 46 1 0 "5b291a55_8eb9_4057_b83e0ce9c1247fd7" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 47 1 0 "8e470f6b_8778_4943_8b40e3328d7a6f1b" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Primer_Plate_Lid_Parking, ML_STAR.Primer_Plate_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 48 1 0 "2d2c7b73_3478_4af1_a4d7207536fecc38" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.PCR_Plate_Lid_Parking, ML_STAR.PCR_Plate_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 49 1 0 "5b291a55_8eb9_4057_b83e0ce9c1247fd7" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 2 "AutoExitBlock" ""
PLATEANDLIDMOVEMENT::_ExitLibrary();
LMSF_UTILITIES::_ExitLibrary();
COMMON96HEADSUBMETHODS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2019-07-13 12:38$$checksum=6250790c$$length=085$$