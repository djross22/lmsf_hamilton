 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "Common\\LMSF_Utilities.hs_" } 
 namespace _Method { #include "HSLExtensions\\Dictionary.hsl" } 
 namespace _Method { #include "HSLExtensions\\String.hsl" } 
 namespace _Method { #include "HSLExtensions\\File.hsl" } 
 namespace _Method { #include "Common\\Tip Handling\\With 96-Head\\Tip Handling with 96-Head.hs_" } 
 namespace _Method { #include "HSLExtensions\\Sequence.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "Common\\PlateAndLidMovement.hs_" } 
 namespace _Method { #include "..\\..\\GSF-IMS.shared_submethods.hs_" } 
#include "Cytometry for 3 ligands and 5 variants.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable worklist_file_path;
variable strain_1_id;
variable strain_str;
variable plasmid_str;
sequence tip_seq_arr[];
variable tip_counter_array[];
variable is_pipetting;
variable culture_volume;
variable pipette_volume;
variable is_debugging;
dialog dialogHandleFE8420022C664703B721380EF21E3A35;
dialog dialogHandle645D7A0751374f4f808D5D2935F98BD0;
variable dilution_factor;
variable media_volume;
variable cell_volume;
variable additive_stock_concentration;
variable additive_id;
variable additive_units;
variable lineage;
sequence old_GP_lid_arr[];
dialog dialogHandle313B1B04B72B4a9d90539D2D4A55850B;
sequence Inducer_source_arr[];
variable inducer_3_stock_concentration;
variable inducer_3_id;
variable inducer_2_id;
variable inducer_1_units;
variable inducer_1_id;
variable inducer_2_units;
variable inducer_2_stock_concentration;
variable inducer_3_units;
variable inducer_1_stock_concentration;
global device ML_STAR ("Cytometry for 3 ligands and 5 variants.lay", "ML_STAR", hslTrue);
sequence Inducer_grad_start_arr[];
variable plasmid_2_id;
variable plasmid_1_id;
variable plasmid_5_id;
variable plasmid_4_id;
variable plasmid_3_id;
dialog dialogHandle759E2BB0FE3D42efAC89A38EC4BB1AD5;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
LMSF_UTILITIES::_InitLibrary();
TIP_HANDLING_WITH_96_HEAD::_InitLibrary();
PLATEANDLIDMOVEMENT::_InitLibrary();
GSF_IMS_SHARED_SUBMETHODS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "29fd5554_30f3_4c6f_90a7c0ed6c4903ac" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("==============================================================\nThis method used for preparing plate 2, with inducer gradient but no selector\n\nIt uses 16 1000 uL tips and 8 300 uL tips\nand 1.2 mL of inducer stock\n=============================================================="));
// }} ""
// {{{ 2 1 0 "cce62d4b_3982_4429_8b29d38153690e67" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
GetParams();
// }} ""
// {{{ 3 1 0 "6402e3b3_9e93_49a2_a2440617c9fd4825" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{ 4 1 0 "fabb78c2_aeda_4575_b14a429b4a935966" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 5 1 0 "4e09f4a1_b417_426b_a1e78773b938986f" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 6 1 0 "6dffaaf7_b3e2_44d3_87f8a98c87ed12a6" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
old_GP_lid_arr.SetSize(0);
// }} ""
// {{ 7 1 0 "d5ab442f_3979_440a_8a87713195f9eb48" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
old_GP_lid_arr.AddAsLast(ML_STAR.Lid_parking_Old_Growth_Plate);
// }} ""
// {{ 8 1 0 "05701e33_5aff_4a71_aded7e5f31d893d5" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
old_GP_lid_arr.AddAsLast(ML_STAR.Lid_parking_Old_Growth_Plate_2);
// }} ""
// {{ 9 1 0 "7ec90dcc_f8cd_41cd_a8adc3470aa7fa52" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 10 1 0 "fabb78c2_aeda_4575_b14a429b4a935966" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 11 1 0 "d4ccb3e1_f47d_48d3_97d3e3ddf0feaeee" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 12 1 0 "17f28966_da44_41ef_b7d9ff1aa1b7a314" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveGrowthPlateWithLid(ML_STAR.Move_Growth_Plate_Handoff, ML_STAR.Growth_Plate_Handoff_lid, ML_STAR.Move_Growth_Plate, ML_STAR.Growth_Plate_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 13 1 0 "268c3cce_ea31_4e0b_a4266ea719f9f0a2" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Growth_Plate_lid, ML_STAR.Lid_parking_Growth_Plate, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 0, ML_STAR);
// }} ""
// {{{ 14 1 0 "9cb37857_4deb_4d2b_9bfd6b1ff97237b1" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Media_source_lid, ML_STAR.Lid_parking_Media_trough, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 15 1 0 "d4ccb3e1_f47d_48d3_97d3e3ddf0feaeee" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 16 1 0 "31f5c5c7_ac51_4c54_a3930af06a5fad4d" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 17 1 0 "6e5db52f_6275_4a99_b07204e6809f56e7" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 18 1 0 "e48cfa25_96db_40db_8b3d0ba3dc322195" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
cell_volume = culture_volume / (dilution_factor * 1.0);
// }} ""
// {{ 19 1 0 "b96e36a2_4fac_4945_a0e845990f6afa57" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
media_volume = culture_volume - cell_volume;
// }} ""
// {{ 20 1 0 "123aec6e_d3b2_4a32_bac0e369583417f0" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 21 1 0 "c5f73328_de36_418c_97ab4de1da8e8d47" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TrcTrace(Translate("cell_volume: "), cell_volume);
// }} ""
// {{{ 22 1 0 "6c6e01a7_4601_4d1e_8dc508b3551aef4b" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TrcTrace(Translate("media_volume: "), media_volume);
// }} ""
// {{ 23 1 0 "dd37ef7f_5871_4388_bf56d69fba99446b" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 24 1 0 "31f5c5c7_ac51_4c54_a3930af06a5fad4d" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 25 1 0 "3d974e74_6a86_4779_b6c865ecc3691cdf" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 26 1 0 "413efad5_0af0_4bb6_974e5838eb399bf8" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("==============================================================\nPipette media into growth plate and gradient starter plate\n=============================================================="));
// }} ""
// {{ 27 1 0 "ed30ce12_dd62_49c1_9aeec5b348670f78" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_pipetting == "true")
{
// }} ""
// {{ 28 1 0 "839f4f5c_5fba_4ced_88d6f873fe23fdc5" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 29 1 0 "be6c4e6d_de00_43fd_b4226b85757743e8" "{E09A7A75-BB29-4e45-B265-7C8388E27D2C}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", 0);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("TipCountingEnabled", hslFalse);
PTL::SetTipHandlingState("TipCountingIdentifier", "");
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipPickupCustomStepID", 0);
PTL::SetTipHandlingState("TipPickupChannelVariable", "");
PTL::SetTipHandlingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetTipHandlingState("TipPickupSequenceReducible", hslTrue);
if( 0 == PTL::TipPickup(ML_STAR, ML_STAR.Tips_1000_Channels) )
{
    PTL::RaiseRuntimeError(-1472986880, PTL::IDS::smartStepTipPickup, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 30 1 0 "8d114337_6829_4da7_896ccf2f746dacaf" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = media_volume;
// }} ""
// {{{ 31 1 0 "c3aea15c_6d3a_4851_9e7f890b2e0f4bc8" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
pipette_media(ML_STAR.Growth_Plate, pipette_volume, 1);
// }} ""
// {{ 32 1 0 "05a67b0e_0ec4_4dc7_a43a035a26ff3198" "{2C884145-FBC2-46a3-9A50-7B1731970262}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", hslInfinite);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectChannelVariable", "");
if( 0 == PTL::TipEject(ML_STAR) )
{
    PTL::RaiseRuntimeError(-1456209664, PTL::IDS::smartStepTipEject, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 33 1 0 "f034d055_9a97_4749_9fb678ac9db4d50a" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 34 1 0 "ed30ce12_dd62_49c1_9aeec5b348670f78" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{ 35 1 0 "faafcb43_74f7_4f87_b0580c8a708ffb0f" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_debugging == "true")
{
// }} ""
// {{ 36 1 0 "ec5f3311_c8e6_4659_bdc229c4db38597c" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandleFE8420022C664703B721380EF21E3A35.SetOutput(Translate("media into growth plate"), "\n", Translate("media into Abgene plate"), "\n");
dialogHandleFE8420022C664703B721380EF21E3A35.ShowOutput(Translate("Pipetting"), hslOKOnly | hslInformation | hslDefButton1, hslInfinite);
// }} ""
// {{ 37 1 0 "faafcb43_74f7_4f87_b0580c8a708ffb0f" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 38 1 0 "ed30ce12_dd62_49c1_9aeec5b348670f78" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 39 1 0 "3d974e74_6a86_4779_b6c865ecc3691cdf" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 40 1 0 "9ab40423_7690_4e04_99abcbeb10eeb50d" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 41 1 0 "f351b4c4_0fbd_4ee0_9f791a256b9f0b66" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Lid_parking_Media_trough, ML_STAR.Media_source_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 1, ML_STAR);
// }} ""
// {{ 42 1 0 "9ab40423_7690_4e04_99abcbeb10eeb50d" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 43 1 0 "b0bf83c3_6237_4cef_9b0fd2cc81ac1bc8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 44 1 0 "150c98f8_8961_43f7_ab26170feb7ee271" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_pipetting == "true")
{
// }} ""
// {{ 45 1 0 "490debe1_d9b0_4171_a8ac81713e244634" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 46 1 0 "28738782_ccfc_4cb7_9d875943ccbd2fe0" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = cell_volume;
// }} ""
// {{ 47 1 0 "3c3a2483_1d7b_424d_96023251cb30f1c5" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_23BC849BB23E4de1A7A0230C5531E961[];
sequence arrseqDispense_23BC849BB23E4de1A7A0230C5531E961[];
arrseqAspirate_23BC849BB23E4de1A7A0230C5531E961.SetSize(1);
arrseqAspirate_23BC849BB23E4de1A7A0230C5531E961.SetAt(0, ML_STAR.Bacteria_stock);
arrseqDispense_23BC849BB23E4de1A7A0230C5531E961.SetSize(1);
arrseqDispense_23BC849BB23E4de1A7A0230C5531E961.SetAt(0, ML_STAR.Bacteria_dispense);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "11111000");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "11111000");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "11111000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "11111000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 1);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 8);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 800);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "11111000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_23BC849BB23E4de1A7A0230C5531E961, arrseqDispense_23BC849BB23E4de1A7A0230C5531E961, 1, 1, pipette_volume, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Bacteria_stock, ML_STAR.Bacteria_dispense) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 48 1 0 "f0952060_81cd_4ddf_88fd7a0aa2b58c58" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 49 1 0 "150c98f8_8961_43f7_ab26170feb7ee271" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{ 50 1 0 "fe14442c_ea53_409b_a8720cdeffb28e09" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_debugging == "true")
{
// }} ""
// {{ 51 1 0 "aefe161a_0e89_4747_87340d5f7409a342" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandle759E2BB0FE3D42efAC89A38EC4BB1AD5.SetOutput(Translate("media into growth plate"), "\n", Translate("media into Abgene plate"), "\n");
dialogHandle759E2BB0FE3D42efAC89A38EC4BB1AD5.ShowOutput(Translate("Pipetting"), hslOKOnly | hslInformation | hslDefButton1, hslInfinite);
// }} ""
// {{ 52 1 0 "fe14442c_ea53_409b_a8720cdeffb28e09" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 53 1 0 "150c98f8_8961_43f7_ab26170feb7ee271" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 54 1 0 "b0bf83c3_6237_4cef_9b0fd2cc81ac1bc8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 55 1 0 "2bad3a9f_8e33_416c_944ba4d52e2bafc8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 56 1 0 "7c460420_1942_4519_95dbb3c9ed3baf8b" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Lid_parking_Growth_Plate, ML_STAR.Growth_Plate_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 57 1 0 "2e484085_4ae8_4d87_98dc6de2c7ff356f" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveGrowthPlateWithLid(ML_STAR.Move_Growth_Plate, ML_STAR.Growth_Plate_lid, ML_STAR.Move_Growth_Plate_Handoff, ML_STAR.Growth_Plate_Handoff_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 0, ML_STAR);
// }} ""
// {{{ 58 1 0 "57504191_825e_4dcb_8c3c4d1b0da8a782" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Growth_Plate_Handoff_lid, old_GP_lid_arr.ElementAt( lineage -1), ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 59 1 0 "2bad3a9f_8e33_416c_944ba4d52e2bafc8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 60 1 0 "eb69218c_6f48_4919_af6e80ea697024f0" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("-----------------------------------------------------------------------------------------------------------"));
// }} ""
// {{{ 61 1 0 "83385b55_a480_4da1_818397dbd2ad8c99" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CalculateOutputs();
// }} ""
// {{{ 62 1 0 "1ad70334_739d_4d61_88667ca67b5aaa7e" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
SaveWorklistAndMetadata();
// }} ""
// {{{ 63 1 0 "af13fb68_17bf_4f43_b95488dd2ab87f18" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
LMSF_UTILITIES::_ExitLibrary();
TIP_HANDLING_WITH_96_HEAD::_ExitLibrary();
PLATEANDLIDMOVEMENT::_ExitLibrary();
GSF_IMS_SHARED_SUBMETHODS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2023-06-15 21:01$$checksum=8fabdc1c$$length=085$$