 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\Dictionary.hsl" } 
 namespace _Method { #include "HSLExtensions\\String.hsl" } 
 namespace _Method { #include "HSLExtensions\\File.hsl" } 
 namespace _Method { #include "Common\\Tip Handling\\With 96-Head\\Tip Handling with 96-Head.hs_" } 
 namespace _Method { #include "HSLExtensions\\Directory.hsl" } 
 namespace _Method { #include "HSLTimLib.hsl" } 
 namespace _Method { #include "Common\\LMSF_Utilities.hs_" } 
 namespace _Method { #include "Common\\PlateAndLidMovement.hs_" } 
#include "Cell growth and pellet.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable inducer_stock_concentration;
variable inducer_id;
variable inducer_units;
variable plasmid_1_id;
variable worklist_file_path;
variable strain_1_id;
sequence tip_seq_arr[];
variable tip_counter_array[];
variable is_pipetting;
variable is_debugging;
variable additive_id;
variable additive_units;
variable input_worklist_path;
variable plasmid_2_id;
variable strain_2_id;
variable sequence_number;
sequence cytom_plate_lid_arr[];
sequence cytom_plate_move_from_arr[];
sequence cytom_plate_move_to_arr[];
sequence FF_blank_arr[];
sequence PBS_blank_arr[];
sequence cytom_plate_cells_arr[];
sequence cytom_plate_lid_move_to_arr[];
variable pipette_volume;
variable mix_volume;
variable strain_str;
variable plasmid_str;
global device ML_STAR ("Cell growth and pellet.lay", "ML_STAR", hslTrue);
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
TIP_HANDLING_WITH_96_HEAD::_InitLibrary();
LMSF_UTILITIES::_InitLibrary();
PLATEANDLIDMOVEMENT::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "10ba1963_ad53_450f_9e5642f91837b380" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("==========================================================================================\nThis method used for preparing a cytometry plate from a growth plate, after the growth palte has been copied to a new GP\n\nIt uses 48 300 uL tips\n=========================================================================================="));
// }} ""
// {{ 2 1 0 "f917314e_e4ba_4925_89c6a03c5a002c5a" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
strain_str = "strain";
// }} ""
// {{ 3 1 0 "e3435fee_959c_4c29_b015825fbe13bc40" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
plasmid_str = "plasmid";
// }} ""
// {{{ 4 1 0 "5c4f17fa_cc3c_40f4_aa4046489b9681ca" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
GetParams();
// }} ""
// {{{ 5 1 0 "fb5e9288_9e64_47dd_a3d94cea0fe6d5fb" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{ 6 1 0 "0a371a23_09ef_42f3_a277ba28ac04ac84" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 7 1 0 "25e83397_4ba2_456a_86e5bbd907e1517a" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 8 1 0 "5f5ef3e7_7109_4d6f_973b0e1ffc8d8dde" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
cytom_plate_lid_arr.SetSize(0);
// }} ""
// {{ 9 1 0 "e556b540_891a_461f_b74d94c0a7d98ad7" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
cytom_plate_lid_arr.AddAsLast(ML_STAR.Cytometer_Plate_1_lid);
// }} ""
// {{ 10 1 0 "e16e7f36_133d_4612_aec72234c45a8fab" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
cytom_plate_lid_arr.AddAsLast(ML_STAR.Cytometer_Plate_2_lid);
// }} ""
// {{ 11 1 0 "f32d5885_4ade_4696_9614b4e7feaed5c8" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 12 1 0 "936f6b25_bf83_448c_8474d7b2c3594a7a" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
cytom_plate_move_from_arr.SetSize(0);
// }} ""
// {{ 13 1 0 "8afa937f_d22f_4b72_87b574742a1095b8" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
cytom_plate_move_from_arr.AddAsLast(ML_STAR.Move_Cytometer_Plate_1);
// }} ""
// {{ 14 1 0 "937ae6cd_72bc_4352_8a2f3c1c4231d222" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
cytom_plate_move_from_arr.AddAsLast(ML_STAR.Move_Cytometer_Plate_2);
// }} ""
// {{ 15 1 0 "86cf3c2b_46a3_4fce_867d07facf2cb9c0" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 16 1 0 "2f34549d_303c_4bd3_94f418957b8c2796" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
cytom_plate_move_to_arr.SetSize(0);
// }} ""
// {{ 17 1 0 "52c2551c_e271_464d_ac1908356faa82f4" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
cytom_plate_move_to_arr.AddAsLast(ML_STAR.Cytometer_Plate_1_To_User);
// }} ""
// {{ 18 1 0 "34a9efd7_f61e_4e39_b8d531bd84d53a5f" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
cytom_plate_move_to_arr.AddAsLast(ML_STAR.Cytometer_Plate_2_To_User);
// }} ""
// {{ 19 1 0 "224b7373_a512_4d2d_a53015348f20d36f" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 20 1 0 "1b00c7cc_4e86_4c99_933a1296b0757a01" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
cytom_plate_lid_move_to_arr.SetSize(0);
// }} ""
// {{ 21 1 0 "e6f1f69f_869d_465f_8e09c07e7cf12bdd" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
cytom_plate_lid_move_to_arr.AddAsLast(ML_STAR.Cytometer_Plate_1_To_User_lid);
// }} ""
// {{ 22 1 0 "6c1dbcea_e93a_4ba6_bbb5aedc550fa949" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
cytom_plate_lid_move_to_arr.AddAsLast(ML_STAR.Cytometer_Plate_2_To_User_lid);
// }} ""
// {{ 23 1 0 "6af6d477_ea67_40f3_b43a5da840baa11b" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 24 1 0 "ff02f768_6b08_4a12_a160c0ef388cd373" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
FF_blank_arr.SetSize(0);
// }} ""
// {{ 25 1 0 "e8769a4b_e5c9_4ec9_bc6fe1488188e6b0" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
FF_blank_arr.AddAsLast(ML_STAR.FF_blanks_1);
// }} ""
// {{ 26 1 0 "38333fd8_a395_44a2_a82c0eb958c8aa66" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
FF_blank_arr.AddAsLast(ML_STAR.FF_blanks_2);
// }} ""
// {{ 27 1 0 "3d096bf3_d624_453a_ab22c0b64d1acb1b" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 28 1 0 "c1eb91b2_b9d6_462f_923dab4025214489" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
PBS_blank_arr.SetSize(0);
// }} ""
// {{ 29 1 0 "2d68a5a3_a649_49c7_b8436f4dfafcd4f2" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
PBS_blank_arr.AddAsLast(ML_STAR.PBS_blanks_1);
// }} ""
// {{ 30 1 0 "7842bc04_f596_4494_8a968bf44befe84b" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
PBS_blank_arr.AddAsLast(ML_STAR.PBS_blanks_2);
// }} ""
// {{ 31 1 0 "d8736d63_52f3_487f_a9a307d91a06050a" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 32 1 0 "fd5f168b_6171_4fd0_877f765271094d67" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
cytom_plate_cells_arr.SetSize(0);
// }} ""
// {{ 33 1 0 "8a72f67d_72d0_493e_adc61684154d4920" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
cytom_plate_cells_arr.AddAsLast(ML_STAR.cytom_plate_cells_1);
// }} ""
// {{ 34 1 0 "aa685ebe_3eff_48f1_9e1381378c779140" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
cytom_plate_cells_arr.AddAsLast(ML_STAR.cytom_plate_cells_2);
// }} ""
// {{ 35 1 0 "0a371a23_09ef_42f3_a277ba28ac04ac84" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 36 1 0 "5619b0cd_7763_4bf3_946db262618ba928" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 37 1 0 "f42e6f05_6344_4d6c_989c0af46cceb5ee" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Old_Growth_Plate_parking_lid, ML_STAR.Lid_parking_Old_Growth_Plate_2, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 38 1 0 "20460e07_23b3_4e26_840ea352363dae3d" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(cytom_plate_lid_arr.ElementAt( sequence_number -1), ML_STAR.Lid_parking_cytometery_plate, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 39 1 0 "5619b0cd_7763_4bf3_946db262618ba928" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 40 1 0 "2668d186_3a4a_4761_b804dfa2189be8e0" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 41 1 0 "cfe33bb8_4963_40fe_9166c8c579012133" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("==========================================\nTransfer cells from old GP to cytometry plate\n=========================================="));
// }} ""
// {{ 42 1 0 "757548c5_8b3b_41c2_9b7b2e41e9bed07c" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = 5;
// }} ""
// {{ 43 1 0 "b1fdc440_cf26_477b_9c959f90b0dfe85e" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
mix_volume = 150;
// }} ""
// {{ 44 1 0 "86a4a99a_4f9f_4be1_948d6a942b5df5a7" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_B0AF48252D2E4718A1B077DB4C78FCC5[];
sequence arrseqDispense_B0AF48252D2E4718A1B077DB4C78FCC5[];
Util2::SeqArrCheckIndex(cytom_plate_cells_arr, sequence_number, "cytom_plate_cells_arr");
Util2::SeqArrCheckIndex(cytom_plate_cells_arr, sequence_number, "cytom_plate_cells_arr");
arrseqAspirate_B0AF48252D2E4718A1B077DB4C78FCC5.SetSize(1);
arrseqAspirate_B0AF48252D2E4718A1B077DB4C78FCC5.SetAt(0, ML_STAR.Old_GP_cells);
arrseqDispense_B0AF48252D2E4718A1B077DB4C78FCC5.SetSize(1);
arrseqDispense_B0AF48252D2E4718A1B077DB4C78FCC5.SetAt(0, cytom_plate_cells_arr.ElementAt(sequence_number-1));
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 12);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 0);
PTL::SetPipettingState("AspirateFluidHeight", 1);
PTL::SetPipettingState("AspirateSubmergeDepth", 0);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslFalse);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_300_Channels, arrseqAspirate_B0AF48252D2E4718A1B077DB4C78FCC5, arrseqDispense_B0AF48252D2E4718A1B077DB4C78FCC5, 1, 1, pipette_volume, 0, 1, hslInfinite, hslInfinite, 1, "", ML_STAR.Old_GP_cells, cytom_plate_cells_arr.ElementAt(sequence_number-1)) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 45 1 0 "2668d186_3a4a_4761_b804dfa2189be8e0" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 46 1 0 "2c517f2f_b43b_4b5c_ab28243074f18d09" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 47 1 0 "7f27cc59_24e6_44c6_ad31ace781593759" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Lid_parking_cytometery_plate, cytom_plate_lid_arr.ElementAt( sequence_number -1), ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 48 1 0 "e4ac9ae8_2364_475b_9281c20c36c41d94" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveCytometryPlateWithLid(cytom_plate_move_from_arr.ElementAt( sequence_number -1), cytom_plate_lid_arr.ElementAt( sequence_number -1), cytom_plate_move_to_arr.ElementAt( sequence_number -1), cytom_plate_lid_move_to_arr.ElementAt( sequence_number -1), ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 0, ML_STAR);
// }} ""
// {{{ 49 1 0 "61ff8043_7863_4355_870875e80e177056" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Lid_parking_Old_Growth_Plate_2, ML_STAR.Old_Growth_Plate_parking_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 50 1 0 "2c517f2f_b43b_4b5c_ab28243074f18d09" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 51 1 0 "73927669_4892_43d0_b78e4d7585d1a8cc" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("-----------------------------------------------------------------------------------------------------------"));
// }} ""
// {{ 52 1 0 "752e5f74_373c_4692_a762ccb42fff3759" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 53 1 0 "43fdd6b0_7274_47a1_874467dbf21c8564" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CalculateOutputs();
// }} ""
// {{{ 54 1 0 "8b31a8b8_1fa8_4353_91cc377998d5d9e5" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
SaveWorklistAndMetadata();
// }} ""
// {{{ 55 1 0 "9616abcb_ae7b_4efb_8a75341979f98952" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
TIP_HANDLING_WITH_96_HEAD::_ExitLibrary();
LMSF_UTILITIES::_ExitLibrary();
PLATEANDLIDMOVEMENT::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2019-09-03 13:55$$checksum=e02d315a$$length=087$$