 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\Dictionary.hsl" } 
 namespace _Method { #include "HSLExtensions\\String.hsl" } 
 namespace _Method { #include "HSLExtensions\\File.hsl" } 
 namespace _Method { #include "Common\\Tip Handling\\With 96-Head\\Tip Handling with 96-Head.hs_" } 
 namespace _Method { #include "HSLExtensions\\Directory.hsl" } 
 namespace _Method { #include "HSLTimLib.hsl" } 
 namespace _Method { #include "Common\\LMSF_Utilities.hs_" } 
 namespace _Method { #include "Common\\PlateAndLidMovement.hs_" } 
 namespace _Method { #include "..\\..\\GSF-IMS.shared_submethods.hs_" } 
#include "Fitness Selection.Align-TF.GBA_1.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable inducer_stock_concentration;
variable inducer_id;
variable inducer_units;
variable worklist_file_path;
variable strain_1_id;
sequence tip_seq_arr[];
variable tip_counter_array[];
variable is_pipetting;
variable culture_volume;
variable pipette_volume;
variable is_debugging;
dialog dialogHandle0D63CE637F0C4dbe98CDA072B7B6814D;
dialog dialogHandle1BFBEF7929BC4880A89DE43B831AB5E3;
variable additive_id;
variable additive_units;
variable additive_stock_concentration;
variable loopCounter1;
variable lineage;
sequence old_GP_lid_park_arr[];
global device ML_STAR ("Fitness Selection.Align-TF.GBA_1.lay", "ML_STAR", hslTrue);
sequence bacteria_stocks_arr[];
sequence bacteria_dispense_arr[];
variable is_clonal_test;
variable plasmid_1_id_arr[];
variable plasmid_2_id_arr[];
variable plasmid_3_id_arr[];
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
TIP_HANDLING_WITH_96_HEAD::_InitLibrary();
LMSF_UTILITIES::_InitLibrary();
PLATEANDLIDMOVEMENT::_InitLibrary();
GSF_IMS_SHARED_SUBMETHODS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "9c35cf45_2429_48b9_94f1edf36e444c8a" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("==========================================================================================\nThis method used for preparing plate 1, with just media and bacteria in all the wells, for growth to stationary phase.\n\nIt uses 16 1000 uL tips\n=========================================================================================="));
// }} ""
// {{{ 2 1 0 "a2db3744_86f1_4de2_8e15edca45a5c869" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
GetParams();
// }} ""
// {{{ 3 1 0 "65492f06_28ca_4957_8a7421bef78e3006" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{ 4 1 0 "b273380e_95c7_4ac3_a0417dd24ec001a8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 5 1 0 "40c31b3e_fa51_4f8c_a8cba5da3b18e7cb" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
old_GP_lid_park_arr.SetSize(0);
// }} ""
// {{ 6 1 0 "ff1cb795_e23f_47d9_ae4270c4bef06e40" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
old_GP_lid_park_arr.AddAsLast(ML_STAR.Lid_parking_Old_Growth_Plate);
// }} ""
// {{ 7 1 0 "5cce4f56_9329_4ed0_84eaa9deaa1f46ac" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
old_GP_lid_park_arr.AddAsLast(ML_STAR.Lid_parking_Old_Growth_Plate_2);
// }} ""
// {{ 8 1 0 "b273380e_95c7_4ac3_a0417dd24ec001a8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 9 1 0 "43ac2d7b_1277_468a_b3ed8e5c3562321b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 10 1 0 "62d98c75_292c_42cb_9a3ce63aba77ed9e" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
bacteria_stocks_arr.SetSize(0);
// }} ""
// {{ 11 1 0 "7406a19e_8483_40ba_becc338faca4c14d" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_clonal_test == "true")
{
// }} ""
// {{ 12 1 0 "a7d6f8cf_c43e_4521_bc73c618e6227665" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
bacteria_stocks_arr.AddAsLast(ML_STAR.bacteria_stocks_1);
// }} ""
// {{ 13 1 0 "7f2a522b_e347_4411_8b1d3143f086237a" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
bacteria_stocks_arr.AddAsLast(ML_STAR.bacteria_stocks_2);
// }} ""
// {{ 14 1 0 "5861b584_7ca8_48e4_87fc88ba011bfa2d" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
bacteria_stocks_arr.AddAsLast(ML_STAR.bacteria_stocks_3);
// }} ""
// {{ 15 1 0 "7406a19e_8483_40ba_becc338faca4c14d" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{ 16 1 0 "3b53b4c8_d7d5_4b7d_9792e224319b64fe" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
bacteria_stocks_arr.AddAsLast(ML_STAR.library_stock_1);
// }} ""
// {{ 17 1 0 "b7d5d54f_74f8_471c_89acf53b347abddb" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
bacteria_stocks_arr.AddAsLast(ML_STAR.library_stock_2);
// }} ""
// {{ 18 1 0 "dfc119b6_915f_4fa9_91e377bed76b96e0" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
bacteria_stocks_arr.AddAsLast(ML_STAR.library_stock_3);
// }} ""
// {{ 19 1 0 "7406a19e_8483_40ba_becc338faca4c14d" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 20 1 0 "d8a592b8_ecea_4a65_a68758f2fa62be26" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
bacteria_dispense_arr.SetSize(0);
// }} ""
// {{ 21 1 0 "b2ac061b_c6cd_44b9_a03f48ddbb2c4fbc" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
bacteria_dispense_arr.AddAsLast(ML_STAR.bacteria_dispense_1);
// }} ""
// {{ 22 1 0 "1e6e4576_8f85_4d79_9c7715422d710532" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
bacteria_dispense_arr.AddAsLast(ML_STAR.bacteria_dispense_2);
// }} ""
// {{ 23 1 0 "4376f6f1_e9a2_492d_bed9864a75477072" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
bacteria_dispense_arr.AddAsLast(ML_STAR.bacteria_dispense_3);
// }} ""
// {{ 24 1 0 "43ac2d7b_1277_468a_b3ed8e5c3562321b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 25 1 0 "1e3f5f6d_7860_477c_aea32b640937b25f" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 26 1 0 "f1d7976d_0e3e_4dfc_83bc007c9a979e8f" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveGrowthPlateWithLid(ML_STAR.Move_Growth_Plate_Handoff, ML_STAR.Growth_Plate_Handoff_lid, ML_STAR.Move_Growth_Plate, ML_STAR.Growth_Plate_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 27 1 0 "c21ca61a_f72e_4f80_9a87f63e630961ed" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Growth_Plate_lid, ML_STAR.Lid_parking_Growth_Plate, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 0, ML_STAR);
// }} ""
// {{{ 28 1 0 "9b14e2e7_bfeb_48a5_af15b47f57035a94" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Media_source_lid, ML_STAR.Lid_parking_Media_trough, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 29 1 0 "1e3f5f6d_7860_477c_aea32b640937b25f" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 30 1 0 "6cb5501c_995e_4ad3_8362d561739d3ed0" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 31 1 0 "042fea7b_b011_4531_9a0da7dab056cfff" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("==============================================================\nPipette media into growth plate.\n=============================================================="));
// }} ""
// {{ 32 1 0 "f06b3858_90f9_4998_9685dc34482822dd" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_pipetting == "true")
{
// }} ""
// {{ 33 1 0 "b6f3f8a3_60f6_41fe_91e3b12aded2aaaa" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = culture_volume * 0.9;
// }} ""
// {{ 34 1 0 "d55add0c_e3d9_4b60_802137d5d4c85081" "{E09A7A75-BB29-4e45-B265-7C8388E27D2C}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", 0);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("TipCountingEnabled", hslFalse);
PTL::SetTipHandlingState("TipCountingIdentifier", "");
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipPickupCustomStepID", 0);
PTL::SetTipHandlingState("TipPickupChannelVariable", "");
PTL::SetTipHandlingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetTipHandlingState("TipPickupSequenceReducible", hslTrue);
if( 0 == PTL::TipPickup(ML_STAR, ML_STAR.Tips_1000_Channels) )
{
    PTL::RaiseRuntimeError(-1472986880, PTL::IDS::smartStepTipPickup, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{{ 35 1 0 "4969ccbf_74c5_4e5f_b07cc759359254a1" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
pipette_media(ML_STAR.Media_dispense_all, pipette_volume, 1);
// }} ""
// {{ 36 1 0 "49c17201_1433_4cf4_9bb2980d23b33458" "{2C884145-FBC2-46a3-9A50-7B1731970262}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", hslInfinite);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectChannelVariable", "");
if( 0 == PTL::TipEject(ML_STAR) )
{
    PTL::RaiseRuntimeError(-1456209664, PTL::IDS::smartStepTipEject, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 37 1 0 "f06b3858_90f9_4998_9685dc34482822dd" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{ 38 1 0 "87756201_d755_45f9_8c00b76841999c60" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_debugging == "true")
{
// }} ""
// {{ 39 1 0 "3f359281_fff6_4278_a3fc9b760bbfcafd" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandle0D63CE637F0C4dbe98CDA072B7B6814D.SetOutput(Translate("media into growth plate"), "\n");
dialogHandle0D63CE637F0C4dbe98CDA072B7B6814D.ShowOutput(Translate("Pipetting"), hslOKOnly | hslInformation | hslDefButton1, hslInfinite);
// }} ""
// {{ 40 1 0 "87756201_d755_45f9_8c00b76841999c60" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 41 1 0 "f06b3858_90f9_4998_9685dc34482822dd" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 42 1 0 "6cb5501c_995e_4ad3_8362d561739d3ed0" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 43 1 0 "e8e5c69c_3406_4152_87ef92d802a3f585" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 44 1 0 "9f63f2b3_d641_49c3_a1f4c27c76341683" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Lid_parking_Media_trough, ML_STAR.Media_source_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 1, ML_STAR);
// }} ""
// {{ 45 1 0 "e8e5c69c_3406_4152_87ef92d802a3f585" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 46 1 0 "32938ea6_c20d_4df0_8c60437524c702c6" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 47 1 0 "bd52fcb3_fc2a_4366_8075223a54a4d878" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("==============================================================\nPipette cells into growth plate.\n=============================================================="));
// }} ""
// {{ 48 1 0 "4e05be89_54b4_42eb_a0379d895ddffb1d" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_pipetting == "true")
{
// }} ""
// {{ 49 1 0 "a76b9763_f17e_491d_aeda6d6ffbf5ab2c" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = culture_volume * 0.1;
// }} ""
// {{ 50 1 0 "a35fc8f1_a1b8_40d5_ac4b86f25fa6100c" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(loopCounter1 = 0; loopCounter1 < 3;)
{
loopCounter1 = loopCounter1 + 1;
// }} ""
// {{ 51 1 0 "8b499c29_d7df_4439_9d1e3c8e6f6e8817" "ML_STAR:{541143FA-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FA_7FA2_11D3_AD85_0004ACB1DCB2("8b499c29_d7df_4439_9d1e3c8e6f6e8817"); // TipPickUp
}
// }} ""
// {{ 52 1 0 "f1134973_853a_42a9_963d632b0000add4" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_D9B7B9AEE0FF48899F2653E37F38783A[];
sequence arrseqDispense_D9B7B9AEE0FF48899F2653E37F38783A[];
Util2::SeqArrCheckIndex(bacteria_stocks_arr, loopCounter1, "bacteria_stocks_arr");
Util2::SeqArrCheckIndex(bacteria_stocks_arr, loopCounter1, "bacteria_stocks_arr");
Util2::SeqArrCheckIndex(bacteria_dispense_arr, loopCounter1, "bacteria_dispense_arr");
Util2::SeqArrCheckIndex(bacteria_dispense_arr, loopCounter1, "bacteria_dispense_arr");
arrseqAspirate_D9B7B9AEE0FF48899F2653E37F38783A.SetSize(1);
arrseqAspirate_D9B7B9AEE0FF48899F2653E37F38783A.SetAt(0, bacteria_stocks_arr.ElementAt(loopCounter1-1));
arrseqDispense_D9B7B9AEE0FF48899F2653E37F38783A.SetSize(1);
arrseqDispense_D9B7B9AEE0FF48899F2653E37F38783A.SetAt(0, bacteria_dispense_arr.ElementAt(loopCounter1-1));
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslFalse);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslFalse);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 2);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 8);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 800);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_D9B7B9AEE0FF48899F2653E37F38783A, arrseqDispense_D9B7B9AEE0FF48899F2653E37F38783A, 1, 1, pipette_volume, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", bacteria_stocks_arr.ElementAt(loopCounter1-1), bacteria_dispense_arr.ElementAt(loopCounter1-1)) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 53 1 0 "1f0046fa_33bb_49c4_b3b6cb13d0155dcc" "ML_STAR:{541143FC-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FC_7FA2_11D3_AD85_0004ACB1DCB2("1f0046fa_33bb_49c4_b3b6cb13d0155dcc"); // TipEject
}
// }} ""
// {{ 54 1 0 "a35fc8f1_a1b8_40d5_ac4b86f25fa6100c" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{ 55 1 0 "4e05be89_54b4_42eb_a0379d895ddffb1d" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{ 56 1 0 "97cc84aa_eb40_49ab_9aca555e6626cd23" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (is_debugging == "true")
{
// }} ""
// {{ 57 1 0 "5730ceb8_74f7_4d08_a9f27a392c1866d3" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandle1BFBEF7929BC4880A89DE43B831AB5E3.SetOutput(Translate("cells into growth plate"), "\n");
dialogHandle1BFBEF7929BC4880A89DE43B831AB5E3.ShowOutput(Translate("Pipetting"), hslOKOnly | hslInformation | hslDefButton1, hslInfinite);
// }} ""
// {{ 58 1 0 "97cc84aa_eb40_49ab_9aca555e6626cd23" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 59 1 0 "4e05be89_54b4_42eb_a0379d895ddffb1d" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 60 1 0 "32938ea6_c20d_4df0_8c60437524c702c6" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 61 1 0 "c2ad5188_f710_438e_bac566e587f28d91" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 62 1 0 "237300d5_f32c_434a_b2c9c0dedba032fa" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Lid_parking_Growth_Plate, ML_STAR.Growth_Plate_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
// {{{ 63 1 0 "5cd3a348_2cc1_48cb_a4a78762f8e6eace" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveGrowthPlateWithLid(ML_STAR.Move_Growth_Plate, ML_STAR.Growth_Plate_lid, ML_STAR.Move_Growth_Plate_Handoff, ML_STAR.Growth_Plate_Handoff_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 0, ML_STAR);
// }} ""
// {{{ 64 1 0 "f76353ea_718f_42b7_a133a2c410a28127" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Growth_Plate_Handoff_lid, old_GP_lid_park_arr.ElementAt( lineage -1), ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 65 1 0 "c2ad5188_f710_438e_bac566e587f28d91" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 66 1 0 "73927669_4892_43d0_b78e4d7585d1a8cc" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("-----------------------------------------------------------------------------------------------------------"));
// }} ""
// {{{ 67 1 0 "7e1eb7b1_c099_4a28_864ac3e87a2c5123" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CalculateOutputs();
// }} ""
// {{{ 68 1 0 "2baee7a6_c11a_4d48_bbde669b3c03f78d" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
SaveWorklistAndMetadata();
// }} ""
// {{{ 69 1 0 "0d6e5c5e_f5d8_4d67_85f0d3dcafb7bb67" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
TIP_HANDLING_WITH_96_HEAD::_ExitLibrary();
LMSF_UTILITIES::_ExitLibrary();
PLATEANDLIDMOVEMENT::_ExitLibrary();
GSF_IMS_SHARED_SUBMETHODS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2024-11-10 15:02$$checksum=54814737$$length=085$$