 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "Common\\Tip Handling\\With 96-Head\\Tip Handling with 96-Head.hs_" } 
 namespace _Method { #include "HSLExtensions\\Array.hsl" } 
 namespace _Method { #include "HSLExtensions\\Directory.hsl" } 
 namespace _Method { #include "HSLExtensions\\File.hsl" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
#include "Fitness Selection 2.With DNA Extraction.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable tip_counter_array[];
sequence tip_seq_arr[];
variable loopCounter1;
variable array_length;
global device ML_STAR ("Fitness Selection 2.With DNA Extraction.lay", "ML_STAR", hslTrue);
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
TIP_HANDLING_WITH_96_HEAD::_InitLibrary();
COMMON96HEADSUBMETHODS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "aea8a289_b4bc_4069_aa1436eefc670769" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
TIP_HANDLING_WITH_96_HEAD::GetTipCounters(tip_counter_array, 1);
// }} ""
// {{ 2 1 0 "80d110e4_1b4e_4e40_9af5e419a7a3d5bf" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 3 1 0 "24636375_3ab3_43bb_9711fca1ab043495" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
tip_counter_array.SetAt(3-1, "Tip_counter_wide_bore");
// }} ""
// {{ 4 1 0 "3eb1ad2a_71ba_42f7_98d525897954c27a" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
tip_counter_array.SetAt(4-1, "Tips_for_row_offset_pickup");
// }} ""
// {{ 5 1 0 "a814b615_c800_4627_ab1917c2deff561b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 6 1 0 "bf77f701_0b13_49f0_a4fb7c55a66d203c" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
tip_seq_arr.SetSize(0);
// }} ""
// {{ 7 1 0 "15fc5029_aca1_42fc_b152e6d35daad149" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
tip_seq_arr.AddAsLast(ML_STAR.Tips_1000_Channels);
// }} ""
// {{ 8 1 0 "147b8d29_0b4e_452d_a0532e8ba1a14fce" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
tip_seq_arr.AddAsLast(ML_STAR.Tips_300_Channels);
// }} ""
// {{ 9 1 0 "a4efdfc8_0143_4df6_8d9d71c5e97adbef" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
tip_seq_arr.AddAsLast(ML_STAR.TipSupport_1000_WideBore);
// }} ""
// {{ 10 1 0 "d9921453_173c_4442_9b4341717a306051" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
tip_seq_arr.AddAsLast(ML_STAR.Tips_1000_Offset_pickup);
// }} ""
// {{ 11 1 0 "a814b615_c800_4627_ab1917c2deff561b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 12 1 0 "96b37d01_cf09_4725_bb210724df0c8cfc" "{72EACF88-8D49-43e3-92C8-2F90E81E3260}"
array_length=tip_counter_array.GetSize();
// }} ""
// {{ 13 1 0 "0842e39e_9d0f_47e5_86ba6f2fd5488f7b" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(loopCounter1 = 0; loopCounter1 < array_length;)
{
loopCounter1 = loopCounter1 + 1;
// }} ""
// {{{ 14 1 0 "cc4d0da5_d846_4dd9_bc4b0861951d226b" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TipCount::Edit2(tip_seq_arr.ElementAt( loopCounter1 -1), tip_counter_array.ElementAt( loopCounter1 -1), ML_STAR, 100);
// }} ""
// {{{ 15 1 0 "9881953f_2368_4e3f_893944f673103028" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TipCount::Write2(tip_seq_arr.ElementAt( loopCounter1 -1), tip_counter_array.ElementAt( loopCounter1 -1), ML_STAR);
// }} ""
// {{ 16 1 0 "0842e39e_9d0f_47e5_86ba6f2fd5488f7b" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{{ 17 1 0 "2050aa5e_de17_409d_ae67adc79b1e9f15" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
TIP_HANDLING_WITH_96_HEAD::_ExitLibrary();
COMMON96HEADSUBMETHODS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2022-11-07 09:28$$checksum=a2f3bd71$$length=085$$