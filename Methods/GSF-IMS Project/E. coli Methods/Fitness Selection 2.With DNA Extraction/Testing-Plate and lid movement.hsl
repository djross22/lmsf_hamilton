global device ML_STAR ("Fitness Selection 2.With DNA Extraction.lay", "ML_STAR", hslTrue);
 namespace _Method { #include "Common\\PlateAndLidMovement.hs_" } 
 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
 namespace _Method { #include "Common\\iSWAP-PlateAndLidMovement.hs_" } 
 namespace _Method { #include "HSLML_STARLib.hsl" } 
 namespace _Method { #include "Common\\MPE_Library.hs_" } 
#include "Fitness Selection 2.With DNA Extraction.res"
 namespace _Method { #include "HSLMPELib.hsl" } 
 namespace _Method { #include "Common\\LMSF_Utilities.hs_" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable _blnSimulationMode;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
PLATEANDLIDMOVEMENT::_InitLibrary();
COMMON96HEADSUBMETHODS::_InitLibrary();
ISWAP_PLATEANDLIDMOVEMENT::_InitLibrary();
MPE_LIBRARY::_InitLibrary();
LMSF_UTILITIES::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "8092ba67_68d4_4a9d_b8673320bd9a5099" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
_blnSimulationMode = HSLML_STAR::IsSimulatorMode(ML_STAR);
// }} ""
// {{ 2 1 0 "a04ec27e_71b6_4c1a_b022b0f2247bda25" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("a04ec27e_71b6_4c1a_b022b0f2247bda25"); // Initialize
}
// }} ""
// {{{ 3 1 0 "ac58f3b7_7045_4567_b6cfd5709f67e943" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
init_MPE();
// }} ""
// {{{ 4 1 0 "22d761dd_f9ee_435e_b360d34eebd4ea78" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Step_04_RPPlusFPtoMPE();
// }} ""
// {{{ 5 1 0 "9fedcdc7_7c0d_4e5b_86a2bc62fb6187a4" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Step_05_BPtoMPE();
// }} ""
// {{{ 6 1 0 "b0769a83_13f5_4fca_9d2cc53bbbb78967" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Step_08_BPtoEP();
// }} ""
// {{ 7 1 0 "a011e8e0_a24e_4b54_8f3850560117d604" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 8 1 0 "afcf5306_a8dc_4c94_816407ea218c8945" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
COMMON96HEADSUBMETHODS::Clear96HeadAndArm(ML_STAR, ML_STAR.clear_96_head_seq);
// }} ""
// {{{ 9 1 0 "d48e4a49_0a5d_46fc_9bccb6746f49fc78" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
MPE_LIBRARY::Disconnect(0);
// }} ""
// {{ 2 "AutoExitBlock" ""
PLATEANDLIDMOVEMENT::_ExitLibrary();
COMMON96HEADSUBMETHODS::_ExitLibrary();
ISWAP_PLATEANDLIDMOVEMENT::_ExitLibrary();
MPE_LIBRARY::_ExitLibrary();
LMSF_UTILITIES::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2022-11-07 09:15$$checksum=99b4fb94$$length=085$$