 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
#include "Fill one growth plate with media.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
global device ML_STAR ("Fill one growth plate with media.lay", "ML_STAR", hslTrue);
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "a4bf9e6e_69e5_465b_82bb72a23b531230" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("a4bf9e6e_69e5_465b_82bb72a23b531230"); // Initialize
}
// }} ""
// {{ 2 1 0 "1a8f5478_efea_4183_b07a055e856a871e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 3 1 0 "89051cf5_bdcf_43b7_ac8582424b1e2d76" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("89051cf5_bdcf_43b7_ac8582424b1e2d76"); // EasyCOREGripTransport
}
// }} ""
// {{ 4 1 0 "1a8f5478_efea_4183_b07a055e856a871e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 5 1 0 "69e6ac89_0857_4f03_b074e1fee4287b11" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 6 1 0 "4f9e30a4_e418_4467_bac0bd92b25040a4" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_E9D8D3B911634cb8A60D2C374FFC6E69[];
sequence arrseqDispense_E9D8D3B911634cb8A60D2C374FFC6E69[];
arrseqAspirate_E9D8D3B911634cb8A60D2C374FFC6E69.SetSize(1);
arrseqAspirate_E9D8D3B911634cb8A60D2C374FFC6E69.SetAt(0, ML_STAR.Media_source);
arrseqDispense_E9D8D3B911634cb8A60D2C374FFC6E69.SetSize(1);
arrseqDispense_E9D8D3B911634cb8A60D2C374FFC6E69.SetAt(0, ML_STAR.Fourtitude_Growth_Plate_0003);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_E9D8D3B911634cb8A60D2C374FFC6E69, arrseqDispense_E9D8D3B911634cb8A60D2C374FFC6E69, 1, 1, 450, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Media_source, ML_STAR.Fourtitude_Growth_Plate_0003) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 7 1 0 "69e6ac89_0857_4f03_b074e1fee4287b11" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 8 1 0 "9583dbe6_b7f7_4765_924283c8e73d1738" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 9 1 0 "6d9f68b6_f61c_45c8_b1667bdb653a9b15" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("6d9f68b6_f61c_45c8_b1667bdb653a9b15"); // EasyCOREGripTransport
}
// }} ""
// {{ 10 1 0 "9583dbe6_b7f7_4765_924283c8e73d1738" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 11 1 0 "a015be89_76a7_48fb_99d8b8846b1e6772" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
COMMON96HEADSUBMETHODS::Clear96HeadAndArm(ML_STAR);
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2018-12-08 11:51$$checksum=9598e189$$length=085$$