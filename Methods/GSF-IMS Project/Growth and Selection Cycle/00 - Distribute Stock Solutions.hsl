global device ML_STAR ("Growth and Selection Cycle.lay", "ML_STAR", hslTrue);
 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "Common\\Tip Handling\\With 96-Head\\Tip Handling with 96-Head.hs_" } 
#include "Growth and Selection Cycle.res"
 namespace _Method { #include "HSLFilLib.hsl" } 
 namespace _Method { #include "Common\\LMSF_Utilities.hs_" } 
 namespace _Method { #include "HSLExtensions\\File.hsl" } 
 namespace _Method { #include "HSLTimLib.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "..\\..\\HSLTrcLib.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable tip_counter_50_channels;
variable tip_counter_1000_channels;
variable tip_counter_300_channels;
variable parameters_file_path;
variable total_cycles;
variable cycle_number;
variable data_dir_path;
variable stock_plate_end_pos;
variable inducer_conc;
variable neg_select_id;
variable neg_select_conc;
variable pos_select_units;
variable neg_select_units;
variable inducer_id;
variable inducer_units;
variable pos_select_conc;
variable pos_select_id;
variable year_string;
variable month_string;
variable day_string;
variable media_id;
variable strain_1_id;
variable plasmid_1_id;
variable meta_file_path;
variable experiment_id;
variable start_time_str;
variable worklist_file_path;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
TIP_HANDLING_WITH_96_HEAD::_InitLibrary();
LMSF_UTILITIES::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "8f4db3b1_78d3_4ee1_8dfd171da6ad1746" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 2 1 0 "58c983ef_6cea_411c_ac8508513f5c568b" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ReadParameters();
// }} ""
// {{{ 3 1 0 "4f2027e8_943e_42a3_8fbf1b319465b7d6" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{ 4 1 0 "395dfcdd_90dd_48c5_89884e7f25dcd386" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 5 1 0 "31dacb07_9e4c_4e1e_911b875009a5a4a8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 6 1 0 "ae15ec81_6d58_410c_be95466a3b2b91a9" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 7 1 0 "98c98beb_ba12_48b2_83347a5c06982368" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 8 1 0 "953e3a7b_6b31_4a91_a0a0aaba8c4f112b" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
stock_plate_end_pos = total_cycles * 8;
// }} ""
// {{ 9 1 0 "3b9ab8e4_7843_4562_ad64a642a9815365" "{B31F353C-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.Inducer_stock_plate.SetCount(stock_plate_end_pos);
// }} ""
// {{ 10 1 0 "93d579c8_5664_42a0_bcf3a2b8b1c559c3" "{B31F353C-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.Pos_select_stock_plate.SetCount(stock_plate_end_pos);
// }} ""
// {{ 11 1 0 "c7e711e5_1149_429e_a8ebe4982c76101c" "{B31F353C-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.Neg_select_stock_plate.SetCount(stock_plate_end_pos);
// }} ""
// {{ 12 1 0 "ae15ec81_6d58_410c_be95466a3b2b91a9" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 13 1 0 "3bea0554_7352_4709_a01e50d8b3496552" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 14 1 0 "bccab25c_cfb8_442f_8e2201f96a605f55" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("bccab25c_cfb8_442f_8e2201f96a605f55"); // EasyCOREGripTransport
}
// }} ""
// {{ 15 1 0 "1a76a3f7_3727_4495_99df7d233cd6190e" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_43DA57762F214f05A01F0CB9266C135E[];
sequence arrseqDispense_43DA57762F214f05A01F0CB9266C135E[];
arrseqAspirate_43DA57762F214f05A01F0CB9266C135E.SetSize(1);
arrseqAspirate_43DA57762F214f05A01F0CB9266C135E.SetAt(0, ML_STAR.Inducer_stock_0);
arrseqDispense_43DA57762F214f05A01F0CB9266C135E.SetSize(1);
arrseqDispense_43DA57762F214f05A01F0CB9266C135E.SetAt(0, ML_STAR.Inducer_stock_plate);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_43DA57762F214f05A01F0CB9266C135E, arrseqDispense_43DA57762F214f05A01F0CB9266C135E, 1, 1, 650, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Inducer_stock_0, ML_STAR.Inducer_stock_plate) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 16 1 0 "49d684a8_dd81_42b1_89e36def57437bba" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("49d684a8_dd81_42b1_89e36def57437bba"); // EasyCOREGripTransport
}
// }} ""
// {{ 17 1 0 "3bea0554_7352_4709_a01e50d8b3496552" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 18 1 0 "1cca0e94_d6fc_44b4_86b8a4b6a6a1fb7f" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 19 1 0 "db1380bf_7475_4f07_b8c811ae0e3c6052" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("db1380bf_7475_4f07_b8c811ae0e3c6052"); // EasyCOREGripTransport
}
// }} ""
// {{ 20 1 0 "868c5f87_807c_4b28_9c620204706cf7dd" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_90EA85C53DEF437aB96E9A275B14562D[];
sequence arrseqDispense_90EA85C53DEF437aB96E9A275B14562D[];
arrseqAspirate_90EA85C53DEF437aB96E9A275B14562D.SetSize(1);
arrseqAspirate_90EA85C53DEF437aB96E9A275B14562D.SetAt(0, ML_STAR.Pos_select_stock_0);
arrseqDispense_90EA85C53DEF437aB96E9A275B14562D.SetSize(1);
arrseqDispense_90EA85C53DEF437aB96E9A275B14562D.SetAt(0, ML_STAR.Pos_select_stock_plate);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_90EA85C53DEF437aB96E9A275B14562D, arrseqDispense_90EA85C53DEF437aB96E9A275B14562D, 1, 1, 650, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Pos_select_stock_0, ML_STAR.Pos_select_stock_plate) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 21 1 0 "f4117376_2ee6_45c4_9862bdeb3796e6f9" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("f4117376_2ee6_45c4_9862bdeb3796e6f9"); // EasyCOREGripTransport
}
// }} ""
// {{ 22 1 0 "1cca0e94_d6fc_44b4_86b8a4b6a6a1fb7f" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 23 1 0 "f72f24e0_e5ed_4607_88c44049156ee4f9" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 24 1 0 "9b15a0bc_2fc9_4bf1_a5115391a927f2e2" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("9b15a0bc_2fc9_4bf1_a5115391a927f2e2"); // EasyCOREGripTransport
}
// }} ""
// {{ 25 1 0 "792f124d_fbf8_4e7f_8807205eadfa09c6" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_3EC1B6ACD4F24ecd8A5E3F4AC01A40A9[];
sequence arrseqDispense_3EC1B6ACD4F24ecd8A5E3F4AC01A40A9[];
arrseqAspirate_3EC1B6ACD4F24ecd8A5E3F4AC01A40A9.SetSize(1);
arrseqAspirate_3EC1B6ACD4F24ecd8A5E3F4AC01A40A9.SetAt(0, ML_STAR.Neg_select_stock_0);
arrseqDispense_3EC1B6ACD4F24ecd8A5E3F4AC01A40A9.SetSize(1);
arrseqDispense_3EC1B6ACD4F24ecd8A5E3F4AC01A40A9.SetAt(0, ML_STAR.Neg_select_stock_plate);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_3EC1B6ACD4F24ecd8A5E3F4AC01A40A9, arrseqDispense_3EC1B6ACD4F24ecd8A5E3F4AC01A40A9, 1, 1, 650, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Neg_select_stock_0, ML_STAR.Neg_select_stock_plate) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 26 1 0 "43c84c72_1731_4ef2_8baf602b417bea9e" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("43c84c72_1731_4ef2_8baf602b417bea9e"); // EasyCOREGripTransport
}
// }} ""
// {{ 27 1 0 "f72f24e0_e5ed_4607_88c44049156ee4f9" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 28 1 0 "31dacb07_9e4c_4e1e_911b875009a5a4a8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 29 1 0 "ed5031fb_9120_47fe_9ddc3bade2ef91da" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 30 1 0 "48ae2ce4_a12f_4d2d_9029a5784f599498" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{{ 31 1 0 "c63f9baf_2a35_402d_83818856886103cd" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
WriteParameters();
// }} ""
// {{{ 32 1 0 "68242c12_1364_4488_b3e3ab17a9d3745c" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
SaveWorklistAndMetadata();
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
TIP_HANDLING_WITH_96_HEAD::_ExitLibrary();
LMSF_UTILITIES::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2019-01-10 14:51$$checksum=83a42ddd$$length=085$$