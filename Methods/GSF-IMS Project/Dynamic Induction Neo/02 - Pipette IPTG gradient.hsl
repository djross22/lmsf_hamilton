 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
#include "Dynamic Induction Neo.res"
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
global device ML_STAR ("Dynamic Induction Neo.lay", "ML_STAR", hslTrue);
variable isPipetting;
variable tip_counter_1000_channels;
variable tip_counter_300_channels;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "8a0a64cf_f1f2_4b25_b3b9d39927e63a2c" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{ 2 1 0 "8841ca20_1b70_4c3a_b6a3d5274f1f3c49" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 3 1 0 "5dce23c3_2ef0_4828_8ab0326c5fa35dcc" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
isPipetting = 0;
// }} ""
// {{ 4 1 0 "8841ca20_1b70_4c3a_b6a3d5274f1f3c49" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 5 1 0 "3fd0650d_18b6_438c_97634665e570908f" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 6 1 0 "218e30be_5522_4ba0_bddf0c88ed69e63b" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("218e30be_5522_4ba0_bddf0c88ed69e63b"); // EasyCOREGripTransport
}
// }} ""
// {{ 7 1 0 "3fd0650d_18b6_438c_97634665e570908f" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 8 1 0 "63c24248_578c_4ccf_8e3141636a1f0eab" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 9 1 0 "f48089d6_895d_4f00_9607ca137dc5a894" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("f48089d6_895d_4f00_9607ca137dc5a894"); // EasyCOREGripTransport
}
// }} ""
// {{ 10 1 0 "63c24248_578c_4ccf_8e3141636a1f0eab" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 11 1 0 "4ff1f664_0182_4895_b08d4ab16d5b70d4" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (isPipetting != 0)
{
// }} ""
// {{ 12 1 0 "3da1c238_5a1e_4e86_a1f54c98030cb6df" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 13 1 0 "cf9ec19e_50e0_407c_bbca0ff51a97b926" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_3E4DD67D78834b13987D4FEE738EEA98[];
sequence arrseqDispense_3E4DD67D78834b13987D4FEE738EEA98[];
arrseqAspirate_3E4DD67D78834b13987D4FEE738EEA98.SetSize(1);
arrseqAspirate_3E4DD67D78834b13987D4FEE738EEA98.SetAt(0, ML_STAR.Media_source);
arrseqDispense_3E4DD67D78834b13987D4FEE738EEA98.SetSize(1);
arrseqDispense_3E4DD67D78834b13987D4FEE738EEA98.SetAt(0, ML_STAR.IPTG_2x);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_3E4DD67D78834b13987D4FEE738EEA98, arrseqDispense_3E4DD67D78834b13987D4FEE738EEA98, 1, 1, 700, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Media_source, ML_STAR.IPTG_2x) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 14 1 0 "3da1c238_5a1e_4e86_a1f54c98030cb6df" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 15 1 0 "a489f637_cee6_48c2_bcd8efb1ad41cf88" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 16 1 0 "74a5ee7e_9cc2_441b_84a0f8b00bdccf6e" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_EC57E37DF7F9444f8C284A26FF4CCCC2[];
sequence arrseqDispense_EC57E37DF7F9444f8C284A26FF4CCCC2[];
arrseqAspirate_EC57E37DF7F9444f8C284A26FF4CCCC2.SetSize(1);
arrseqAspirate_EC57E37DF7F9444f8C284A26FF4CCCC2.SetAt(0, ML_STAR.Media_source);
arrseqDispense_EC57E37DF7F9444f8C284A26FF4CCCC2.SetSize(1);
arrseqDispense_EC57E37DF7F9444f8C284A26FF4CCCC2.SetAt(0, ML_STAR.Media_dispense);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_EC57E37DF7F9444f8C284A26FF4CCCC2, arrseqDispense_EC57E37DF7F9444f8C284A26FF4CCCC2, 1, 1, 450, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Media_source, ML_STAR.Media_dispense) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 17 1 0 "a489f637_cee6_48c2_bcd8efb1ad41cf88" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 18 1 0 "44de2d38_5857_44c3_8725b83e9c1242e5" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 19 1 0 "c900bbae_ea82_49a2_ad3ff2541b382c59" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_594A6B65F31A4b02AC6FCDAC5FDB5812[];
sequence arrseqDispense_594A6B65F31A4b02AC6FCDAC5FDB5812[];
arrseqAspirate_594A6B65F31A4b02AC6FCDAC5FDB5812.SetSize(1);
arrseqAspirate_594A6B65F31A4b02AC6FCDAC5FDB5812.SetAt(0, ML_STAR.IPTG_stock);
arrseqDispense_594A6B65F31A4b02AC6FCDAC5FDB5812.SetSize(1);
arrseqDispense_594A6B65F31A4b02AC6FCDAC5FDB5812.SetAt(0, ML_STAR.IPTG_2x);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar300ulStandardVolumeTipWithFilter, arrseqAspirate_594A6B65F31A4b02AC6FCDAC5FDB5812, arrseqDispense_594A6B65F31A4b02AC6FCDAC5FDB5812, 1, 1, 200, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.IPTG_stock, ML_STAR.IPTG_2x) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 20 1 0 "44de2d38_5857_44c3_8725b83e9c1242e5" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 21 1 0 "7470f6c6_c1b4_401f_81c3b416047da30a" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 22 1 0 "093302fb_eef5_4c92_a9f0ac34865874fe" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_E8297CA84CBC46be9CABDC9D47A3D85E[];
sequence arrseqDispense_E8297CA84CBC46be9CABDC9D47A3D85E[];
arrseqAspirate_E8297CA84CBC46be9CABDC9D47A3D85E.SetSize(1);
arrseqAspirate_E8297CA84CBC46be9CABDC9D47A3D85E.SetAt(0, ML_STAR.IPTG_dilution_from);
arrseqDispense_E8297CA84CBC46be9CABDC9D47A3D85E.SetSize(1);
arrseqDispense_E8297CA84CBC46be9CABDC9D47A3D85E.SetAt(0, ML_STAR.IPTG_dilution_to);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 3);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 3);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 800);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_E8297CA84CBC46be9CABDC9D47A3D85E, arrseqDispense_E8297CA84CBC46be9CABDC9D47A3D85E, 1, 1, 450, 0, 1, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.IPTG_dilution_from, ML_STAR.IPTG_dilution_to) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 23 1 0 "7470f6c6_c1b4_401f_81c3b416047da30a" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 24 1 0 "4ff1f664_0182_4895_b08d4ab16d5b70d4" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 25 1 0 "14d2f2b9_2e1b_4b5b_a6443e3b673f7796" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 26 1 0 "16410680_5678_4cc3_b720fca3dd566ca9" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("16410680_5678_4cc3_b720fca3dd566ca9"); // EasyCOREGripTransport
}
// }} ""
// {{ 27 1 0 "14d2f2b9_2e1b_4b5b_a6443e3b673f7796" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 28 1 0 "1d85a5de_ade7_491a_85e6aea3a2422cdb" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 29 1 0 "54db0364_a4ce_4404_8440b17cfd1f3db9" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("54db0364_a4ce_4404_8440b17cfd1f3db9"); // EasyCOREGripTransport
}
// }} ""
// {{ 30 1 0 "1d85a5de_ade7_491a_85e6aea3a2422cdb" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 31 1 0 "024919f8_8469_4b96_85efdc0d46b0cefa" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2019-01-10 11:36$$checksum=7c92a6e8$$length=087$$