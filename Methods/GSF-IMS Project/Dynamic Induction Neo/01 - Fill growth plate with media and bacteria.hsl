 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
#include "Dynamic Induction Neo.res"
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable mix_volume;
variable volume_left;
variable loopCounter1;
global device ML_STAR ("Dynamic Induction Neo.lay", "ML_STAR", hslTrue);
variable isPipetting;
variable tip_counter_1000_channels;
variable tip_counter_300_channels;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "4fde363f_c94a_4e50_b0d76b2f4e786ade" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{ 2 1 0 "b97b3583_aeba_455b_84b8480e2a87845d" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 3 1 0 "fd92f921_0fea_4b97_8841684d5d38bdc5" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
isPipetting = 0;
// }} ""
// {{ 4 1 0 "b97b3583_aeba_455b_84b8480e2a87845d" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 5 1 0 "ae31cfd3_8ab7_4a84_af325fd054ef5a95" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (isPipetting != 0)
{
// }} ""
// {{ 6 1 0 "e36f7859_eb4c_4d90_b910166344917ff9" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 7 1 0 "97bb05c9_37e6_4d85_bf57a89efc423720" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_536B775A8A5C4f01B4FA3E09A84832C5[];
sequence arrseqDispense_536B775A8A5C4f01B4FA3E09A84832C5[];
arrseqAspirate_536B775A8A5C4f01B4FA3E09A84832C5.SetSize(1);
arrseqAspirate_536B775A8A5C4f01B4FA3E09A84832C5.SetAt(0, ML_STAR.Media_source);
arrseqDispense_536B775A8A5C4f01B4FA3E09A84832C5.SetSize(1);
arrseqDispense_536B775A8A5C4f01B4FA3E09A84832C5.SetAt(0, ML_STAR.Starting_Growth_Plate);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_536B775A8A5C4f01B4FA3E09A84832C5, arrseqDispense_536B775A8A5C4f01B4FA3E09A84832C5, 1, 1, 450, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Media_source, ML_STAR.Starting_Growth_Plate) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 8 1 0 "e36f7859_eb4c_4d90_b910166344917ff9" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 9 1 0 "ae31cfd3_8ab7_4a84_af325fd054ef5a95" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 10 1 0 "b0d62212_4b37_4d99_bc23c36c36a57d8e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 11 1 0 "6d8f3060_70e9_411e_ad010c6134e7caec" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("6d8f3060_70e9_411e_ad010c6134e7caec"); // EasyCOREGripTransport
}
// }} ""
// {{ 12 1 0 "b0d62212_4b37_4d99_bc23c36c36a57d8e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 13 1 0 "c16a7ed1_a87c_4ba6_9785f96230ec7a76" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (isPipetting != 0)
{
// }} ""
// {{ 14 1 0 "d2b04cd5_1291_408b_aa68fca053541948" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 15 1 0 "3e5055eb_60f3_4482_9df9e46217e10212" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_6ACD8EE2B66941ccBB37651FBE6B4F9E[];
sequence arrseqDispense_6ACD8EE2B66941ccBB37651FBE6B4F9E[];
arrseqAspirate_6ACD8EE2B66941ccBB37651FBE6B4F9E.SetSize(1);
arrseqAspirate_6ACD8EE2B66941ccBB37651FBE6B4F9E.SetAt(0, ML_STAR.Bacteria_stock_1);
arrseqDispense_6ACD8EE2B66941ccBB37651FBE6B4F9E.SetSize(1);
arrseqDispense_6ACD8EE2B66941ccBB37651FBE6B4F9E.SetAt(0, ML_STAR.Bacteria_all_100x);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 3);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 3.5);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 300);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("DispensePrerinsingMixCycles", 2);
PTL::SetPipettingState("DispensePrerinsingMixPosition", 2);
PTL::SetPipettingState("DispensePrerinsingMixVolume", 800);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_6ACD8EE2B66941ccBB37651FBE6B4F9E, arrseqDispense_6ACD8EE2B66941ccBB37651FBE6B4F9E, 1, 1, 80, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Bacteria_stock_1, ML_STAR.Bacteria_all_100x) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 16 1 0 "f27af013_2099_4fb2_97a7ffba86435097" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_72EE2C7A8BC845a4A225BD984A8E6BA0[];
sequence arrseqDispense_72EE2C7A8BC845a4A225BD984A8E6BA0[];
arrseqAspirate_72EE2C7A8BC845a4A225BD984A8E6BA0.SetSize(1);
arrseqAspirate_72EE2C7A8BC845a4A225BD984A8E6BA0.SetAt(0, ML_STAR.Bacteria_all_100x);
arrseqDispense_72EE2C7A8BC845a4A225BD984A8E6BA0.SetSize(1);
arrseqDispense_72EE2C7A8BC845a4A225BD984A8E6BA0.SetAt(0, ML_STAR.Bacteria_all_10x);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 3);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 5);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 650);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("DispensePrerinsingMixCycles", 2);
PTL::SetPipettingState("DispensePrerinsingMixPosition", 3.5);
PTL::SetPipettingState("DispensePrerinsingMixVolume", 650);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_72EE2C7A8BC845a4A225BD984A8E6BA0, arrseqDispense_72EE2C7A8BC845a4A225BD984A8E6BA0, 1, 1, 80, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Bacteria_all_100x, ML_STAR.Bacteria_all_10x) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 17 1 0 "d2b04cd5_1291_408b_aa68fca053541948" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 18 1 0 "166eccfb_8f36_402c_a2529747a123386d" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 19 1 0 "4585aab5_2a09_4880_b6344e6606e421fd" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
volume_left = 800;
// }} ""
// {{ 20 1 0 "4149c108_8929_49c2_a94cb9a11438f0aa" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
loopCounter1 = 0;
while (
   (ML_STAR.Bacteria_dilution_to.GetCurrentPosition() > 0)
)
{
AlignSequences(hslTrue, ML_STAR.Bacteria_all_10x, 1, ML_STAR.Bacteria_dilution_to, 1);
loopCounter1 = loopCounter1 + 1;
// }} ""
// {{ 21 1 0 "45bdcf78_c38f_498c_b69c2f7a6caaf748" "{B31F353A-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.Bacteria_all_10x.SetCurrentPosition(1);
// }} ""
// {{ 22 1 0 "e039df8c_acf9_41d9_99a71b1122538a2b" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
mix_volume = volume_left - 100;
// }} ""
// {{ 23 1 0 "e2f19e77_4843_4ce9_a05589af6724a4e3" "ML_STAR:{E91EFCB6-A447-4dfc-828E-7EBF29139CD2}"
{
	ML_STAR._E91EFCB6_A447_4dfc_828E_7EBF29139CD2("e2f19e77_4843_4ce9_a05589af6724a4e3"); // EasyAspirate
}
// }} ""
// {{ 24 1 0 "37ac1ea6_f124_4c5c_8d5424c5c4e8218c" "ML_STAR:{01571348-0D66-4d27-9E97-65F9EE27C956}"
{
	ML_STAR._01571348_0D66_4d27_9E97_65F9EE27C956("37ac1ea6_f124_4c5c_8d5424c5c4e8218c"); // EasyDispense
}
// }} ""
// {{ 25 1 0 "65df5dd8_be32_4073_94af53d032540835" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
volume_left = volume_left - 50;
// }} ""
// {{ 26 1 0 "4149c108_8929_49c2_a94cb9a11438f0aa" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
if (
   (ML_STAR.Bacteria_dilution_to.GetCurrentPosition() > 0 && ML_STAR.Bacteria_dilution_to.GetMax() == 0 )
)
{ MECC::EndlessSequenceLoopWarning(GetFileName()); }

}
ML_STAR.Bacteria_all_10x.SetMax(ML_STAR.Bacteria_all_10x.GetTotal());
ML_STAR.Bacteria_dilution_to.SetMax(ML_STAR.Bacteria_dilution_to.GetTotal());
ML_STAR.Bacteria_all_10x.SetCurrentPosition(1);
ML_STAR.Bacteria_dilution_to.SetCurrentPosition(1);
}
// }} ""
// {{ 27 1 0 "9bf0d5bd_acfe_44ae_8f38344d9ca00317" "ML_STAR:{541143FC-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FC_7FA2_11D3_AD85_0004ACB1DCB2("9bf0d5bd_acfe_44ae_8f38344d9ca00317"); // TipEject
}
// }} ""
// {{ 28 1 0 "166eccfb_8f36_402c_a2529747a123386d" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 29 1 0 "c16a7ed1_a87c_4ba6_9785f96230ec7a76" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 30 1 0 "82c14803_50e6_49a8_a73ca3eea7a46608" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 31 1 0 "7076acf3_885b_48d4_98864ee67ec4d0a6" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("7076acf3_885b_48d4_98864ee67ec4d0a6"); // EasyCOREGripTransport
}
// }} ""
// {{ 32 1 0 "82c14803_50e6_49a8_a73ca3eea7a46608" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 33 1 0 "9b1f4108_2a71_4270_a251dcdb7a46b25e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 34 1 0 "63bd1285_8796_419c_867c8f3fd942dbea" "{B31F353A-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.Starting_Growth_Plate.SetCurrentPosition(1);
// }} ""
// {{ 35 1 0 "39133ad5_e4e3_46f7_845265436b7aa8e1" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("39133ad5_e4e3_46f7_845265436b7aa8e1"); // EasyCOREGripTransport
}
// }} ""
// {{ 36 1 0 "9b1f4108_2a71_4270_a251dcdb7a46b25e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 37 1 0 "71f5142a_5be9_4c24_b75dd33c8186eb9c" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2019-01-10 11:38$$checksum=fbf3c21b$$length=087$$