 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
#include "Dynamic Induction Neo.res"
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable mix_volume;
variable volume_left;
variable loopCounter1;
global device ML_STAR ("Dynamic Induction Neo.lay", "ML_STAR", hslTrue);
variable isPipetting;
variable tip_counter_1000_channels;
variable tip_counter_300_channels;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "6844ea48_869b_4a75_b1519f50dc001f45" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{ 2 1 0 "4f346eba_7415_4149_956ce9a4f0a7f0c3" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 3 1 0 "4799a6dd_452a_4d96_ba84c416ce0faed5" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
isPipetting = 0;
// }} ""
// {{ 4 1 0 "4f346eba_7415_4149_956ce9a4f0a7f0c3" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 5 1 0 "a29eba72_02a2_4d3f_90663d5afcdf01c5" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 6 1 0 "5db5c663_b380_4924_a2ffb5d218128861" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("5db5c663_b380_4924_a2ffb5d218128861"); // EasyCOREGripTransport
}
// }} ""
// {{ 7 1 0 "095f19a2_2aff_4cbe_9e756363d30446bf" "{B31F353A-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.Starting_Growth_Plate.SetCurrentPosition(1);
// }} ""
// {{ 8 1 0 "a29eba72_02a2_4d3f_90663d5afcdf01c5" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 9 1 0 "043347a3_1f9e_4f56_917e6883a5ab1eb8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 10 1 0 "6eb843e4_a749_4fc0_bcf5df0834a07952" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("6eb843e4_a749_4fc0_bcf5df0834a07952"); // EasyCOREGripTransport
}
// }} ""
// {{ 11 1 0 "043347a3_1f9e_4f56_917e6883a5ab1eb8" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 12 1 0 "63c24248_578c_4ccf_8e3141636a1f0eab" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 13 1 0 "915f31a3_7117_4612_80be5fc8e59bca56" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("915f31a3_7117_4612_80be5fc8e59bca56"); // EasyCOREGripTransport
}
// }} ""
// {{ 14 1 0 "63c24248_578c_4ccf_8e3141636a1f0eab" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 15 1 0 "053714aa_189e_4512_a639dc6009191190" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (isPipetting != 0)
{
// }} ""
// {{ 16 1 0 "9b21aaae_1b68_42b6_907dd9534ca1dd23" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 17 1 0 "39c0a36f_ae22_49ad_8c0811bf8d719641" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_AF28C79278694e2e87E723BB6A45DD79[];
sequence arrseqDispense_AF28C79278694e2e87E723BB6A45DD79[];
arrseqAspirate_AF28C79278694e2e87E723BB6A45DD79.SetSize(1);
arrseqAspirate_AF28C79278694e2e87E723BB6A45DD79.SetAt(0, ML_STAR.Media_source);
arrseqDispense_AF28C79278694e2e87E723BB6A45DD79.SetSize(1);
arrseqDispense_AF28C79278694e2e87E723BB6A45DD79.SetAt(0, ML_STAR.Bacteria_induction_10x);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_AF28C79278694e2e87E723BB6A45DD79, arrseqDispense_AF28C79278694e2e87E723BB6A45DD79, 1, 1, 720, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Media_source, ML_STAR.Bacteria_induction_10x) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 18 1 0 "9b21aaae_1b68_42b6_907dd9534ca1dd23" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 19 1 0 "7c7ed232_61a7_4551_b8c26f33018ea684" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 20 1 0 "2b7c1fa7_23f4_4ff9_a3fe2f5d8b1f690f" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_6655500A26464f5dA54DC7F5940D35A6[];
sequence arrseqDispense_6655500A26464f5dA54DC7F5940D35A6[];
arrseqAspirate_6655500A26464f5dA54DC7F5940D35A6.SetSize(1);
arrseqAspirate_6655500A26464f5dA54DC7F5940D35A6.SetAt(0, ML_STAR.Bacteria_induction_100x);
arrseqDispense_6655500A26464f5dA54DC7F5940D35A6.SetSize(1);
arrseqDispense_6655500A26464f5dA54DC7F5940D35A6.SetAt(0, ML_STAR.Bacteria_induction_10x);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 3);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 4);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 400);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("DispensePrerinsingMixCycles", 2);
PTL::SetPipettingState("DispensePrerinsingMixPosition", 3.5);
PTL::SetPipettingState("DispensePrerinsingMixVolume", 400);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_6655500A26464f5dA54DC7F5940D35A6, arrseqDispense_6655500A26464f5dA54DC7F5940D35A6, 1, 1, 80, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Bacteria_induction_100x, ML_STAR.Bacteria_induction_10x) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 21 1 0 "7c7ed232_61a7_4551_b8c26f33018ea684" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 22 1 0 "dd94a216_149b_4905_8f590f3b79ef336b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 23 1 0 "47f02d8f_a032_498c_aa442f228160bf1b" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
volume_left = 800;
// }} ""
// {{ 24 1 0 "e4606d0a_704f_4552_adcd89a71334ce75" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
loopCounter1 = 0;
while (
   (ML_STAR.Bacteria_induction_1x.GetCurrentPosition() > 0)
)
{
AlignSequences(hslTrue, ML_STAR.Bacteria_induction_10x, 1, ML_STAR.Bacteria_induction_1x, 1);
loopCounter1 = loopCounter1 + 1;
// }} ""
// {{ 25 1 0 "994538e7_f211_43b5_8350c48bfadf5bd0" "{B31F353A-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.Bacteria_induction_10x.SetCurrentPosition(1);
// }} ""
// {{ 26 1 0 "483fb83d_9a78_4581_828f72a2607b0f5d" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
mix_volume = volume_left - 100;
// }} ""
// {{ 27 1 0 "80ae351d_7091_4bea_b1b7c2be6b6c2c7f" "ML_STAR:{E91EFCB6-A447-4dfc-828E-7EBF29139CD2}"
{
	ML_STAR._E91EFCB6_A447_4dfc_828E_7EBF29139CD2("80ae351d_7091_4bea_b1b7c2be6b6c2c7f"); // EasyAspirate
}
// }} ""
// {{ 28 1 0 "fbaedee7_3fda_4450_bda777f5e57b22fd" "ML_STAR:{01571348-0D66-4d27-9E97-65F9EE27C956}"
{
	ML_STAR._01571348_0D66_4d27_9E97_65F9EE27C956("fbaedee7_3fda_4450_bda777f5e57b22fd"); // EasyDispense
}
// }} ""
// {{ 29 1 0 "8002f324_e96e_402f_8e7ab538e65aba1a" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
volume_left = volume_left - 50;
// }} ""
// {{ 30 1 0 "e4606d0a_704f_4552_adcd89a71334ce75" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
if (
   (ML_STAR.Bacteria_induction_1x.GetCurrentPosition() > 0 && ML_STAR.Bacteria_induction_1x.GetMax() == 0 )
)
{ MECC::EndlessSequenceLoopWarning(GetFileName()); }

}
ML_STAR.Bacteria_induction_10x.SetMax(ML_STAR.Bacteria_induction_10x.GetTotal());
ML_STAR.Bacteria_induction_1x.SetMax(ML_STAR.Bacteria_induction_1x.GetTotal());
ML_STAR.Bacteria_induction_10x.SetCurrentPosition(1);
ML_STAR.Bacteria_induction_1x.SetCurrentPosition(1);
}
// }} ""
// {{ 31 1 0 "f9430ecf_b229_4351_a2ef07aa5c932fca" "ML_STAR:{541143FC-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FC_7FA2_11D3_AD85_0004ACB1DCB2("f9430ecf_b229_4351_a2ef07aa5c932fca"); // TipEject
}
// }} ""
// {{ 32 1 0 "dd94a216_149b_4905_8f590f3b79ef336b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 33 1 0 "0a85326f_f1c7_41e8_99b88061a61a8ade" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 34 1 0 "cab5a858_b696_4b0a_8f47288f91d16406" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_97422E9FD30D43afBDD20D45EC9B2526[];
sequence arrseqDispense_97422E9FD30D43afBDD20D45EC9B2526[];
arrseqAspirate_97422E9FD30D43afBDD20D45EC9B2526.SetSize(1);
arrseqAspirate_97422E9FD30D43afBDD20D45EC9B2526.SetAt(0, ML_STAR.Media_source);
arrseqDispense_97422E9FD30D43afBDD20D45EC9B2526.SetSize(1);
arrseqDispense_97422E9FD30D43afBDD20D45EC9B2526.SetAt(0, ML_STAR.No_bacteria);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter, arrseqAspirate_97422E9FD30D43afBDD20D45EC9B2526, arrseqDispense_97422E9FD30D43afBDD20D45EC9B2526, 1, 1, 50, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Media_source, ML_STAR.No_bacteria) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 35 1 0 "0a85326f_f1c7_41e8_99b88061a61a8ade" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 36 1 0 "053714aa_189e_4512_a639dc6009191190" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{ 37 1 0 "14d2f2b9_2e1b_4b5b_a6443e3b673f7796" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 38 1 0 "af83aa8f_14a7_40c7_bc1675142b4a0b55" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("af83aa8f_14a7_40c7_bc1675142b4a0b55"); // EasyCOREGripTransport
}
// }} ""
// {{ 39 1 0 "14d2f2b9_2e1b_4b5b_a6443e3b673f7796" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 40 1 0 "1d85a5de_ade7_491a_85e6aea3a2422cdb" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 41 1 0 "6086382f_e0e9_4157_9400a798527451c2" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("6086382f_e0e9_4157_9400a798527451c2"); // EasyCOREGripTransport
}
// }} ""
// {{ 42 1 0 "1d85a5de_ade7_491a_85e6aea3a2422cdb" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{ 43 1 0 "bf6ee339_609e_40b0_b80c3977bf223e60" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 44 1 0 "09f39c0c_36a2_474a_99c339def2286b7a" "{B31F353A-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.Fourtitude_Growth_Plate_HandOff.SetCurrentPosition(1);
// }} ""
// {{ 45 1 0 "ae9e8618_6715_4209_9aef919f7519fe45" "{B31F353A-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.Gradient_plate_transport.SetCurrentPosition(1);
// }} ""
// {{ 46 1 0 "7eeca0f6_7385_4b2b_815cc89d38ac8ce9" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("7eeca0f6_7385_4b2b_815cc89d38ac8ce9"); // EasyCOREGripTransport
}
// }} ""
// {{ 47 1 0 "bf6ee339_609e_40b0_b80c3977bf223e60" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 48 1 0 "006d6fd9_b314_4dca_98ca51f87738fb85" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2019-01-10 11:36$$checksum=91e4a675$$length=087$$