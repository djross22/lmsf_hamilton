#include "iGEM calibration plate.res"
global device ML_STAR ("iGEM calibration plate.lay", "ML_STAR", hslTrue);
global device HxFan ("iGEM calibration plate.lay", "HxFan", hslTrue);
 namespace _Method { #include "HSLML_STARLib.hsl" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "HslHamHeaterShakerLib.hsl" } 
 namespace _Method { #include "NIST\\Libraries\\NIST_Device_Controllers.hs_" } 
 namespace _Method { #include "Common\\iSWAP-PlateAndLidMovement.hs_" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable bln_Global_SimulatorMode;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
NIST_DEVICE_CONTROLLERS::_InitLibrary();
ISWAP_PLATEANDLIDMOVEMENT::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "244bdaaf_5a0f_40b7_bfb7b35b6a1faa03" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{ 2 1 0 "af80615e_84d1_4e24_a14d35758e1d5376" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 3 1 0 "bbc0f5c2_3c77_4918_889266521cac353d" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.calibration_plate_lid, ML_STAR.Lid_parking_calibration_plate_lid, 1, 1, ML_STAR);
// }} ""
// {{ 4 1 0 "af80615e_84d1_4e24_a14d35758e1d5376" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 5 1 0 "cb42a655_137f_4b7e_95393ee1934a15f4" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 6 1 0 "75a31530_6adb_4409_a5f327fcbd7fdb08" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("***************************************************************************\nAdd PBS and water to plate\n***************************************************************************"));
// }} ""
// {{ 7 1 0 "f359f03a_32f1_4ffe_9cf38a72798a656a" "ML_STAR:{541143FA-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FA_7FA2_11D3_AD85_0004ACB1DCB2("f359f03a_32f1_4ffe_9cf38a72798a656a"); // TipPickUp
}
// }} ""
// {{ 8 1 0 "3b5de41c_d788_40a4_9789b679016bfca9" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_B1C4A020FF56473a87A0750AA0FE3BAB[];
sequence arrseqDispense_B1C4A020FF56473a87A0750AA0FE3BAB[];
arrseqAspirate_B1C4A020FF56473a87A0750AA0FE3BAB.SetSize(1);
arrseqAspirate_B1C4A020FF56473a87A0750AA0FE3BAB.SetAt(0, ML_STAR.PBS_and_water_in_tubes);
arrseqDispense_B1C4A020FF56473a87A0750AA0FE3BAB.SetSize(1);
arrseqDispense_B1C4A020FF56473a87A0750AA0FE3BAB.SetAt(0, ML_STAR.PBS_and_water_dilutions);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslFalse);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslFalse);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar300ulStandardVolumeTipWithFilter, arrseqAspirate_B1C4A020FF56473a87A0750AA0FE3BAB, arrseqDispense_B1C4A020FF56473a87A0750AA0FE3BAB, 1, 1, 100, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.PBS_and_water_in_tubes, ML_STAR.PBS_and_water_dilutions) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 9 1 0 "f21861ac_857f_4262_9c5dc2cb8171451f" "ML_STAR:{541143FC-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FC_7FA2_11D3_AD85_0004ACB1DCB2("f21861ac_857f_4262_9c5dc2cb8171451f"); // TipEject
}
// }} ""
// {{ 10 1 0 "cb42a655_137f_4b7e_95393ee1934a15f4" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 11 1 0 "9f8c5ea7_b52b_4582_8136a3cc5038ce4b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 12 1 0 "e98ac667_af10_4f02_a8c7a8b9fb7cd9dd" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("***************************************************************************\nAdd dyes and beads to starting wells for dilution series\n***************************************************************************"));
// }} ""
// {{ 13 1 0 "4945240b_8e43_40c8_b41d075dee5c74ac" "ML_STAR:{541143FA-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FA_7FA2_11D3_AD85_0004ACB1DCB2("4945240b_8e43_40c8_b41d075dee5c74ac"); // TipPickUp
}
// }} ""
// {{ 14 1 0 "c907eb07_bc58_4ba7_893c0d8e65c6c09d" "ML_STAR:{541143F5-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143F5_7FA2_11D3_AD85_0004ACB1DCB2("c907eb07_bc58_4ba7_893c0d8e65c6c09d"); // Aspirate
}
// }} ""
// {{ 15 1 0 "d40954a1_87bb_4c81_a7b3f1ff0193c236" "ML_STAR:{541143F8-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143F8_7FA2_11D3_AD85_0004ACB1DCB2("d40954a1_87bb_4c81_a7b3f1ff0193c236"); // Dispense
}
// }} ""
// {{ 16 1 0 "abba1ff6_67ea_402c_8d560cff4f746500" "ML_STAR:{541143FC-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FC_7FA2_11D3_AD85_0004ACB1DCB2("abba1ff6_67ea_402c_8d560cff4f746500"); // TipEject
}
// }} ""
// {{ 17 1 0 "9f8c5ea7_b52b_4582_8136a3cc5038ce4b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 18 1 0 "d5f670c3_a71e_4ca6_a81d7be94448db53" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 19 1 0 "971a6101_3daa_4a4b_9241657728f1de29" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("***************************************************************************\nPipette the dilution series\n***************************************************************************"));
// }} ""
// {{ 20 1 0 "a6b62973_6753_40e5_81fa0cb39633365e" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_51F9F691FE684e60949D0144275813E8[];
sequence arrseqDispense_51F9F691FE684e60949D0144275813E8[];
arrseqAspirate_51F9F691FE684e60949D0144275813E8.SetSize(1);
arrseqAspirate_51F9F691FE684e60949D0144275813E8.SetAt(0, ML_STAR.dilution_from);
arrseqDispense_51F9F691FE684e60949D0144275813E8.SetSize(1);
arrseqDispense_51F9F691FE684e60949D0144275813E8.SetAt(0, ML_STAR.dilution_to);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 3);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1.5);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 100);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.MlStar300ulStandardVolumeTipWithFilter, arrseqAspirate_51F9F691FE684e60949D0144275813E8, arrseqDispense_51F9F691FE684e60949D0144275813E8, 1, 1, 100, 0, 1, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.dilution_from, ML_STAR.dilution_to) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 21 1 0 "d5f670c3_a71e_4ca6_a81d7be94448db53" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 22 1 0 "a1e9a7a5_b3f6_4a59_9f26392405d337a3" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 23 1 0 "25a849cc_7354_4f06_80828ecfbac6c805" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.Lid_parking_calibration_plate_lid, ML_STAR.calibration_plate_lid, 1, 1, ML_STAR);
// }} ""
// {{ 24 1 0 "a1e9a7a5_b3f6_4a59_9f26392405d337a3" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 25 1 0 "ab953f55_c7a3_4350_ace13885dd1c90bb" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 26 1 0 "9f35e502_f46c_4071_a8582c8f272687d0" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
NIST_DEVICE_CONTROLLERS::_ExitLibrary();
ISWAP_PLATEANDLIDMOVEMENT::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2021-08-04 13:55$$checksum=1e026f45$$length=085$$