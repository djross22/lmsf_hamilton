#include "CellFree\\efr_MPE2_001.res"
global device ML_STAR ("MPE2 labware test 2018 07 18.lay", "ML_STAR", hslTrue);
 namespace _Method { #include "HSLML_STARLib.hsl" } 
 namespace _Method { #include "HSLMPELib.hsl" } 
 namespace _Method { #include "..\\HSLTrcLib.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable MPE2DevID;
variable SimMode;
variable MPE2COMPort;
variable MPE2Return;
dialog dialogHandleD114515E67A84ab5A2D3C73139358619;
variable UserControlPts;
variable PressureStr;
variable Pressure;
variable TimeStr;
variable Time;
variable MPE2Waste;
variable ControlPts;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "0eb8ee5e_de3b_4d9c_82fb47f2fa5f62d1" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("0eb8ee5e_de3b_4d9c_82fb47f2fa5f62d1"); // Initialize
}
// }} ""
// {{ 2 1 0 "2cb75311_f10f_49ea_941f2653e58f6b70" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 3 1 0 "e4a44268_91d9_4979_bc338998c9414e54" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
MPE2COMPort = 7;
// }} ""
// {{{ 4 1 0 "c7dc2d51_380d_4ec3_b9bd4c223f428e5f" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TrcTrace(Translate("MPE2COMPort = "), MPE2COMPort);
// }} ""
// {{ 5 1 0 "66ad7bc3_587a_4646_84573c54e0ca521b" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 6 1 0 "824e832a_1142_4032_b3328fde73d2e785" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
MPE2Return = HSLMPELib::ConnectUsingCOM(MPE2COMPort, 921600, SimMode, MPE2DevID, MPE2DevID);
// }} ""
// {{ 7 1 0 "ac1ae369_4a97_4f80_b1ffcf14d697a55f" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 8 1 0 "df6fbcde_4571_4695_89291803ef305fcb" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
MPE2Return = HSLMPELib::Initialize(MPE2DevID);
// }} ""
// {{ 9 1 0 "569389d3_b2ae_4f89_8d2d331f9f6231f2" "{B31F3539-5D80-11d4-A5EB-0050DA737D89}"
dialogHandleD114515E67A84ab5A2D3C73139358619.SetInputSize(2);
dialogHandleD114515E67A84ab5A2D3C73139358619.SetInputField(0, Translate("Enter pressure (psi): "), hslInteger, 0, 0, 100);
dialogHandleD114515E67A84ab5A2D3C73139358619.SetInputField(1, Translate("Enter duration (s): "), hslInteger, 0, 0, 1000000);
dialogHandleD114515E67A84ab5A2D3C73139358619.ShowInput(Translate("Enter [MPE]2 parameters"), hslInfinite, hslOKOnly | hslDefButton1);
Pressure = dialogHandleD114515E67A84ab5A2D3C73139358619.GetInputField(0);
Time = dialogHandleD114515E67A84ab5A2D3C73139358619.GetInputField(1);
// }} ""
// {{ 10 1 0 "33d8a24a_956c_412d_bb5f03e4affc5593" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("Convert entered integer variables for Pressure and Time to strings"));
// }} ""
// {{{ 11 1 0 "98c71591_df9c_4b9d_9d779b3cd2f73f6a" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
PressureStr = StrIStr(Pressure);
// }} ""
// {{{ 12 1 0 "2ea17249_0ae7_41ae_85ac5ee652214f82" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TimeStr = StrIStr(Time);
// }} ""
// {{ 13 1 0 "33db6702_6cf0_4859_b8791c63a1e48013" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("Assign \"UserControlPts\" string for [MPE]2 processing step: type (pressure), value (PressureStr), duration (TimeStr)"));
// }} ""
// {{ 14 1 0 "e2246b22_9b8c_4aca_a840d5a390efc33e" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
UserControlPts = Translate("pressure,");
// }} ""
// {{ 15 1 0 "80a417af_3159_4c44_a27dd1115fb379e4" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
UserControlPts = UserControlPts + PressureStr;
// }} ""
// {{ 16 1 0 "e8fa977e_d562_47ac_9c651e2d5647dc61" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
UserControlPts = UserControlPts + Translate(",");
// }} ""
// {{ 17 1 0 "7eaa6709_0b04_4b85_893f0d641fcbcfb1" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
UserControlPts = UserControlPts + TimeStr;
// }} ""
// {{{ 18 1 0 "fe458ed5_8209_452b_85a33366a3859950" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLMPELib::ProcessFilterToWasteContainer(MPE2DevID, ControlPts, 1, MPE2Waste, 1);
// }} ""
// {{{ 19 1 0 "c687a11d_f1ad_407e_b08104ad73fa24c1" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLMPELib::FilterPlateRemoved(MPE2DevID);
// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2024-10-24 11:30$$checksum=8da39823$$length=087$$