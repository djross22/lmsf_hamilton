 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\Sequence.hsl" } 
 namespace _Method { #include "HSLExtensions\\Array.hsl" } 
#include "Tip Handoffs with 96-Head to supports.res"
 namespace _Method { #include "HSLErrLib.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "Tip Handling with 96-Head.hs_" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
global device ML_STAR ("Tip Handoffs with 96-Head to supports.lay", "ML_STAR", hslTrue);
variable tip_counter_50_channels;
variable tip_counter_1000_channels;
variable tip_counter_300_channels;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
TIP_HANDLING_WITH_96_HEAD::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "b6732af6_5e78_40e5_b39f3501e0c70e32" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 2 1 0 "6515588d_60f3_4887_8c8793bcb2c9e216" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{{ 3 1 0 "90973fb7_15e8_41d7_85f5fa23f4a655ef" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
TIP_HANDLING_WITH_96_HEAD::AddTipsToDoubleSupp(ML_STAR, ML_STAR.Tips_1000_Channels, ML_STAR.TipSupport_1000_1, ML_STAR.TipSupport_1000_2, ML_STAR.Tips_1000_Handoff);
// }} ""
// {{{ 4 1 0 "9dc6505f_f695_49c9_92982dc5bca2e88d" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
TIP_HANDLING_WITH_96_HEAD::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2022-11-07 09:50$$checksum=8ad88be5$$length=085$$