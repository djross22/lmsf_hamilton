
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 26/06/2019 14:17:02

#pragma once
#ifndef HSL_RUNTIME
namespace PLATEANDLIDMOVEMENT {
function _InitLibrary() { }
function _ExitLibrary() { }
function MoveAbgenePlateFromThermoShake( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveAbgenePlateWithLid( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveAgarPlateFromThermoShake( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveAgarPlateWithLid( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveAgilent86mLSingleResWithLid( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveBindPlateNoLidNoTap( sequence move_from_seq, sequence move_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveCytometryPlateWithLid( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveEppendorfDWPNoLidNoTap( sequence move_from_seq, sequence move_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveEppendorfDWPWithLid( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveGrowthPlateFromThermoShake( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveGrowthPlateWithLid( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveGrowthPlateWithLidNoTap( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveLid( sequence lid_from_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveLidNoTap( sequence lid_from_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveN3BufferWithLid( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveNuncOmniTrayWithLid( sequence move_from_seq, sequence lid_from_seq, sequence move_to_seq, sequence lid_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveSupportPlateNoLid( sequence move_from_seq, sequence move_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function MoveSupportPlateNoLidNoTap( sequence move_from_seq, sequence move_to_seq, sequence & gripper_sequence, variable new_front_gripper, variable eject_gripper, device & STAR ) void { }
function SetFrontChannel( variable i_front ) void { }
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=Hamilton$$valid=0$$time=2019-06-26 14:17$$checksum=671f8303$$length=085$$