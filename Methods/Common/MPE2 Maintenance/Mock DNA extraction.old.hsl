 namespace _Method { #include "HSLMPELib.hsl" } 
 namespace _Method { #include "HSLML_STARLib.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\Dictionary.hsl" } 
 namespace _Method { #include "HSLExtensions\\String.hsl" } 
 namespace _Method { #include "Common\\PlateAndLidMovement.hs_" } 
 namespace _Method { #include "HSLInhecoTEC\\HSLInhecoTECLib.hsl" } 
 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "Common\\Tip Handling\\With 96-Head\\Tip Handling with 96-Head.hs_" } 
 namespace _Method { #include "DPXSmartHelper\\TipLength\\DPXPreCuttedTipsLib.hs_" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
#include "Mock DNA extraction.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable MPE2COMPort;
variable EPlateH;
variable MPE2DevID;
variable MPE2Waste;
variable _blnSimulationMode;
variable sequence_number;
variable culture_volume;
variable is_pipetting;
variable is_debugging;
variable use_iSWAP;
variable blnMPEReturn;
variable ControlPts;
variable FPonRPFilterHeight;
variable FPonRPNozzleHeight;
variable BPNozzleOffset;
variable BPFilterHeight;
variable BPNozzleHeight;
variable BPLenghtofNozzles;
variable askFor_ShakeParams;
variable blnMPEVacuumCheck;
global device ML_STAR ("Mock DNA extraction.lay", "ML_STAR", hslTrue);
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
PLATEANDLIDMOVEMENT::_InitLibrary();
COMMON96HEADSUBMETHODS::_InitLibrary();
TIP_HANDLING_WITH_96_HEAD::_InitLibrary();
DPXPRECUTTEDTIPSLIB::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "00a15a9a_c3ca_4f45_a3a634498fcbc5cd" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("*********************************************************************************************************************\nThis method is for DNA extraction using Agilent Filter and Nunc Binding Plates with E coli culture\n\nIt runs after the \"Combine old GP wells into Spin Plate.med\" method\nand after the Overlord \"Get DWP from STAR then Centrifuge DWP.ovp\"\n\nAt the start of this method, the labware needs to be in the following positions:\nSpin Plate with lid, Handoff Position\nOld Growth Plate with lid, Old_Growth_Plate_parking\n\n*********************************************************************************************************************"));
// }} ""
// {{{ 2 1 0 "398e889c_1135_415d_a2f1b84be88ca631" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
_blnSimulationMode = HSLML_STAR::IsSimulatorMode(ML_STAR);
// }} ""
// {{{ 3 1 0 "c998a65e_f10e_455f_aba125888f42a938" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TrcTrace("_blnSimulationMode: ", _blnSimulationMode);
// }} ""
// {{ 4 1 0 "969c1b55_e8fc_48ee_b4a33b14c9901345" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 5 1 0 "6968becc_94ff_4aea_bc075caf7a7efdcf" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
GetParams();
// }} ""
// {{{ 6 1 0 "08cf7181_e148_4b59_a84b54af6cebe07f" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
StartUp();
// }} ""
// {{ 7 1 0 "969c1b55_e8fc_48ee_b4a33b14c9901345" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 8 1 0 "957bdc35_b2b2_4ae8_b765817f17372e7b" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PipetteMove01();
// }} ""
// {{{ 9 1 0 "f09cf44f_ef84_422f_ab916df9ce61a09c" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PipetteMove01A();
// }} ""
// {{{ 10 1 0 "65a86d47_1ff3_48a3_9be91e78ec8c376c" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PipetteMove02();
// }} ""
// {{{ 11 1 0 "9cdebceb_2953_4796_a2d770346e791b93" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PipetteMove03();
// }} ""
// {{{ 12 1 0 "e22c1ec8_a85f_4d7e_82b11d6b5d925ae8" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PipetteMove04();
// }} ""
// {{{ 13 1 0 "6f3fb076_9125_45c1_9ea8389411a42392" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PipetteMove05();
// }} ""
// {{{ 14 1 0 "69393044_630e_4969_b86e53a227efd456" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PipetteMove06();
// }} ""
// {{{ 15 1 0 "2e77b52d_9ddb_49cf_ac2a7668b552c786" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PipetteMove07();
// }} ""
// {{{ 16 1 0 "599d77d5_e23b_4df2_a9c0028563c25f9e" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PipetteMove08();
// }} ""
// {{ 17 1 0 "59c8804b_0aea_4875_8e62ed97bc191054" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 18 1 0 "aa0ba2e8_9487_4ba4_95def9bc04d71ba8" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
CleanUp();
// }} ""
// {{ 2 "AutoExitBlock" ""
PLATEANDLIDMOVEMENT::_ExitLibrary();
COMMON96HEADSUBMETHODS::_ExitLibrary();
TIP_HANDLING_WITH_96_HEAD::_ExitLibrary();
DPXPRECUTTEDTIPSLIB::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2019-10-28 15:53$$checksum=cb3c8823$$length=085$$