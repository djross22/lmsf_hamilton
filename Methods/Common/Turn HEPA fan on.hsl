global device ML_STAR ("NIST NGS-STAR deck 0.lay", "ML_STAR", hslTrue);
#include "NIST NGS-STAR deck 0.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
global device HxFan ("NIST NGS-STAR deck 0.lay", "HxFan", hslTrue);
dialog dialogHandle1;
timer timer1;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "dbb31764_5102_4df5_8cec6556b98b0664" "HxFan:{419861B2-AD5B-4F2E-8025-46B0E593A024}"
{
	HxFan.SetComPort("dbb31764_5102_4df5_8cec6556b98b0664"); // SetComPort
}
// }} ""
// {{ 2 1 0 "fb965d85_1bee_4168_981efd550ddd7916" "HxFan:{C3B1A3F9-BD5A-4660-842E-35830B4E80CA}"
{
	HxFan.SetFanSpeed("fb965d85_1bee_4168_981efd550ddd7916"); // SetFanSpeed
}
// }} ""
// {{ 3 1 0 "aedcb50a_f42b_4fdc_a925811c752ad5cc" "{B31F353E-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.SetTimer(30) )
{
    MECC::RaiseRuntimeErrorEx(-1355939584, MECC::IDS::stepNameTimerStart, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{ 4 1 0 "8ee05d6b_5c4a_4651_8a5c38c6d1037d15" "{B31F353F-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.WaitTimer(hslTrue, hslTrue) )
{
    MECC::RaiseRuntimeErrorEx(-1339162368, MECC::IDS::stepNameTimerWait, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{ 5 1 0 "2130ad0a_7d5f_4cba_8a56fc7c5dce91ad" "HxFan:{C3B1A3F9-BD5A-4660-842E-35830B4E80CA}"
{
	HxFan.SetFanSpeed("2130ad0a_7d5f_4cba_8a56fc7c5dce91ad"); // SetFanSpeed
}
// }} ""
// {{ 6 1 0 "96a5b387_8a19_47ed_9220eace37dfe3fd" "HxFan:{166B9764-268C-487A-8D8C-EC3ED594717C}"
{
	HxFan.SetContinuousMode("96a5b387_8a19_47ed_9220eace37dfe3fd"); // SetContinuousMode
}
// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2019-07-23 17:24$$checksum=ad6df795$$length=087$$