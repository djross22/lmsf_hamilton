 namespace _Method { #include "HSLML_STARLib.hsl" } 
  namespace _Method { #include "ASWStandard\\TraceLevel\\TraceLevel.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "HSLDevLib.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "HSLFilLib.hsl" } 
 namespace _Method { #include "HSLMthLib.hsl" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLUtilLib2.hsl" } 
 namespace _Method { #include "LVK\\HSLLVKService.hsl" } 
 namespace _Method { #include "ASWStandardDialogs\\ASWStandardDialogs.hsl" } 
 namespace _Method { #include "Hamilton Mettler Toledo WXS\\Hamilton Mettler Toledo WXS.hsl" } 
 namespace _Method { #include "HSLMappingReport.hsl" } 
 namespace _Method { #include "HSLTimLib.hsl" } 
 namespace _Method { #include "HSLStatistics.hsl" } 
 namespace _Method { #include "HSL_LiquidClassLib.hsl" } 
 namespace _Method { #include "HslUtilLib.hsl" } 

#include "LVK\\Liquid Class Verification Deck_MLStar.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable aspVolume;
variable tipCounter;
variable channelPattern_AllChannels;
variable myTipType;
variable liquidType;
variable glSimulationCheck;
variable numActiveChannels;
variable xml_ADC;
variable xml_disp_preVolume;
variable xml_disp_pLLD;
variable xml_asp_postVolume;
variable xml_tipSize;
variable xml_temperature;
variable xml_liquidClass;
variable xml_humidity;
variable xml_disp_fixedHeight;
variable xml_asp_volume;
variable xml_liquidDensity;
variable xml_disp_mixVolume;
variable xml_disp_mixCycles;
variable xml_disp_postVolume;
variable xml_disp_volume;
variable xml_asp_cLLD;
variable xml_cycleCount;
variable xml_asp_preVolume;
variable xml_asp_fixedHeight;
variable xml_deviceIndex;
variable xml_dispenseCycles;
variable xml_asp_pLLD;
variable xml_asp_mixVolume;
variable xml_asp_mixCycles;
variable xml_reUseTips;
variable xml_disp_mixDepth;
variable xml_disp_cLLD;
variable xml_asp_mixDepth;
variable xml_device;
variable xml_preDispenseCycles;
variable xml_postDispenseCycles;
variable xml_keepTips;
variable xml_returnTips;
variable pipettingTool;
sequence _tips;
variable dispenseType_PartEmpty;
variable dispenseType_JetSurface;
variable xml_developValidation_cycleCount;
global variable testMode;
global variable tipsOn;
variable channelPattern;
variable startingTipsPosition_Run;
variable startingTipsPosition_Channel;
variable myTipID;
sequence _tips_50uLFilter;
sequence _tips_4mLFilter;
sequence _tips_HighVolumeFilter;
sequence _tipAdapter96_50uLFilter;
sequence _tips_5mL;
sequence _tips_StandardVolumeFilter;
sequence _tips_HighVolume;
sequence _tipAdapter96_50uL;
sequence _tips_LowVolumeFilter;
sequence _tips_50uL;
sequence _tipAdapter96_HighVolume;
sequence _tipAdapter96_StandardVolumeFilter;
sequence _tipAdapter96_HighVolumeFilter;
sequence _tipAdapter96_StandardVolume;
sequence _tips_StandardVolume;
sequence _tips_LowVolume;
sequence _tipAdapter96;
variable tipCounter_adapter96;
variable tipPicFilename;
variable unloadTipAdapterPicFilename;
variable loadTipAdapterPicFilename;
variable labIDOfEmptyTipRack96InCarrier;
variable safeMPHPicFilename;
global sequence tempTips;
variable loadPlatePicFilename;
variable loadVialPicFilename;
variable x;
variable y;
variable z;
variable a;
variable wastePicFilename;
variable tipAdapterPicFilename;
variable tipRacksPicFilename;
variable file_lastTipPickup96;
variable balance_COMPort;
variable developmentModeCycleCounter;
variable balanceContainer;
sequence _tips_WideBore1mL_12mm;
variable arrayDevMeasures[];
global variable tmpDevLiqClassExcel;
global variable tmpDevLiqClassExcel_ThisRunOnly;
variable vialTypeString;
variable comPortString;
global device ML_STAR ("LVK\\Liquid Class Verification Deck_MLStar.lay", "ML_STAR", hslTrue);
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
 namespace _Method { #include "HSLSTCCLib.hs_" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "12700c8b_eacc_48d4_a77fd4cfda31a836" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 2 1 0 "20e86a82_63d3_4b2a_9bf48efb7112c903" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
MthURandInit(0.03, 0.08);
// }} ""
// {{ 3 1 0 "9da26d14_d05b_4bf2_be982ba6f047a3af" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 4 1 0 "b3025208_96a6_4b4c_af9ac4ee38e46c72" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
LVK::Connect();
// }} ""
// {{ 5 1 0 "9da26d14_d05b_4bf2_be982ba6f047a3af" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 6 1 0 "6d86af58_e145_4690_aa00213ef924e2bd" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 7 1 0 "47faf0a9_f2d7_428a_be6bc0ccb439f32b" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
balance_COMPort = 12;
// }} ""
// {{{ 8 1 0 "4dca6a49_4422_4357_a280da37f612657c" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
comPortString = LVK::COMPort();
// }} ""
// {{{ 9 1 0 "dd386055_7221_44c6_9bab782d05629cb1" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
balance_COMPort = StrIVal(comPortString);
// }} ""
// {{ 10 1 0 "6d86af58_e145_4690_aa00213ef924e2bd" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 11 1 0 "ff222ba5_a5e3_431d_a74e1eaf7498df29" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 12 1 0 "471c2c73_bfae_47c3_8d43ff117ca91a92" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
balanceContainer = 1;
// }} ""
// {{{ 13 1 0 "90bc329f_eb28_4560_bd3c935a0fea3ac7" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
vialTypeString = LVK::VialType();
// }} ""
// {{{ 14 1 0 "36f62e2a_ae31_45b6_829aa51bc6d8211e" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
balanceContainer = StrIVal(vialTypeString);
// }} ""
// {{ 15 1 0 "ff222ba5_a5e3_431d_a74e1eaf7498df29" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 16 1 0 "6d43459c_736d_4c3b_a2aeffd03a2f37ff" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::Initialize();
// }} ""
// {{{ 17 1 0 "bbe64b22_c7e4_4d59_b11dfaa45d0562ee" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
RetrieveLVKParameters();
// }} ""
// {{{ 18 1 0 "72627385_c67f_4e40_862d9236833818d7" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Init_Instruments();
// }} ""
// {{{ 19 1 0 "e6877923_192e_4a8e_b2248b5f0c5139db" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Init_Balance(ML_STAR);
// }} ""
// {{{ 20 1 0 "df773451_fa18_4d78_9764ae621dba7b4c" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Definitions();
// }} ""
// {{ 21 1 0 "15d1512a_86df_4ab6_9a3a10ba10852371" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 22 1 0 "1e111dd5_8bdd_42ec_b54b78f75a3f5aa4" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (pipettingTool == 1)
{
// }} ""
// {{{ 23 1 0 "a3df1ed0_972a_4925_8c797a2287de3fe5" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::MessageDialogWithImage(Translate("Balance setup instructions"), AswStandardDialogs::IconType::Information, AswStandardDialogs::ButtonType::Ok, 0, 0, 0, Translate(" Please load the balance, vial and shield as instructed "), loadVialPicFilename, 800);
// }} ""
// {{{ 24 1 0 "4e4435eb_bf9c_4163_99b329b3e6ac46c2" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
EditTips_Channels();
// }} ""
// {{{ 25 1 0 "ddbd3ae7_7b7c_4ac9_bd9712c8db741e87" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Pipette_1mLChannels();
// }} ""
// {{ 26 1 0 "1e111dd5_8bdd_42ec_b54b78f75a3f5aa4" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 27 1 0 "ab559968_9e55_42c0_8b4d8902e0f2e33f" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (pipettingTool == 2)
{
// }} ""
// {{{ 28 1 0 "2a50558a_bf03_4123_a19b71392e9d5dfb" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::MessageDialogWithImage(Translate("Balance setup instructions"), AswStandardDialogs::IconType::Information, AswStandardDialogs::ButtonType::Ok, 0, 0, 0, Translate(" Please load the balance, plate WITH LIQUID ON H12 and shield as instructed "), loadPlatePicFilename, 800);
// }} ""
// {{{ 29 1 0 "b094b48a_a846_4f4e_8b450887a785dfcb" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
EditTips_Head(1);
// }} ""
// {{{ 30 1 0 "780d7e28_c8a1_4162_90f9c28ec099e1a8" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Pipette_96Head();
// }} ""
// {{ 31 1 0 "ab559968_9e55_42c0_8b4d8902e0f2e33f" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 32 1 0 "ba5a0ee2_d705_45bf_aa6fdc5ed09a7b90" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (pipettingTool == 7)
{
// }} ""
// {{{ 33 1 0 "d90f5e64_a311_4867_883733ff9f6c2ffe" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::MessageDialogWithImage(Translate("Balance setup instructions"), AswStandardDialogs::IconType::Information, AswStandardDialogs::ButtonType::Ok, 0, 0, 0, Translate(" Please load the balance, vial and shield as instructed "), loadVialPicFilename, 800);
// }} ""
// {{{ 34 1 0 "d5b5e0a8_5bc4_4e9b_b134e9f7b6a9cb94" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
EditTips_Channels();
// }} ""
// {{{ 35 1 0 "a2d7ba67_48fe_48d5_85a4a1438a58d8a6" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Pipette_1mLChannels();
// }} ""
// {{ 36 1 0 "ba5a0ee2_d705_45bf_aa6fdc5ed09a7b90" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{{ 37 1 0 "5789d8a4_5ae6_4dab_b2c04b41d6585b15" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
TerminateAll();
// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2022-02-14 12:55$$checksum=2a825452$$length=087$$