 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "HSLDevLib.hsl" } 
 namespace _Method { #include "HSLTrcLib.hsl" } 
 namespace _Method { #include "HSLTipCountingNimbusLib.hsl" } 
 namespace _Method { #include "HSLFilLib.hsl" } 
 namespace _Method { #include "HSLMthLib.hsl" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLUtilLib2.hsl" } 
 namespace _Method { #include "LVK\\HSLLVKService.hsl" } 
 namespace _Method { #include "ASWStandardDialogs\\ASWStandardDialogs.hsl" } 
 namespace _Method { #include "Hamilton Mettler Toledo WXS\\Hamilton Mettler Toledo WXS.hsl" } 
 namespace _Method { #include "HSLMappingReport.hsl" } 
 namespace _Method { #include "HSLTimLib.hsl" } 
 namespace _Method { #include "HSLStatistics.hsl" } 
 namespace _Method { #include "HSL_LiquidClassLib.hsl" } 
 namespace _Method { #include "HSLTipCountingNimbusLib.hsl" } 
 namespace _Method { #include "ASWStandard\\TraceLevel\\TraceLevel.hsl" } 
 namespace _Method { #include "HSLUtilLib.hsl" } 
 namespace _Method { #include "ASWStandard\\ASWGlobal\\ASWGlobal.hsl" } 
#include "LVK\\LiquidClassVerificationDeck_Nimbus8.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable aspVolume;
variable channelPattern_AllChannels;
variable myTipType;
variable liquidType;
variable numActiveChannels;
variable xml_ADC;
variable xml_disp_preVolume;
variable xml_disp_pLLD;
variable xml_asp_postVolume;
variable xml_tipSize;
variable xml_temperature;
variable xml_liquidClass;
variable xml_humidity;
variable xml_disp_fixedHeight;
variable xml_asp_volume;
variable xml_liquidDensity;
variable xml_disp_mixVolume;
variable xml_disp_mixCycles;
variable xml_disp_postVolume;
variable xml_disp_volume;
variable xml_asp_cLLD;
variable xml_cycleCount;
variable xml_asp_preVolume;
variable xml_asp_fixedHeight;
variable xml_deviceIndex;
variable xml_dispenseCycles;
variable xml_asp_pLLD;
variable xml_asp_mixVolume;
variable xml_asp_mixCycles;
variable xml_reUseTips;
variable xml_disp_mixDepth;
variable xml_disp_cLLD;
variable xml_asp_mixDepth;
variable xml_device;
variable xml_preDispenseCycles;
variable xml_postDispenseCycles;
variable xml_keepTips;
variable xml_returnTips;
variable pipettingTool;
variable dispenseType_PartEmpty;
variable dispenseType_JetSurface;
variable xml_developValidation_cycleCount;
global variable testMode;
global variable tipsOn;
variable channelPattern;
variable startingTipsPosition_Run;
variable startingTipsPosition_Channel;
variable myTipID;
sequence _tips_50uLFilter;
sequence _tips_HighVolumeFilter;
sequence _tips_5mL;
sequence _tips_StandardVolumeFilter;
sequence _tips_HighVolume;
sequence _tips_LowVolumeFilter;
sequence _tips_50uL;
sequence _tips_StandardVolume;
sequence _tips_LowVolume;
variable unloadTipAdapterPicFilename;
variable safeMPHPicFilename;
global sequence tempTips;
variable x;
variable y;
variable z;
variable a;
variable wastePicFilename;
variable developmentModeCycleCounter;
variable balanceContainer;
sequence _tips_HighVolumeFilter_Wide1_2mm;
sequence _tips_StandardVolume_Wide1_55mm;
sequence _tips_HighVolumeFilter_Wide3_2mm;
sequence _tips_HighVolume_Wide1_2mm;
sequence _tips_StandardVolumeFilter_Wide1_55mm;
sequence _tips_HighVolume_Wide3_2mm;
sequence _tips_StandardVolume_Wide0_71mm;
sequence _tips_StandardVolume_Slim;
sequence _tips_StandardVolumeFilter_Wide0_71mm;
sequence _tips_StandardVolumeFilter_Slim;
global variable tmpDevLiqClassExcel;
global variable tmpDevLiqClassExcel_ThisRunOnly;
global variable loadPlatePicFilename;
global variable loadVialPicFilename;
global variable loadTipAdapterPicFilename;
global variable tipPicFilename;
global variable tipRacksPicFilename;
global variable tipAdapterPicFilename;
global variable tipCounter;
global sequence _tips;
global variable glSimulationCheck;
global variable arrayDevMeasures[];
global variable balance_COMPort;
global device Nimbus8 ("LVK\\LiquidClassVerificationDeck_Nimbus8.lay", "Nimbus8", hslTrue);
variable str_BalanceContainer;
variable str_COMPort;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "3166d899_5451_4dff_a011cc9c3aa3d24a" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 2 1 0 "75813373_f2fa_4d00_b765b3658a3dd529" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
LVK::Connect();
// }} ""
// {{{ 3 1 0 "20e86a82_63d3_4b2a_9bf48efb7112c903" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
MthURandInit(0.03, 0.08);
// }} ""
// {{ 4 1 0 "8caebe8e_3cc2_4727_97679c9d41352d51" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
balance_COMPort = 3;
// }} ""
// {{{ 5 1 0 "7b5b2abb_b8f5_463d_b1c9c10f901d2bb7" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
str_COMPort = LVK::COMPort();
// }} ""
// {{{ 6 1 0 "81ebb776_dee8_4d1e_a3919fac1d586fbb" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
balance_COMPort = StrIVal(str_COMPort);
// }} ""
// {{ 7 1 0 "ff222ba5_a5e3_431d_a74e1eaf7498df29" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 8 1 0 "b8741cdb_5ea3_4f22_88db1426b0aa34c1" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
balanceContainer = 1;
// }} ""
// {{{ 9 1 0 "41620a48_cda0_4865_a70449727d057ccc" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
str_BalanceContainer = LVK::VialType();
// }} ""
// {{{ 10 1 0 "dc01652d_2185_4d6a_8ad9ad860b82babf" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
balanceContainer = StrIVal(str_BalanceContainer);
// }} ""
// {{ 11 1 0 "ff222ba5_a5e3_431d_a74e1eaf7498df29" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 12 1 0 "1352c723_536a_4f4b_b62d1bd695c1c0ef" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
GetSimulationModeNIMBUS4(Nimbus8, glSimulationCheck);
// }} ""
Trace("Simulation mode = ",glSimulationCheck);
// {{{ 14 1 0 "ad7a1bb1_3162_4919_af414f7f19c2ae12" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::Initialize();
// }} ""
// {{{ 15 1 0 "bbe64b22_c7e4_4d59_b11dfaa45d0562ee" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
RetrieveLVKParameters();
// }} ""
// {{{ 16 1 0 "72627385_c67f_4e40_862d9236833818d7" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Init_Instruments();
// }} ""
// {{{ 17 1 0 "163598a4_748a_4fc9_aebb7449ae94d5be" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Init_Balance();
// }} ""
// {{{ 18 1 0 "df773451_fa18_4d78_9764ae621dba7b4c" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Definitions();
// }} ""
// {{{ 19 1 0 "12869a81_c393_48ef_a95080fa881203df" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStandardDialogs::MessageDialogWithImage(Translate("Balance setup instructions"), AswStandardDialogs::IconType::Information, AswStandardDialogs::ButtonType::Ok, 0, 0, 0, Translate(" Please load the balance, vial and shield as instructed "), loadVialPicFilename, 800);
// }} ""
// {{{ 20 1 0 "d48f3e80_db72_450c_945261e6f76c4fc3" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
EditTips_Channels();
// }} ""
// {{{ 21 1 0 "fe6d0fa7_836a_4c69_913d3c71ded27753" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
Pipette_1mLChannels();
// }} ""
// {{{ 22 1 0 "5789d8a4_5ae6_4dab_b2c04b41d6585b15" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
TerminateAll();
// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Software$$valid=0$$time=2018-04-10 11:32$$checksum=c04783f1$$length=087$$