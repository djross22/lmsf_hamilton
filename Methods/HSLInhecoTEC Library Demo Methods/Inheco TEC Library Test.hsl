 namespace _Method { #include "HSLInhecoTEC\\HSLInhecoTECLib.hsl" } 
 namespace _Method { #include "ASWStandard\\TraceLevel\\TraceLevel.hsl" } 
 namespace _Method { #include "ASWStandard\\ASWGlobal\\ASWGlobal.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable ReturnValue;
variable SimulationMode(0);
variable DeviceID(1);
dialog dialogHandle1;
variable LastError;
variable ErrorDescription;
variable ErrorCode("");
dialog dialogHandle170D9C0C3CAA460a85B69DFCF91ED1FE;
variable ShakerRevolutions;
variable UserInputDecision;
dialog dialogHandle0AD9AC3A23B94eb09505CC86F81B32C1;
timer Timer;
variable ControllerID(0);
dialog dialogHandle2D7EF76C93C64e1aB0059E4973E282D2;
dialog dialogHandle0FB5C3CAE69B470eBED075CFE9B9C1BE;
variable HeaterTemperature;
dialog dialogHandle00A21299F01247c5B66AB0EE68FAB0B9;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLSchedCCLib.hs_" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "14109cd8_8740_43f6_ba431fd093d677b8" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 2 1 0 "0fd472db_17cd_4e81_875f968df2c6f95c" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
ControllerID = 0;
// }} ""
// {{ 3 1 0 "24d5a118_06cf_4538_be40ceba1f64a683" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 4 1 0 "61203393_dc17_4594_896e4eeeeaedc364" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TRACELEVEL::SetTraceLevel(TRACE_LEVEL_DEBUG);
// }} ""
// {{{ 5 1 0 "fd6905a7_6bc4_481f_9b9970691c805335" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::Initialize(ControllerID, SimulationMode, ErrorCode);
// }} ""
// {{ 6 1 0 "5e03d067_5d91_4ccf_bc493c8295da46d5" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 7 1 0 "619ba7ce_4ae8_44fb_b71e3f19b852503e" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (ReturnValue == ASWGLOBAL::BOOL::TRUE)
{
// }} ""
// {{ 8 1 0 "619ba7ce_4ae8_44fb_b71e3f19b852503e" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{{ 9 1 0 "62775295_8b70_41ef_9c74e3147c13dccb" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::GetLastError(LastError);
// }} ""
// {{{ 10 1 0 "ff9708c8_9d89_4a59_9bbc8b492b59abb5" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::GetDescriptionForErrorCode(ErrorCode, ErrorDescription);
// }} ""
// {{ 11 1 0 "ad420d65_c4cb_498c_b9c5390dc3922a91" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandle1.SetOutput(Translate("The error description:\n"), ErrorDescription, Translate("\nThe last error message:\n"), LastError);
dialogHandle1.ShowOutput(Translate("An error occured! More information below!"), hslOKOnly | hslError | hslDefButton1, hslInfinite);
// }} ""
// {{ 12 1 0 "2c53fe7f_2b0f_4610_842421332c9ba129" "{930D6C31-8EFB-11d4-A3BA-002035848439}"
abort;
// }} ""
// {{ 13 1 0 "619ba7ce_4ae8_44fb_b71e3f19b852503e" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 14 1 0 "5e03d067_5d91_4ccf_bc493c8295da46d5" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 15 1 0 "31c4b390_af36_4901_8e4b5543a3eb002f" "{B31F3539-5D80-11d4-A5EB-0050DA737D89}"
dialogHandle170D9C0C3CAA460a85B69DFCF91ED1FE.SetInputSize(3);
dialogHandle170D9C0C3CAA460a85B69DFCF91ED1FE.SetInputField(0, Translate("Shaker Revolutions [rpm]"), hslInteger, 100, 60, 2000);
dialogHandle170D9C0C3CAA460a85B69DFCF91ED1FE.SetInputField(1, Translate("Controller ID (DIP-switch)"), hslInteger, ControllerID, 0, 7);
dialogHandle170D9C0C3CAA460a85B69DFCF91ED1FE.SetInputField(2, Translate("Device ID / Slot number"), hslInteger, DeviceID, 1, 6);
UserInputDecision = dialogHandle170D9C0C3CAA460a85B69DFCF91ED1FE.ShowInput(Translate("Please specify a shaker in your setup and input the revolutions for the shaker. After you input the value, the specified shaker will start. If no shaker is present, pls. hit <<Cancel>>."), hslInfinite, hslOKCancel | hslDefButton1);
ShakerRevolutions = dialogHandle170D9C0C3CAA460a85B69DFCF91ED1FE.GetInputField(0);
ControllerID = dialogHandle170D9C0C3CAA460a85B69DFCF91ED1FE.GetInputField(1);
DeviceID = dialogHandle170D9C0C3CAA460a85B69DFCF91ED1FE.GetInputField(2);
// }} ""
// {{ 16 1 0 "35d9fc65_bf83_49e5_8686703a6840c56e" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 17 1 0 "a0c96e45_3449_419d_a7a2e6e03957eefb" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (UserInputDecision == 1)
{
// }} ""
// {{{ 18 1 0 "5413cbea_f643_488b_b38c01a9ef6039c8" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::StartShaker(ControllerID, DeviceID, ErrorCode);
// }} ""
// {{ 19 1 0 "b1c79323_18a3_44b7_848d72b90e58e64e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 20 1 0 "96431f47_2852_426b_b326ca27b55e0acf" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (ReturnValue == ASWGLOBAL::BOOL::TRUE)
{
// }} ""
// {{ 21 1 0 "96431f47_2852_426b_b326ca27b55e0acf" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{{ 22 1 0 "4c8711c2_6481_4482_861b219338fa640c" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::GetLastError(LastError);
// }} ""
// {{{ 23 1 0 "dfa2c2f0_a7c3_48a8_815707874f37a0cb" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::GetDescriptionForErrorCode(ErrorCode, ErrorDescription);
// }} ""
// {{ 24 1 0 "68e0db1d_b77d_474c_919af2c22fce692b" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandle0AD9AC3A23B94eb09505CC86F81B32C1.SetOutput(Translate("The error description:\n"), ErrorDescription, Translate("\nThe last error message:\n"), LastError);
dialogHandle0AD9AC3A23B94eb09505CC86F81B32C1.ShowOutput(Translate("An error occured! More information below!"), hslOKOnly | hslError | hslDefButton1, hslInfinite);
// }} ""
// {{ 25 1 0 "44778a36_2ee6_439e_af60fed1b1167b9f" "{930D6C31-8EFB-11d4-A3BA-002035848439}"
abort;
// }} ""
// {{ 26 1 0 "96431f47_2852_426b_b326ca27b55e0acf" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 27 1 0 "b1c79323_18a3_44b7_848d72b90e58e64e" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 28 1 0 "1b781773_f568_4799_828c77910b77ef4b" "{B31F353E-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == Timer.SetTimer(6) )
{
    MECC::RaiseRuntimeErrorEx(-1355939584, MECC::IDS::stepNameTimerStart, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{ 29 1 0 "19032765_6a25_4a34_abb011d305875b6f" "{B31F353F-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == Timer.WaitTimer(hslTrue, hslTrue) )
{
    MECC::RaiseRuntimeErrorEx(-1339162368, MECC::IDS::stepNameTimerWait, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{{ 30 1 0 "c4f8a0ea_6973_42e3_8a9e80f3d056c04e" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLInhecoTECLib::StopShaker(ControllerID, DeviceID, ErrorCode);
// }} ""
// {{ 31 1 0 "a0c96e45_3449_419d_a7a2e6e03957eefb" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 32 1 0 "1c743999_b2f8_4c93_97484d1ed52bb16c" "{B31F3539-5D80-11d4-A5EB-0050DA737D89}"
dialogHandle2D7EF76C93C64e1aB0059E4973E282D2.SetInputSize(3);
dialogHandle2D7EF76C93C64e1aB0059E4973E282D2.SetInputField(0, Translate("Shaker Revolutions 1/10°C"), hslInteger, 450, 0, 1350);
dialogHandle2D7EF76C93C64e1aB0059E4973E282D2.SetInputField(1, Translate("Controller ID (DIP-switch)"), hslInteger, ControllerID, 0, 7);
dialogHandle2D7EF76C93C64e1aB0059E4973E282D2.SetInputField(2, Translate("Device ID / Slot number"), hslInteger, DeviceID, 1, 6);
UserInputDecision = dialogHandle2D7EF76C93C64e1aB0059E4973E282D2.ShowInput(Translate("Please specify a shaker in your setup and input the revolutions for the shaker. After you input the value, the specified shaker will start. If no shaker is present, pls. hit <<Cancel>>."), hslInfinite, hslOKCancel | hslDefButton1);
HeaterTemperature = dialogHandle2D7EF76C93C64e1aB0059E4973E282D2.GetInputField(0);
ControllerID = dialogHandle2D7EF76C93C64e1aB0059E4973E282D2.GetInputField(1);
DeviceID = dialogHandle2D7EF76C93C64e1aB0059E4973E282D2.GetInputField(2);
// }} ""
// {{ 33 1 0 "668b064e_0034_49b6_a25834cfa1454763" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 34 1 0 "8b9996cb_770d_40a7_ab3b0852c727d86d" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (UserInputDecision == 1)
{
// }} ""
// {{{ 35 1 0 "39a7f50b_d698_4585_a16c375a5a9c92ee" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::SetTargetTemperature(ControllerID, DeviceID, HeaterTemperature, ErrorCode);
// }} ""
// {{ 36 1 0 "63faa106_f515_4d91_b62c01d2495099b5" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 37 1 0 "05947e72_0ef1_47a1_92b281b0e8a289f0" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (ReturnValue == ASWGLOBAL::BOOL::TRUE)
{
// }} ""
// {{ 38 1 0 "05947e72_0ef1_47a1_92b281b0e8a289f0" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{{ 39 1 0 "36cdaede_3fd0_4cf6_bb73ae0a25a5539e" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::GetLastError(LastError);
// }} ""
// {{{ 40 1 0 "e9b394e0_fa46_4d46_8a4e72f0d10ea014" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::GetDescriptionForErrorCode(ErrorCode, ErrorDescription);
// }} ""
// {{ 41 1 0 "0a30dfeb_81fd_4ec8_a198b4a15e5025bb" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandle00A21299F01247c5B66AB0EE68FAB0B9.SetOutput(Translate("The error description:\n"), ErrorDescription, Translate("\nThe last error message:\n"), LastError);
dialogHandle00A21299F01247c5B66AB0EE68FAB0B9.ShowOutput(Translate("An error occured! More information below!"), hslOKOnly | hslError | hslDefButton1, hslInfinite);
// }} ""
// {{ 42 1 0 "7763b89e_e9bf_42aa_8885e105e6f0ee04" "{930D6C31-8EFB-11d4-A3BA-002035848439}"
abort;
// }} ""
// {{ 43 1 0 "05947e72_0ef1_47a1_92b281b0e8a289f0" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 44 1 0 "63faa106_f515_4d91_b62c01d2495099b5" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 45 1 0 "1f66725f_5ecf_4590_acf05bed31a6b573" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::StartTemperatureControl(ControllerID, DeviceID, ErrorCode);
// }} ""
// {{ 46 1 0 "c86c6e89_604c_41a1_a65739169ed77167" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 47 1 0 "86744516_1274_4143_8b3e25d561645409" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (ReturnValue == ASWGLOBAL::BOOL::TRUE)
{
// }} ""
// {{ 48 1 0 "86744516_1274_4143_8b3e25d561645409" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{{ 49 1 0 "c6271d82_c4ae_4d9b_9e28d957a56cbc1a" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::GetLastError(LastError);
// }} ""
// {{{ 50 1 0 "b3708c64_4d7e_4608_9005627a32f6cc42" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::GetDescriptionForErrorCode(ErrorCode, ErrorDescription);
// }} ""
// {{ 51 1 0 "fce8f045_4d6e_413d_ac2e0b914d1ff844" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandle0FB5C3CAE69B470eBED075CFE9B9C1BE.SetOutput(Translate("The error description:\n"), ErrorDescription, Translate("\nThe last error message:\n"), LastError);
dialogHandle0FB5C3CAE69B470eBED075CFE9B9C1BE.ShowOutput(Translate("An error occured! More information below!"), hslOKOnly | hslError | hslDefButton1, hslInfinite);
// }} ""
// {{ 52 1 0 "9fcb588e_b354_4932_81157840029983c6" "{930D6C31-8EFB-11d4-A3BA-002035848439}"
abort;
// }} ""
// {{ 53 1 0 "86744516_1274_4143_8b3e25d561645409" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 54 1 0 "c86c6e89_604c_41a1_a65739169ed77167" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 55 1 0 "407181a3_2fa6_4a7d_9b8ba06143752cdf" "{B31F353E-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == Timer.SetTimer(6) )
{
    MECC::RaiseRuntimeErrorEx(-1355939584, MECC::IDS::stepNameTimerStart, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{ 56 1 0 "1843ebb0_223f_4bc6_a2efa6396ad2a2d9" "{B31F353F-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == Timer.WaitTimer(hslTrue, hslTrue) )
{
    MECC::RaiseRuntimeErrorEx(-1339162368, MECC::IDS::stepNameTimerWait, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{{ 57 1 0 "1018f512_6903_47b2_b1f77d067842a542" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLInhecoTECLib::StopTemperatureControl(ControllerID, DeviceID, ErrorCode);
// }} ""
// {{ 58 1 0 "8b9996cb_770d_40a7_ab3b0852c727d86d" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{{ 59 1 0 "76b79e74_b96e_460a_b63caa2b173ae416" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
ReturnValue = HSLInhecoTECLib::Terminate();
// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=dwittmer$$valid=0$$time=2010-07-02 13:28$$checksum=9f4162f4$$length=087$$