 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
 namespace _Method { #include "SmartStepCustomizedErrorHandling\\SmartStepCustomErrorHandling.hs_" } 
 namespace _Method { #include "Common\\PlateAndLidMovement.hs_" } 
 namespace _Method { #include "DPXSmartHelper\\TipLength\\DPXPreCuttedTipsLib.hs_" } 
#include "wide bore tip test.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
global device ML_STAR ("wide bore tip test.lay", "ML_STAR", hslTrue);
variable wide_bore_length;
variable wide_bore_volume;
variable pipette_volume;
variable loopCounter1;
dialog dialogHandle03AB906EF1CD4b7d8E14AF269F60DE3B;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
SMARTSTEPCUSTOMERRORHANDLING::_InitLibrary();
PLATEANDLIDMOVEMENT::_InitLibrary();
DPXPRECUTTEDTIPSLIB::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "27d8e282_baad_47f9_bf59f02d279416dd" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("27d8e282_baad_47f9_bf59f02d279416dd"); // Initialize
}
// }} ""
// {{ 2 1 0 "2ae826cd_e08e_475a_bcee1f0c63fe053c" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
wide_bore_length = 79.8;
// }} ""
// {{ 3 1 0 "c723f0fd_1263_49bc_8ad18adf83e9a262" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
wide_bore_volume = 1000;
// }} ""
// {{ 4 1 0 "8df1aef9_efeb_43e7_bb381ff35e4bf234" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
pipette_volume = 900;
// }} ""
// {{ 5 1 0 "48ca4a81_3d26_442b_92b561481423a62e" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
loopCounter1 = 0;
while (
   (ML_STAR.test_disp.GetCurrentPosition() > 0)
)
{
AlignSequences(hslTrue, ML_STAR.test_asp, 1, ML_STAR.test_disp, 1);
loopCounter1 = loopCounter1 + 1;
// }} ""
// {{ 6 1 0 "03a13439_dd97_4caa_ae9260de6698f5a0" "{E09A7A75-BB29-4e45-B265-7C8388E27D2C}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", 0);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("TipCountingEnabled", hslFalse);
PTL::SetTipHandlingState("TipCountingIdentifier", "");
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipPickupCustomStepID", 0);
PTL::SetTipHandlingState("TipPickupChannelVariable", "");
PTL::SetTipHandlingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetTipHandlingState("TipPickupSequenceReducible", hslTrue);
if( 0 == PTL::TipPickup(ML_STAR, ML_STAR.MlStar1000ulHighVolumeTipWithFilter) )
{
    PTL::RaiseRuntimeError(-1472986880, PTL::IDS::smartStepTipPickup, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 7 1 0 "38fb72bb_eb9e_4883_93b121c54fd652e2" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 8 1 0 "a9587a2e_8b02_44a5_9929f073c6cde54c" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
DPXPRECUTTEDTIPSLIB::SetCuttedTipLenght(ML_STAR, 5, wide_bore_length, wide_bore_volume);
// }} ""
// {{ 9 1 0 "fe38a1c0_7158_424f_81f83e71e72c4fde" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandle03AB906EF1CD4b7d8E14AF269F60DE3B.SetOutput(Translate("wide_bore_volume: "), wide_bore_volume);
dialogHandle03AB906EF1CD4b7d8E14AF269F60DE3B.ShowOutput("", hslOKOnly | hslInformation | hslDefButton1, hslInfinite);
// }} ""
// {{ 10 1 0 "e224619b_0b9a_48ac_ba98024230f507a6" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (pipette_volume > wide_bore_volume)
{
// }} ""
// {{ 11 1 0 "2d3d5d0f_a006_4299_aa0acd88b01796b0" "{2C884145-FBC2-46a3-9A50-7B1731970262}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", hslInfinite);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectChannelVariable", "");
if( 0 == PTL::TipEject(ML_STAR) )
{
    PTL::RaiseRuntimeError(-1456209664, PTL::IDS::smartStepTipEject, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 12 1 0 "603ae7c8_efe3_4b7b_ba95da7578c3c12e" "{930D6C31-8EFB-11d4-A3BA-002035848439}"
abort;
// }} ""
// {{ 13 1 0 "e224619b_0b9a_48ac_ba98024230f507a6" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 14 1 0 "648bada1_7ff0_4c4a_9cd2146ac8554a1a" "ML_STAR:{541143F5-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143F5_7FA2_11D3_AD85_0004ACB1DCB2("648bada1_7ff0_4c4a_9cd2146ac8554a1a"); // Aspirate
}
// }} ""
// {{ 15 1 0 "4c9058a7_672c_439d_ba770adf2ba97693" "ML_STAR:{541143F8-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143F8_7FA2_11D3_AD85_0004ACB1DCB2("4c9058a7_672c_439d_ba770adf2ba97693"); // Dispense
}
// }} ""
// {{ 16 1 0 "c6b39a9f_6adb_4eb5_8be75bc621e77fcf" "{2C884145-FBC2-46a3-9A50-7B1731970262}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", hslInfinite);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectChannelVariable", "");
if( 0 == PTL::TipEject(ML_STAR) )
{
    PTL::RaiseRuntimeError(-1456209664, PTL::IDS::smartStepTipEject, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 17 1 0 "c30092f8_0dc6_4bd4_b7b32039be114374" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 18 1 0 "e095145b_8045_4858_986c57bb4f6edf76" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
DPXPRECUTTEDTIPSLIB::ResetCuttedTipLenght(ML_STAR, 5);
// }} ""
// {{ 19 1 0 "48ca4a81_3d26_442b_92b561481423a62e" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
if (
   (ML_STAR.test_disp.GetCurrentPosition() > 0 && ML_STAR.test_disp.GetMax() == 0 )
)
{ MECC::EndlessSequenceLoopWarning(GetFileName()); }

}
ML_STAR.test_asp.SetMax(ML_STAR.test_asp.GetTotal());
ML_STAR.test_disp.SetMax(ML_STAR.test_disp.GetTotal());
ML_STAR.test_asp.SetCurrentPosition(1);
ML_STAR.test_disp.SetCurrentPosition(1);
}
// }} ""
// {{ 20 1 0 "e201926d_97ed_464c_82b9ddf1bb803bdc" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_427C233364DF4e38A76B6B937E67FD3B[];
sequence arrseqDispense_427C233364DF4e38A76B6B937E67FD3B[];
arrseqAspirate_427C233364DF4e38A76B6B937E67FD3B.SetSize(1);
arrseqAspirate_427C233364DF4e38A76B6B937E67FD3B.SetAt(0, ML_STAR.test_disp);
arrseqDispense_427C233364DF4e38A76B6B937E67FD3B.SetSize(1);
arrseqDispense_427C233364DF4e38A76B6B937E67FD3B.SetAt(0, ML_STAR.test_asp);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 2);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 10);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslFalse);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_427C233364DF4e38A76B6B937E67FD3B, arrseqDispense_427C233364DF4e38A76B6B937E67FD3B, 1, 1, pipette_volume, 0, 1, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.test_disp, ML_STAR.test_asp) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{{ 21 1 0 "c0e047db_d685_44d6_b4e69fbaa169f2f9" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
COMMON96HEADSUBMETHODS::Clear96HeadAndArm(ML_STAR);
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
SMARTSTEPCUSTOMERRORHANDLING::_ExitLibrary();
PLATEANDLIDMOVEMENT::_ExitLibrary();
DPXPRECUTTEDTIPSLIB::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2019-06-03 09:03$$checksum=c42310ec$$length=087$$