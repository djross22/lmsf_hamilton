#include "Media line test 2018 07 18.res"
global device ML_STAR ("Media line test 2018 07 18.lay", "ML_STAR", hslTrue);
 namespace _Method { #include "Hamilton\\HSLHamiltonMediaFillModule.hsl" } 
 namespace _Method { #include "..\\HSLTrcLib.hsl" } 
 namespace _Method { #include "HSLML_STARLib.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable intMediaLineReturn;
variable _intMediaLineInstrumentID;
variable _intSimulationMode;
variable _blnSimulationMode;
variable loopCounter1;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "de1275d5_cba9_4c2e_889549be012d35d6" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("de1275d5_cba9_4c2e_889549be012d35d6"); // Initialize
}
// }} ""
// {{{ 2 1 0 "f7437e62_a807_4f4e_b1a5acb1083788dc" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
_blnSimulationMode = HSLML_STAR::IsSimulatorMode(ML_STAR);
// }} ""
// {{{ 3 1 0 "ed124e85_ee04_40d6_85e14ba9ebd98498" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
intMediaLineReturn = HSLHamiltonMediaFillModule::Initialize(8, _intSimulationMode, _intMediaLineInstrumentID);
// }} ""
// {{{ 4 1 0 "7702d2f9_ac2b_4a62_81ebc7ae82e3ce1a" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TrcTrace(Translate("_intMediaLineInstrumentID = "), _intMediaLineInstrumentID);
// }} ""
// {{{ 5 1 0 "0a67c894_6bf2_46c4_829321d609b9e109" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
_MediaLineReturnHandle(intMediaLineReturn, Translate("initialise"));
// }} ""
// {{ 6 1 0 "8948f0c9_667d_49da_bd611605b0618284" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(loopCounter1 = 0; loopCounter1 < 4;)
{
loopCounter1 = loopCounter1 + 1;
// }} ""
// {{ 7 1 0 "7cb488f6_5b1b_4a06_a0703a055c9314cd" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 8 1 0 "0c06c8a0_01ad_4fe7_9e53c87a083ca12b" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
intMediaLineReturn = HSLHamiltonMediaFillModule::SetPumpDirection(_intMediaLineInstrumentID, loopCounter1, 0);
// }} ""
// {{{ 9 1 0 "514b81fc_2b4d_44e8_861ce581fbc845ff" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
_MediaLineReturnHandle(intMediaLineReturn, Translate("set pump direction"));
// }} ""
// {{ 10 1 0 "7cb488f6_5b1b_4a06_a0703a055c9314cd" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 11 1 0 "4da22899_6ed0_413b_a3a24750c0a68e6b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 12 1 0 "ba6a5198_227a_4728_85c302dd63449f2f" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
intMediaLineReturn = HSLHamiltonMediaFillModule::FillTrough(_intMediaLineInstrumentID, loopCounter1, 75, 60);
// }} ""
// {{{ 13 1 0 "6da9b5e9_29b2_4a9d_a37cf37ff72b2622" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
_MediaLineReturnHandle(intMediaLineReturn, Translate("fill trough"));
// }} ""
// {{{ 14 1 0 "73dc880f_ef2f_4d55_b9c4da7280456038" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
intMediaLineReturn = HSLHamiltonMediaFillModule::WaitForPump(_intMediaLineInstrumentID, loopCounter1);
// }} ""
// {{{ 15 1 0 "2f10da14_5e40_4350_9899830f03502c67" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
_MediaLineReturnHandle(intMediaLineReturn, Translate("wait for pump"));
// }} ""
// {{ 16 1 0 "4da22899_6ed0_413b_a3a24750c0a68e6b" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 17 1 0 "8948f0c9_667d_49da_bd611605b0618284" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{ 18 1 0 "ffcffe12_8730_466c_802f5a2a12a59b62" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 19 1 0 "57f20b3f_f495_4180_8b502f7c2c3de5cc" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
intMediaLineReturn = HSLHamiltonMediaFillModule::Disconnect(_intMediaLineInstrumentID);
// }} ""
// {{{ 20 1 0 "7ee77bf7_4c00_4371_86c121c42a3ef184" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
_MediaLineReturnHandle(intMediaLineReturn, Translate("disconnect"));
// }} ""
// {{ 21 1 0 "ffcffe12_8730_466c_802f5a2a12a59b62" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2018-07-18 13:22$$checksum=8a2f9cb3$$length=087$$