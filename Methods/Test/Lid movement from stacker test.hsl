#include "Lid movement from stacker test.res"
global device ML_STAR ("Lid movement from stacker test.lay", "ML_STAR", hslTrue);
 namespace _Method { #include "NIST\\Libraries\\NIST_TruSeqNano_Processes.hs_" } 
 namespace _Method { #include "Common\\iSWAP-PlateAndLidMovement.hs_" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
NIST_TRUSEQNANO_PROCESSES::_InitLibrary();
ISWAP_PLATEANDLIDMOVEMENT::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "cbae202f_9d78_435b_bdcd18a8c03f9609" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("cbae202f_9d78_435b_bdcd18a8c03f9609"); // Initialize
}
// }} ""
// {{ 2 1 0 "6704e051_3b86_44ef_b9c4cf13adfd6e68" "ML_STAR:{EA251BFB-66DE-48D1-83E5-6884B4DD8D11}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._EA251BFB_66DE_48D1_83E5_6884B4DD8D11("6704e051_3b86_44ef_b9c4cf13adfd6e68"); // MoveAutoLoad
}
// }} ""
// {{{ 3 1 0 "821cc07c_3a9b_457c_bcf082a37f30cb66" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
ISWAP_PLATEANDLIDMOVEMENT::MoveLid(ML_STAR.PCR_Plate_Lid_Parking, ML_STAR.PCR_Plate_lid, 1, 1, ML_STAR);
// }} ""
// {{ 2 "AutoExitBlock" ""
NIST_TRUSEQNANO_PROCESSES::_ExitLibrary();
ISWAP_PLATEANDLIDMOVEMENT::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2019-07-11 14:22$$checksum=b1f5f904$$length=087$$