#include "Tip test 300.res"
global device ML_STAR ("Tip test 300.lay", "ML_STAR", hslTrue);
 namespace _Method { #include "HSLSeqLib.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable loopCounter1;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "af82f374_3f14_45ca_ac01d2b90e773e31" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
SeqEdit2(ML_STAR.MlStar300ulStandardVolumeTipWithFilter, ML_STAR, Translate("Edit Tip Sequence for 300 uL Tips"), Translate("Verify and/or edit the 300 uL tip sequence:"), 300, Translate(""), 0, ML_STAR.MlStar300ulStandardVolumeTipWithFilter, 1, Translate(""));
// }} ""
// {{ 2 1 0 "0c0e81d9_d1d4_4657_aca97a28d2abd88c" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("0c0e81d9_d1d4_4657_aca97a28d2abd88c"); // Initialize
}
// }} ""
// {{ 3 1 0 "d9b628af_4cdd_4e7f_98a66768a864ce4b" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
loopCounter1 = 0;
while (
   (ML_STAR.MlStar300ulStandardVolumeTipWithFilter.GetCurrentPosition() > 0)
)
{
AlignSequences(hslTrue, ML_STAR.MlStar300ulStandardVolumeTipWithFilter, 1);
loopCounter1 = loopCounter1 + 1;
// }} ""
// {{ 4 1 0 "4dfa3ec3_957c_4511_aea27b170000de2a" "ML_STAR:{541143FA-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FA_7FA2_11D3_AD85_0004ACB1DCB2("4dfa3ec3_957c_4511_aea27b170000de2a"); // TipPickUp
}
// }} ""
// {{ 5 1 0 "7bb08658_dee1_4f30_b20eb86c483c33bf" "ML_STAR:{541143FC-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FC_7FA2_11D3_AD85_0004ACB1DCB2("7bb08658_dee1_4f30_b20eb86c483c33bf"); // TipEject
}
// }} ""
// {{ 6 1 0 "d9b628af_4cdd_4e7f_98a66768a864ce4b" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
if (
   (ML_STAR.MlStar300ulStandardVolumeTipWithFilter.GetCurrentPosition() > 0 && ML_STAR.MlStar300ulStandardVolumeTipWithFilter.GetMax() == 0 )
)
{ MECC::EndlessSequenceLoopWarning(GetFileName()); }

}
ML_STAR.MlStar300ulStandardVolumeTipWithFilter.SetMax(ML_STAR.MlStar300ulStandardVolumeTipWithFilter.GetTotal());
ML_STAR.MlStar300ulStandardVolumeTipWithFilter.SetCurrentPosition(1);
}
// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2019-07-15 12:20$$checksum=524a4316$$length=087$$