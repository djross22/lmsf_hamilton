global device ML_STAR ("growth plate lid movement test.lay", "ML_STAR", hslTrue);
#include "growth plate lid movement test.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "ce86ac6c_b317_4edc_b8bbbfdaf7de2193" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("ce86ac6c_b317_4edc_b8bbbfdaf7de2193"); // Initialize
}
// }} ""
// {{ 2 1 0 "80d1d1a3_a01c_45a3_96671a10ffbf5064" "ML_STAR:{A108628C-BEB7-4CB6-99FD-8523302C700F}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._A108628C_BEB7_4CB6_99FD_8523302C700F("80d1d1a3_a01c_45a3_96671a10ffbf5064"); // ZSwapGetPlate
}
// }} ""
// {{ 3 1 0 "e3ce0e17_5473_4f41_be4e251cb96b2075" "ML_STAR:{9DF3DD4B-3B5E-4750-8989-04458D1B134B}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._9DF3DD4B_3B5E_4750_8989_04458D1B134B("e3ce0e17_5473_4f41_be4e251cb96b2075"); // ZSwapPlacePlate
}
// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{ 4 1 0 "b5f89789_164e_412a_93b69b06bcb31e4c" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("b5f89789_164e_412a_93b69b06bcb31e4c"); // EasyCOREGripTransport
}
// }} ""
// {{ 5 1 0 "097a48bf_10da_46fd_ba6e659a44c67661" "ML_STAR:{8A76E9A2-8053-4a32-B36F-AD9556B09C99}"
{
	ML_STAR._8A76E9A2_8053_4a32_B36F_AD9556B09C99("097a48bf_10da_46fd_ba6e659a44c67661"); // EasyiSWAPTransport
}
// }} ""
// {{ 6 1 0 "08f1c27b_a308_4805_a880aa2d939216a9" "ML_STAR:{8A76E9A2-8053-4a32-B36F-AD9556B09C99}"
{
	ML_STAR._8A76E9A2_8053_4a32_B36F_AD9556B09C99("08f1c27b_a308_4805_a880aa2d939216a9"); // EasyiSWAPTransport
}
// }} ""
// {{ 7 1 0 "84176495_d394_4ed6_badfd73b3a2ca43c" "ML_STAR:{8A76E9A2-8053-4a32-B36F-AD9556B09C99}"
{
	ML_STAR._8A76E9A2_8053_4a32_B36F_AD9556B09C99("84176495_d394_4ed6_badfd73b3a2ca43c"); // EasyiSWAPTransport
}
// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2018-12-07 17:10$$checksum=87475a70$$length=087$$