global device ML_STAR ("tip pickup error handling test.lay", "ML_STAR", hslTrue);
 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
#include "tip pickup error handling test.res"
 namespace _Method { #include "SmartStepCustomizedErrorHandling\\SmartStepCustomErrorHandling.hs_" } 
 namespace _Method { #include "Common\\PlateAndLidMovement.hs_" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable user_choice;
variable loopCounter2;
dialog dialogHandleB3822CCE94BA47bb99C35DB9B7CF5203;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
SMARTSTEPCUSTOMERRORHANDLING::_InitLibrary();
PLATEANDLIDMOVEMENT::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "27d8e282_baad_47f9_bf59f02d279416dd" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("27d8e282_baad_47f9_bf59f02d279416dd"); // Initialize
}
// }} ""
// {{ 2 1 0 "389d56e8_7455_4551_8366cca1511a1baf" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
user_choice = 1;
// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{ 3 1 0 "86354ad3_64de_49dc_885f588fe766895c" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
loopCounter2 = 0;
while (user_choice == 1)
{
loopCounter2 = loopCounter2 + 1;
// }} ""
// {{ 4 1 0 "fedb7c1b_1fb0_4aa5_b346a52dba5ae65d" "{E09A7A75-BB29-4e45-B265-7C8388E27D2C}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", 0);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("TipCountingEnabled", hslFalse);
PTL::SetTipHandlingState("TipCountingIdentifier", "");
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipPickupCustomStepID", 11);
PTL::SetTipHandlingState("TipPickupChannelVariable", "");
PTL::SetTipHandlingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetTipHandlingState("TipPickupSequenceReducible", hslTrue);
if( 0 == PTL::TipPickup(ML_STAR, ML_STAR.Tips_1000_Channels) )
{
    PTL::RaiseRuntimeError(-1472986880, PTL::IDS::smartStepTipPickup, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 5 1 0 "b6075a2e_401f_44f3_b3d2d97cdf9f2cb3" "{2C884145-FBC2-46a3-9A50-7B1731970262}"
PTL::ResetTipHandlingState();
PTL::SetTipHandlingState("UserResponseTime", hslInfinite);
PTL::SetTipHandlingState("ErrorHandling", 3);
PTL::SetTipHandlingState("InitializeCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectCustomStepID", 0);
PTL::SetTipHandlingState("TipEjectChannelVariable", "");
if( 0 == PTL::TipEject(ML_STAR) )
{
    PTL::RaiseRuntimeError(-1456209664, PTL::IDS::smartStepTipEject, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}

// }} ""
// {{ 6 1 0 "c27d170b_ed4d_4602_bb8f809c91ebc311" "{B31F3539-5D80-11d4-A5EB-0050DA737D89}"
dialogHandleB3822CCE94BA47bb99C35DB9B7CF5203.SetInputSize(1);
dialogHandleB3822CCE94BA47bb99C35DB9B7CF5203.SetInputField(0, Translate("choice"), hslInteger, 1, 0, 1);
dialogHandleB3822CCE94BA47bb99C35DB9B7CF5203.ShowInput("", hslInfinite, hslOKOnly | hslDefButton1);
user_choice = dialogHandleB3822CCE94BA47bb99C35DB9B7CF5203.GetInputField(0);
// }} ""
// {{ 7 1 0 "86354ad3_64de_49dc_885f588fe766895c" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{ 8 1 0 "367200fe_636a_4011_ab57a2059272519f" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_713B8F8FDEA04839B9AED40E311A06BD[];
sequence arrseqDispense_713B8F8FDEA04839B9AED40E311A06BD[];
arrseqAspirate_713B8F8FDEA04839B9AED40E311A06BD.SetSize(1);
arrseqAspirate_713B8F8FDEA04839B9AED40E311A06BD.SetAt(0, ML_STAR.Nalgene_300_ml_open_trough_0002);
arrseqDispense_713B8F8FDEA04839B9AED40E311A06BD.SetSize(1);
arrseqDispense_713B8F8FDEA04839B9AED40E311A06BD.SetAt(0, ML_STAR.media1);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", 0);
PTL::SetPipettingState("ErrorHandling", 5);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 11);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 15);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_713B8F8FDEA04839B9AED40E311A06BD, arrseqDispense_713B8F8FDEA04839B9AED40E311A06BD, 1, 1, 500, 0, 2, hslInfinite, hslInfinite, 1, "", ML_STAR.Nalgene_300_ml_open_trough_0002, ML_STAR.media1) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{{ 9 1 0 "c0e047db_d685_44d6_b4e69fbaa169f2f9" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
COMMON96HEADSUBMETHODS::Clear96HeadAndArm(ML_STAR);
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
SMARTSTEPCUSTOMERRORHANDLING::_ExitLibrary();
PLATEANDLIDMOVEMENT::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2019-05-23 09:26$$checksum=50164e88$$length=085$$