#include "Media line test 2018 07 18.res"
global device ML_STAR ("Media line test 2018 07 18.lay", "ML_STAR", hslTrue);
 namespace _Method { #include "Hamilton\\HSLHamiltonMediaFillModule.hsl" } 
 namespace _Method { #include "..\\HSLTrcLib.hsl" } 
 namespace _Method { #include "HSLML_STARLib.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable intMediaLineReturn;
variable _intMediaLineInstrumentID;
variable _intSimulationMode;
variable _blnSimulationMode;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "de1275d5_cba9_4c2e_889549be012d35d6" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("de1275d5_cba9_4c2e_889549be012d35d6"); // Initialize
}
// }} ""
// {{{ 2 1 0 "f7437e62_a807_4f4e_b1a5acb1083788dc" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
_blnSimulationMode = HSLML_STAR::IsSimulatorMode(ML_STAR);
// }} ""
// {{ 3 1 0 "a5fa6313_a75c_489f_b96d63eb905f87fe" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 4 1 0 "bde32a2c_8f37_4391_87db875df246c3d3" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
intMediaLineReturn = HSLHamiltonMediaFillModule::Initialize(8, _intSimulationMode, _intMediaLineInstrumentID);
// }} ""
// {{{ 5 1 0 "45341856_7edc_41dc_b10c63e58f069c93" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TrcTrace(Translate("_intMediaLineInstrumentID = "), _intMediaLineInstrumentID);
// }} ""
// {{{ 6 1 0 "6048af09_7620_42a7_8c9a9ae23dd4721a" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
_MediaLineReturnHandle(intMediaLineReturn, Translate("initialise"));
// }} ""
// {{{ 7 1 0 "c6fd28b5_63d5_4ac4_a3ee5cd35cf3c958" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
intMediaLineReturn = HSLHamiltonMediaFillModule::SetPumpDirection(_intMediaLineInstrumentID, 1, 0);
// }} ""
// {{{ 8 1 0 "8653946d_d664_43f5_b8d2389fa0920c2e" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
_MediaLineReturnHandle(intMediaLineReturn, Translate("set pump direction"));
// }} ""
// {{ 9 1 0 "a5fa6313_a75c_489f_b96d63eb905f87fe" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 10 1 0 "06f8368f_8a6e_4e3a_9bb8b21e7a126164" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 11 1 0 "599c9883_ca3d_4b71_9fd806d81080fd24" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
intMediaLineReturn = HSLHamiltonMediaFillModule::FillTrough(_intMediaLineInstrumentID, 2, 75, 60);
// }} ""
// {{{ 12 1 0 "1bdff05c_3349_459d_bd010f604f6fd3d2" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
_MediaLineReturnHandle(intMediaLineReturn, Translate("fill trough"));
// }} ""
// {{{ 13 1 0 "49645f29_7a23_48bf_a48980b347c97f21" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
intMediaLineReturn = HSLHamiltonMediaFillModule::WaitForPump(_intMediaLineInstrumentID, 2);
// }} ""
// {{{ 14 1 0 "6f336bb9_c967_4d38_acd87c7c42522506" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
_MediaLineReturnHandle(intMediaLineReturn, Translate("wait for pump"));
// }} ""
// {{ 15 1 0 "06f8368f_8a6e_4e3a_9bb8b21e7a126164" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 16 1 0 "ffcffe12_8730_466c_802f5a2a12a59b62" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 17 1 0 "57f20b3f_f495_4180_8b502f7c2c3de5cc" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
intMediaLineReturn = HSLHamiltonMediaFillModule::Disconnect(_intMediaLineInstrumentID);
// }} ""
// {{{ 18 1 0 "7ee77bf7_4c00_4371_86c121c42a3ef184" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
_MediaLineReturnHandle(intMediaLineReturn, Translate("disconnect"));
// }} ""
// {{ 19 1 0 "ffcffe12_8730_466c_802f5a2a12a59b62" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2018-10-09 14:56$$checksum=b34ec052$$length=087$$