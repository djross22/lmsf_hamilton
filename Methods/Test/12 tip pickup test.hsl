global device ML_STAR ("12 tip pickup test.lay", "ML_STAR", hslTrue);
#include "12 tip pickup test.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable loopCounter1;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "5e7719da_18ce_4abf_9368d299dca819c5" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("5e7719da_18ce_4abf_9368d299dca819c5"); // Initialize
}
// }} ""
// {{ 2 1 0 "3c4b22d7_0d36_425b_91a1b145a13412f4" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
loopCounter1 = 0;
while (
   (ML_STAR.Dil_to.GetCurrentPosition() > 0)
)
{
AlignSequences(hslTrue, ML_STAR.Dil_from, 1, ML_STAR.Dil_to, 1);
loopCounter1 = loopCounter1 + 1;
// }} ""
// {{ 3 1 0 "19c5386c_10c8_4007_84512c0f2063481c" "ML_STAR:{827392A0-B7E8-4472-9ED3-B45B71B5D27A}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._827392A0_B7E8_4472_9ED3_B45B71B5D27A("19c5386c_10c8_4007_84512c0f2063481c"); // Head96Aspirate
}
// }} ""
// {{ 4 1 0 "99550fa2_9389_4359_ae8448fe830a7134" "ML_STAR:{A48573A5-62ED-4951-9EF9-03207EFE34FB}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._A48573A5_62ED_4951_9EF9_03207EFE34FB("99550fa2_9389_4359_ae8448fe830a7134"); // Head96Dispense
}
// }} ""
// {{ 5 1 0 "3c4b22d7_0d36_425b_91a1b145a13412f4" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
if (
   (ML_STAR.Dil_to.GetCurrentPosition() > 0 && ML_STAR.Dil_to.GetMax() == 0 )
)
{ MECC::EndlessSequenceLoopWarning(GetFileName()); }

}
ML_STAR.Dil_from.SetMax(ML_STAR.Dil_from.GetTotal());
ML_STAR.Dil_to.SetMax(ML_STAR.Dil_to.GetTotal());
ML_STAR.Dil_from.SetCurrentPosition(1);
ML_STAR.Dil_to.SetCurrentPosition(1);
}
// }} ""
// {{ 6 1 0 "2aba95ea_3bf9_4132_a7ccd552858261fc" "ML_STAR:{2880E77A-3D6D-40FE-AF57-1BD1FE13960C}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._2880E77A_3D6D_40FE_AF57_1BD1FE13960C("2aba95ea_3bf9_4132_a7ccd552858261fc"); // Head96TipEject
}
// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=djross$$valid=0$$time=2018-11-27 13:12$$checksum=34e78d3f$$length=085$$