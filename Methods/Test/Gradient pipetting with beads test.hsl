 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "Common\\Tip Handling\\With 96-Head\\Tip Handling with 96-Head.hs_" } 
 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
#include "Gradient pipetting with beads test.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable tip_counter_50_channels;
variable tip_counter_1000_channels;
variable tip_counter_300_channels;
variable tip_counter_array[];
variable pipette_vol;
variable culture_vol;
global device ML_STAR ("Gradient pipetting with beads test.lay", "ML_STAR", hslTrue);
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
TIP_HANDLING_WITH_96_HEAD::_InitLibrary();
COMMON96HEADSUBMETHODS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "ecf5a389_add7_4b8f_a5b16bbb3cc2cebb" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
TIP_HANDLING_WITH_96_HEAD::GetTipCounters(tip_counter_array, 1);
// }} ""
// {{ 2 1 0 "5916f219_fb8c_40d1_b252d01cba9279a1" "{67A8F1C9-6546-41e9-AD2F-3C54F7818853}"
tip_counter_1000_channels=tip_counter_array.GetAt(1-1);
// }} ""
// {{ 3 1 0 "2db34c35_32ae_42d3_a1d75f907e5dc866" "{67A8F1C9-6546-41e9-AD2F-3C54F7818853}"
tip_counter_300_channels=tip_counter_array.GetAt(2-1);
// }} ""
// {{ 4 1 0 "48bd4fa0_9ae2_4dbf_960d622cca9183f2" "{67A8F1C9-6546-41e9-AD2F-3C54F7818853}"
tip_counter_50_channels=tip_counter_array.GetAt(3-1);
// }} ""
// {{{ 5 1 0 "9247b973_fea9_4ed6_8613e7f52ff629ad" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TipCount::Read2(ML_STAR.Tips_1000_Channels, tip_counter_1000_channels, ML_STAR);
// }} ""
// {{{ 6 1 0 "4ce8b034_58e4_4543_8b28942342c109b5" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TipCount::Read2(ML_STAR.Tips_300_Channels, tip_counter_300_channels, ML_STAR);
// }} ""
// {{{ 7 1 0 "2ea7066c_61a4_46c2_bfcc70f0dd5932e8" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TipCount::Read2(ML_STAR.Tips_50_Channels, tip_counter_50_channels, ML_STAR);
// }} ""
// {{ 8 1 0 "4793ec2d_d199_460c_b9ba15974e0f1acf" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("4793ec2d_d199_460c_b9ba15974e0f1acf"); // Initialize
}
// }} ""
// {{ 9 1 0 "3da583a3_0e31_4f29_9ecd914a91f7bfb4" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 10 1 0 "4c97bd71_212c_4c12_af6c6c9373773119" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
culture_vol = 425;
// }} ""
// {{ 11 1 0 "9df50071_36f3_4297_81bbe37686941203" "ML_STAR:{541143FA-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FA_7FA2_11D3_AD85_0004ACB1DCB2("9df50071_36f3_4297_81bbe37686941203"); // TipPickUp
}
// }} ""
// {{ 12 1 0 "ad5ab11a_22c7_47b7_bdc28471ca761a27" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
pipette_vol = culture_vol * 2;
// }} ""
// {{ 13 1 0 "8dc19b36_6489_40e1_b3275336237c82af" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_3707D210B7014723B5ADE1B4FC730056[];
sequence arrseqDispense_3707D210B7014723B5ADE1B4FC730056[];
arrseqAspirate_3707D210B7014723B5ADE1B4FC730056.SetSize(1);
arrseqAspirate_3707D210B7014723B5ADE1B4FC730056.SetAt(0, ML_STAR.Nalgene_300_ml_open_trough_0001);
arrseqDispense_3707D210B7014723B5ADE1B4FC730056.SetSize(1);
arrseqDispense_3707D210B7014723B5ADE1B4FC730056.SetAt(0, ML_STAR.GP_3_H1);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "10000000");
PTL::SetPipettingState("InitializeEnabled", hslFalse);
PTL::SetPipettingState("TipPickupChannelVariable", "10000000");
PTL::SetPipettingState("TipPickupEnabled", hslFalse);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "10000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 10);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslFalse);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_3707D210B7014723B5ADE1B4FC730056, arrseqDispense_3707D210B7014723B5ADE1B4FC730056, 1, 1, pipette_vol, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Nalgene_300_ml_open_trough_0001, ML_STAR.GP_3_H1) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 14 1 0 "7fa49984_8dcf_440b_ad34af0e45bb1a9e" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_F7EEA54D0DB04361BB5371CC3E3A8F6B[];
sequence arrseqDispense_F7EEA54D0DB04361BB5371CC3E3A8F6B[];
arrseqAspirate_F7EEA54D0DB04361BB5371CC3E3A8F6B.SetSize(1);
arrseqAspirate_F7EEA54D0DB04361BB5371CC3E3A8F6B.SetAt(0, ML_STAR.Nalgene_300_ml_open_trough_0001);
arrseqDispense_F7EEA54D0DB04361BB5371CC3E3A8F6B.SetSize(1);
arrseqDispense_F7EEA54D0DB04361BB5371CC3E3A8F6B.SetAt(0, ML_STAR.dilute_to);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "10000000");
PTL::SetPipettingState("InitializeEnabled", hslFalse);
PTL::SetPipettingState("TipPickupChannelVariable", "10000000");
PTL::SetPipettingState("TipPickupEnabled", hslFalse);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "10000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 6);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslFalse);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_F7EEA54D0DB04361BB5371CC3E3A8F6B, arrseqDispense_F7EEA54D0DB04361BB5371CC3E3A8F6B, 1, 1, culture_vol, 0, 2, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.Nalgene_300_ml_open_trough_0001, ML_STAR.dilute_to) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 15 1 0 "7db85430_10ac_4028_887d916a7abc0eee" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
{
sequence arrseqAspirate_25CF79F4C2A24b37816584F4FEEABEF9[];
sequence arrseqDispense_25CF79F4C2A24b37816584F4FEEABEF9[];
arrseqAspirate_25CF79F4C2A24b37816584F4FEEABEF9.SetSize(1);
arrseqAspirate_25CF79F4C2A24b37816584F4FEEABEF9.SetAt(0, ML_STAR.dilute_from);
arrseqDispense_25CF79F4C2A24b37816584F4FEEABEF9.SetSize(1);
arrseqDispense_25CF79F4C2A24b37816584F4FEEABEF9.SetAt(0, ML_STAR.dilute_to);
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeCustomStepID", 0);
PTL::SetPipettingState("LoadCarrierCustomStepID", 0);
PTL::SetPipettingState("UnloadCarrierCustomStepID", 0);
PTL::SetPipettingState("CalibrateCarrierCustomStepID", 0);
PTL::SetPipettingState("TipPickupCustomStepID", 0);
PTL::SetPipettingState("TipEjectCustomStepID", 0);
PTL::SetPipettingState("AspirateCustomStepID", 0);
PTL::SetPipettingState("DispenseCustomStepID", 0);
PTL::SetPipettingState("PreDispenseCustomStepID", 0);
PTL::SetPipettingState("PostDispenseCustomStepID", 0);
PTL::SetPipettingState("StartNeedleWashCustomStepID", 0);
PTL::SetPipettingState("WaitNeedleWashCustomStepID", 0);
PTL::SetPipettingState("InitializeChannelVariable", "10000000");
PTL::SetPipettingState("InitializeEnabled", hslFalse);
PTL::SetPipettingState("TipPickupChannelVariable", "10000000");
PTL::SetPipettingState("TipPickupEnabled", hslFalse);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 3);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", culture_vol);
PTL::SetPipettingState("DispenseSubmergeDepth", 2);
PTL::SetPipettingState("DispenseChannelVariable", "10000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 5);
PTL::SetPipettingState("DispenseFluidHeight", 0);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "HighVolumeFilter_Water_FastMixing_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslTrue);
PTL::SetPipettingState("DispenseSequenceReducible", hslTrue);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette3(ML_STAR, ML_STAR.Tips_1000_Channels, arrseqAspirate_25CF79F4C2A24b37816584F4FEEABEF9, arrseqDispense_25CF79F4C2A24b37816584F4FEEABEF9, 1, 1, culture_vol, 0, 1, hslInfinite, hslInfinite, hslInfinite, "", ML_STAR.dilute_from, ML_STAR.dilute_to) )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
}

// }} ""
// {{ 16 1 0 "adb73e23_80f3_4a00_b3fd926af11728f7" "ML_STAR:{541143FC-7FA2-11D3-AD85-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._541143FC_7FA2_11D3_AD85_0004ACB1DCB2("adb73e23_80f3_4a00_b3fd926af11728f7"); // TipEject
}
// }} ""
// {{ 17 1 0 "add162c9_2104_479c_852f6aaf6ade41d1" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 18 1 0 "2047d47e_87f6_4bd6_90ae266111e2676b" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TipCount::Write2(ML_STAR.Tips_1000_Channels, tip_counter_1000_channels, ML_STAR);
// }} ""
// {{{ 19 1 0 "8f68f9aa_baa9_41b5_b23e6c79e6ea309e" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TipCount::Write2(ML_STAR.Tips_300_Channels, tip_counter_300_channels, ML_STAR);
// }} ""
// {{{ 20 1 0 "cae184a5_3655_4e7d_af4fc6d453e01a0c" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TipCount::Write2(ML_STAR.Tips_50_Channels, tip_counter_50_channels, ML_STAR);
// }} ""
// {{{ 21 1 0 "8fa2a694_e4a5_4319_8a657392d9191bb0" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
COMMON96HEADSUBMETHODS::Clear96HeadAndArm(ML_STAR);
// }} ""
// {{ 2 "AutoExitBlock" ""
TIP_HANDLING_WITH_96_HEAD::_ExitLibrary();
COMMON96HEADSUBMETHODS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2019-03-17 16:43$$checksum=34a30a50$$length=087$$