 namespace _Method { #include "Common\\Common96HeadSubMethods.hs_" } 
 namespace _Method { #include "Common\\PlateAndLidMovement.hs_" } 
#include "Abgene plate movement test.res"
 namespace _Method { #include "HSLTrcLib.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable loopCounter1;
timer timer1;
global device ML_STAR ("Abgene plate movement test.lay", "ML_STAR", hslTrue);
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
COMMON96HEADSUBMETHODS::_InitLibrary();
PLATEANDLIDMOVEMENT::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "4871d7ec_de42_4546_b8831311601e5609" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("4871d7ec_de42_4546_b8831311601e5609"); // Initialize
}
// }} ""
// {{ 2 1 0 "2332e9de_4622_4859_ae5510a191d827b6" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(loopCounter1 = 0; loopCounter1 < 100;)
{
loopCounter1 = loopCounter1 + 1;
// }} ""
// {{{ 3 1 0 "68ae6b7b_a7ce_4241_815781507683e72c" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TrcTrace(Translate("loop: "), loopCounter1);
// }} ""
// {{{ 4 1 0 "dce32096_cc45_46fd_82a3e02828aed450" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveAbgenePlateWithLid(ML_STAR.ABGene_96_well_1200_ul_plate_0001, ML_STAR.ABGene_96_well_1200_ul_plate_0001_lid, ML_STAR.ABGene_96_well_1200_ul_plate_0002, ML_STAR.ABGene_96_well_1200_ul_plate_0002_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 1, 0, ML_STAR);
// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{ 5 1 0 "5d9da1b7_9920_42ad_82617dff2d4cfde0" "{B31F353E-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.SetTimer(5) )
{
    MECC::RaiseRuntimeErrorEx(-1355939584, MECC::IDS::stepNameTimerStart, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{ 6 1 0 "95447b99_3f8c_43a5_a2ebdf031398db05" "{B31F353F-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.WaitTimer(hslTrue, hslTrue) )
{
    MECC::RaiseRuntimeErrorEx(-1339162368, MECC::IDS::stepNameTimerWait, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{{ 7 1 0 "4fceb1f3_9b60_497c_a01c1f8475584cab" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveAbgenePlateWithLid(ML_STAR.ABGene_96_well_1200_ul_plate_0002, ML_STAR.ABGene_96_well_1200_ul_plate_0002_lid, ML_STAR.ABGene_96_well_1200_ul_plate_0003, ML_STAR.ABGene_96_well_1200_ul_plate_0003_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 0, ML_STAR);
// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{ 8 1 0 "99b49d4e_7c4c_404f_a14434c8ec21451d" "{B31F353E-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.SetTimer(5) )
{
    MECC::RaiseRuntimeErrorEx(-1355939584, MECC::IDS::stepNameTimerStart, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{ 9 1 0 "7cb4cf72_0713_4c43_8a87023c81a5264a" "{B31F353F-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.WaitTimer(hslTrue, hslTrue) )
{
    MECC::RaiseRuntimeErrorEx(-1339162368, MECC::IDS::stepNameTimerWait, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{{ 10 1 0 "10e41169_a42c_403d_87ceec975953090b" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PLATEANDLIDMOVEMENT::MoveAbgenePlateFromThermoShake(ML_STAR.ABGene_96_well_1200_ul_plate_0003, ML_STAR.ABGene_96_well_1200_ul_plate_0003_lid, ML_STAR.ABGene_96_well_1200_ul_plate_0001, ML_STAR.ABGene_96_well_1200_ul_plate_0001_lid, ML_STAR.COREGripTool_OnWaste_1000ul_0001, 0, 1, ML_STAR);
// }} ""
// {{ 11 1 0 "2332e9de_4622_4859_ae5510a191d827b6" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{ 2 "AutoExitBlock" ""
COMMON96HEADSUBMETHODS::_ExitLibrary();
PLATEANDLIDMOVEMENT::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2019-06-21 15:12$$checksum=62ec5671$$length=087$$