#include "Test - Midi plates and HHS.res"
global device ML_STAR ("Test - Midi plates and HHS.lay", "ML_STAR", hslTrue);
global device HxFan ("Test - Midi plates and HHS.lay", "HxFan", hslTrue);
 namespace _Method { #include "NIST\\Libraries\\NIST_TruSeqNano_Prep.hs_" } 
 namespace _Method { #include "HSLML_STARLib.hsl" } 
 namespace _Method { #include "NIST\\Libraries\\NIST_Device_Controllers.hs_" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable bln_Global_SimulatorMode;
variable SetTempCPAC;
dialog dialogHandle1;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
NIST_TRUSEQNANO_PREP::_InitLibrary();
NIST_DEVICE_CONTROLLERS::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "d377115b_e1a0_4094_903d44e2b9027536" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
bln_Global_SimulatorMode = HSLML_STAR::IsSimulatorMode(ML_STAR);
// }} ""
// {{ 2 1 0 "4d25733e_54c2_47ce_896bdd564d8829dd" "ML_STAR:{1C0C0CB0-7C87-11D3-AD83-0004ACB1DCB2}"
{
	variable arrRetValues[];
	arrRetValues = ML_STAR._1C0C0CB0_7C87_11D3_AD83_0004ACB1DCB2("4d25733e_54c2_47ce_896bdd564d8829dd"); // Initialize
}
// }} ""
// {{ 3 1 0 "af45b4fc_d9a1_4edd_97b8add52c2e13a0" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
SetTempCPAC = 25;
// }} ""
// {{{ 4 1 0 "7841e9dc_1330_49ff_ba732dc7a4faf68c" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
NIST_DEVICE_CONTROLLERS::InitCPAC();
// }} ""
// {{{ 5 1 0 "2d5fd319_3131_49e0_b62675adf3f86c13" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
NIST_DEVICE_CONTROLLERS::SetCPACTemperature(1, SetTempCPAC);
// }} ""
// {{ 6 1 0 "90eb06ae_6139_4489_855db2dc269ba98b" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandle1.SetOutput(Translate("pause"));
dialogHandle1.ShowOutput("", hslOKOnly | hslInformation | hslDefButton1, hslInfinite);
// }} ""
// {{{ 7 1 0 "9456a51f_cdff_4dff_b9e36cf08ff2ba03" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
NIST_DEVICE_CONTROLLERS::TerminateCPAC();
// }} ""
// {{ 2 "AutoExitBlock" ""
NIST_TRUSEQNANO_PREP::_ExitLibrary();
NIST_DEVICE_CONTROLLERS::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2022-09-02 17:30$$checksum=a6dc15ca$$length=087$$