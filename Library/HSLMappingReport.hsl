// ======================================================================
// This is a part of the HSL Mapping Report Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
// ======================================================================
//
// Modification History
// 2004-02-12  ubernhard : Initial file creation.
// 2004-03-03  ubernhard : Declared new function SetElementBarcode().
// 2004-03-09  ubernhard : Declared new function RemoveElement().
//
// ======================================================================

#ifndef __HSLMappingReport_hsl__
#define __HSLMappingReport_hsl__	1

// --------------------------------------------------------------------------------------
// Interface to the HSL Report Mapping Library
// --------------------------------------------------------------------------------------

#ifndef HSL_RUNTIME
namespace HSLMapReport
{

	//***************************************************************************************
	// Library function GenerateMappingFile
	//***************************************************************************************
	//
	// Description:
	//		Generates the mapping file.
	//
	// Parameter:
	// 	target				[in]:	the sequence of underlying physical labware for which data
	//										shall be exported
	// 	filename				[in]: String contains filename and the extension of file type
	// 	path					[in]: String contains the absolut path, where the mapping file
	//										shall be created. If string is empty, the files will be cretaed
	//										in the directory that is listed under the registry key LogFiles
	// 	generatedFiles   [out]:	Array of strings, contains the filenames (with absolute path)
	//										of created mapping files
	//
	//	Return value:
	//		None, function throws an error if failed
	//***************************************************************************************	
	function GenerateMappingFile(
		device& deviceContext,
		sequence& target,
		variable& filename,
		variable& path,
		variable& generatedFiles[]) void {}

	//***************************************************************************************
	// Library function AddFilterSequence
	//***************************************************************************************
	//
	// Description:
	//		Adds the specified filter sequence to the list of filters influencing the report file formatter.
	//
	// Parameter:
	// 	deviceContext		[in] Device context.
	// 	filterSequence		[in] Filter sequence to be added.
	//
	//	Return value:
	//		None, function throws an error if failed
	//***************************************************************************************	
	function AddFilterSequence(
		device& deviceContext,								
		sequence& filterSequence) void {}

	//***************************************************************************************
	// Library function RemoveAllFilterSequences
	//***************************************************************************************
	//
	// Description:
	//		Removes all filter sequences from the list of filters influencing the report file formatter.
	//
	// Parameter:
	//		None
	//
	//	Return value:
	//		None, function throws an error if failed
	//***************************************************************************************	
	function RemoveAllFilterSequences() void {}

	//***************************************************************************************
	// Library function GetListSeparator
	//***************************************************************************************
	//
	// Description:
	//		Returns the list-separator as set in registry HKEY_CURRENT_USER\Control Panel\International\sList
	//		(same list-separator will be used as column-delimiter within the csv-File)
	//
	// Parameter:
	//		None
	//
	//	Return value:
	//		List-separator as string.
	//***************************************************************************************	
	function GetListSeparator() variable {return("");}

	//***************************************************************************************
	// Library function DeleteFile
	//***************************************************************************************
	//
	// Description:
	//		Deletes the specified file.
	//
	// Parameter:
	//		filename				[in]: Contains either a singlename or the absolute name (full qualified filename with path)
	//
	//	Return value:
	//		Nonzero if the file has been deleted successfully, otherwise zero.
	//***************************************************************************************	
	function DeleteFile(variable& filename) variable {return (0);}

	//***************************************************************************************
	// Library function SetElementBarcode
	//***************************************************************************************
	//
	// Description:
	//		Set the element-barcode into the tracker database.
	//    If the element does not exist within the tracker database, 
	//		the element will be added into.
	//
	// Parameter:
	// 	deviceContext		[in] Device context.
	// 	labwareId			[in] String contains the labware identifier as defined within the deck layout.
	//		positionId			[in] String contains the position identifier of associated labware (may be an empty string).
	// 	barcode				[in] String contains the barcode to set.
	//
	//	Remarks:
	//		Empty barcode is not allowed.
	//
	//	Return value:
	//		None, function throws an error if failed
	//***************************************************************************************	
	function SetElementBarcode(
		device& deviceContext,								
		variable& labwareId,
		variable& positionId,
		variable& barcode) void {}

	//***************************************************************************************
	// Library function RemoveElement
	//***************************************************************************************
	//
	// Description:
	//		With this function an element will be removed from the access of sample tracking.
	//		However, the element is still existing on the database but the access to this real
	//		element is no longer allowed.
	//
	// Parameter:
	// 	deviceContext		[in] Device context.
	// 	labwareId			[in] String contains the labware identifier as defined within the deck layout.
	//		positionId			[in] String contains the position identifier of associated labware (may be an empty string).
	//
	//	Return value:
	//		None, function throws an error if failed
	//***************************************************************************************	
	function RemoveElement(
		device& deviceContext,								
		variable& labwareId,
		variable& positionId) void {}
}
#endif

// --------------------------------------------------------------------------------------
// Implementation of the HSL Mapping Report Library
// --------------------------------------------------------------------------------------
#ifdef HSL_RUNTIME
#ifndef __HSLMappingReportImpl_hs___
#include "HSLMappingReportImpl.hs_"
#endif
#endif

#endif
// $$author=wbarmettler$$valid=1$$time=2017-03-09 07:27$$checksum=727a8513$$length=090$$