// This is a part of the HSL KitLot Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
//
// Modification History
// 2002-07-19  jjenal : 'emptyBarcodeJoker' implemented
// 2002-07-19  jjenal : Use the configured 'Phoenix System Directory' as the default
//                      directory for the kit lot file (instead of the Log Files Directory);

#ifndef __HSLKitLotLibImpl_hsl__
#define __HSLKitLotLibImpl_hsl__	1

#include "HSLSynLib.hsl"
#include "HSLStrLib.hsl"


namespace HSLKitLot
{
	#include "HSLStringTableLib.hs_"

	static global variable HSLKitLot_Sync(0);

	// get and set functions for the following globals
	static global variable HSLKitLot_maxRepetition(-1);	// how often tray to get access
	static global string HSLKitLot_KitLotPath(""); 				// empty then logfile path 
	static global string HSLKitLot_KitLotFile("KitLot.xls"); 
	static global string HSLKitLot_KitLotTable("KitLot$"); 
	static global string HSLKitLot_KitLotIdCol("KitLotID");
	static global string HSLKitLot_KitLotDateCol("Date");
	static global string HSLKitLot_KitLotTimeCol("Time");

	static variable timeBetween(0.5); 	// wait seconds before try again
	static variable isInit(hslFalse);

	const string generalDelimiter("\\");
	const string generalJoker("%");
	const string emptyBarcodeJoker("$");



	// --------------------------------------------------------------------------------------
	// Error Ids
	// --------------------------------------------------------------------------------------

	namespace IDE
	{
		static const variable first(0);							// guard
		static const variable noError(first);					// No error.
		static const variable invalidParameter(first + 1);	// The parameter is incorrect.
		static const variable fileNotFound(first + 2);		// Cannot open kitlot file.
		static const variable kitLotIsValid(first + 3);		// Kitlot is valid.
		static const variable kitLotNoJokers(first + 4);	// No kitlotjokers in the barcodemask.
		static const variable kitLotmaskInvalid(first + 5);// Invalid barcodemask or barcode.
		static const variable kitLotNotDefined(first + 6);	// Kitlot not defined in kitlot file.
		static const variable kitLotExpired(first + 7);		// The kitlot is expired.
		static const variable traceSource(first + 8);		// Trace Source "System"
		static const variable checkKitlot(first + 9);		// Check Kitlot
		static const variable last(first + 9);					// guard
	}

	// --------------------------------------------------------------------------------------
	// String Ids
	// --------------------------------------------------------------------------------------

	namespace IDS
	{
		static const variable first(IDE::last + 1);					// guard
		static const variable helpFileName(first + 1);				// help file name
		static const variable last(first + 1);							// guard
	}


	//-----------------------------------------------------------------------------------------------------
	// Private functions
	//-----------------------------------------------------------------------------------------------------

	static function IsString(											// returns true if the variable value is a string
			variable var)														// i: variable
	{
		return(hslString.Compare(GetType(var)) == 0);
	}

	static function IsNumber(											// returns true if the variable value is a number
		variable var)														// i: variable
	{
		return(hslString.Compare(GetType(var)) != 0);
	}


	//-----------------------------------------------------------------------------------------------------
	function initAll()
	//-----------------------------------------------------------------------------------------------------
	{
		if (hslFalse == isInit)
		{
			HSLKitLot::StringTable::Init("HSLKitLotLibStringTable");

			if(0 == HSLKitLot_Sync)
				HSLKitLot_Sync = SynInitializeCriticalSection();
			isInit = hslTrue;
		}
	}

	//-----------------------------------------------------------------------------------------------------

	//-----------------------------------------------------------------------------------------------------
	function OpenFile(
			file &f, 
			variable dataSource, 
			variable mode, 
			variable commandString, 
			variable times, 
			variable time)
	//-----------------------------------------------------------------------------------------------------
	{
		variable repetition(0);
		variable isOpen(hslFalse);	

		onerror goto fileError;
		while (isOpen != hslTrue)
		{
			if ((repetition == times) && (times >= 0)) 
				return(hslFalse);
			repetition = repetition + 1;
			isOpen = hslTrue;
			if (0 == f.Open(dataSource, mode, commandString))
			{
				string msg("");
				msg = dataSource;
				msg = msg + "(";
				msg = msg + GetLineNumber();
				msg = msg + "): ";
				msg = msg +  StringTable::Load(IDE::fileNotFound);
				err.Raise(1,msg);
			}
		}	
		onerror goto 0;
		return(hslTrue);
		fileError:
		{
			if ((repetition < times) || (times < 0)) 
			{
				timer accessTime;
				accessTime.SetTimer(time);
				accessTime.WaitTimer( hslFalse );
			}
			isOpen = hslFalse;
			resume next;
		}
	}

	//-----------------------------------------------------------------------------------------------------

	//-----------------------------------------------------------------------------------------------------
	function getJokers()
	//-----------------------------------------------------------------------------------------------------
	// The string of all jokers is read and returned
	//-----------------------------------------------------------------------------------------------------
	{
		return(GetBarcodeJoker(""));
	}


	//-----------------------------------------------------------------------------------------------------
	function getKitLotJoker()
	//-----------------------------------------------------------------------------------------------------
	// The string of all jokers is read and returned
	//-----------------------------------------------------------------------------------------------------
	{
		return(GetBarcodeJoker("KitLot"));
	}


	//-----------------------------------------------------------------------------------------------------
	function getCountOfChar(string mask, variable &start)
	//-----------------------------------------------------------------------------------------------------
	// The given mask is parsed from start (base = 0) until a general joker '%' is found or the end of mask 
	// is reached.
	// The number of characters for the corresponding barcode is calculated and returned.
	//
	// return 0...n	Length of barcode part
	//-----------------------------------------------------------------------------------------------------
	{
		variable count(0);
		while (start < mask.GetLength( ))
		{
			if (0 == generalDelimiter.Compare(mask.Mid(start,1)))
				start++;
			else
				if(0 == generalJoker.Compare(mask.Mid(start,1)))
					return(count);
			count++;
			start++;
		}
		return(count);
	}

	//-----------------------------------------------------------------------------------------------------
	function splitGeneralJoker(string &mask, string &barcode, string &jokerPart)
	//-----------------------------------------------------------------------------------------------------
	// The general Joker '%' is removed from mask (in/out) if is exist
	// From the barcode (in/out) the general joker part is removed
	// The jokerPart out of the barcode is also returned (out)
	// 
	// return	 0 OK
	//				-1	Error
	//-----------------------------------------------------------------------------------------------------
	{
		variable frontCount(0);
		variable backCount(0);
		string tempMask("");
		string tempBarcode("");
		variable start(0);

		jokerPart = "";
		if (0 != mask.GetLength())
		{
			frontCount = getCountOfChar(mask,start);

			if(frontCount > barcode.GetLength())	
				return(-1);

			if(start == mask.GetLength())	
				return(0);
			
			tempMask 	= mask.Left(start);
			tempMask 	= tempMask + mask.Right(mask.GetLength() - start - 1); // minus '%' -> (- 1)
			tempBarcode = barcode.Left(frontCount);

			start = start + 1;
			backCount = getCountOfChar(mask,start);

			if(start < mask.GetLength())	
				return(-1);
			if(backCount > barcode.GetLength())	
				return(-1);
			tempBarcode = tempBarcode + barcode.Right(backCount);
			if(frontCount+backCount > barcode.GetLength()) 	
				return(-1);

			jokerPart= barcode.Mid(frontCount,barcode.GetLength()-frontCount-backCount);			
			mask = tempMask;
			barcode = tempBarcode;
		}
		return(0);
	}

//-----------------------------------------------------------------------------------------------------
// Public functions 
//-----------------------------------------------------------------------------------------------------

	//-----------------------------------------------------------------------------------------------------
	function SplitBarcode(variable maskIn, variable jokerIn, variable barcodeIn)
	//-----------------------------------------------------------------------------------------------------
	{
		variable posInMask(0);
		variable posInBarcode(0);
		string jokerPart("");
		string retBarcode("");

		string mask("");
		string joker("");
		string barcode("");

		if (hslTrue != IsString(maskIn))
			err.Raise(1, StringTable::Load(IDE::invalidParameter));
		if (hslTrue != IsString(barcodeIn))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));
		if (hslTrue != IsString(jokerIn))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));

		mask 		= maskIn;
		joker 	= jokerIn;
		barcode	= barcodeIn;

		initAll();
		if (0 != splitGeneralJoker(mask, barcode, jokerPart))
			err.Raise(1,	StringTable::Load(IDE::invalidParameter));

		if (0 == generalJoker.Compare(joker))
			return(jokerPart);
		
		while (posInMask < mask.GetLength( ))
		{
			if (0 == generalDelimiter.Compare(mask.Mid(posInMask,1)))
				posInMask++;
			else
				if (0 == joker.Compare(mask.Mid(posInMask,1)))
					retBarcode = retBarcode + barcode.Mid(posInBarcode,1);
			posInBarcode++;
			posInMask++;
		}
		return(retBarcode);
	}


	//-----------------------------------------------------------------------------------------------------
	function CheckBarcode(variable maskIn, variable barcodeIn)
	//-----------------------------------------------------------------------------------------------------
	{
		string jokerPart("");
		string jokers("");
		variable i(0);
		variable posInMask(0);
		variable posInBarcode(0);
		variable check(1);

		string mask("");
		string barcode("");

		if (hslTrue != IsString(maskIn))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));
		if (hslTrue != IsString(barcodeIn))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));

		mask 		= maskIn;
		barcode	= barcodeIn;

		initAll();

		// Empty barcode mask is invalid
		// (use barcode mask "$" if an empty barcode is requested)
		if (0 == mask.GetLength())
		{
			// Not ok. Barcode mask MUST NOT be empty
			return(-1);
		}

		// Check if the barcode has to be empty (barcode mask = "$")
		if (    (1 == mask.GetLength())
			  && (0 == emptyBarcodeJoker.Compare(mask.Left(1))) )
		{
			// Check if barcode is empty
			if (0 == barcode.GetLength())
			{
				// Ok. Barcode has to be empty and is empty
				return(0);
			}
			else
			{
				// Not ok. Barcode has to be empty but isn't empty
				return(-1);
			}
		}

		if (0 != splitGeneralJoker(mask, barcode, jokerPart))
			return(-1);

		jokers = getJokers();

		while (posInMask < mask.GetLength( ))
		{
			check = 1;
			if (0 == generalDelimiter.Compare(mask.Mid(posInMask,1)))
				posInMask++;
			else
			{
				// The 'emptyBarcodeJoker' is only allowed as the first and only character in the barcode mask
				if (0 == emptyBarcodeJoker.Compare(mask.Mid(posInMask,1)) )
				{
					return(-1);
				}

				for (i=0; (i<jokers.GetLength()) && (check == 1); i++)
					if (mask.Mid(posInMask,1) == jokers.Mid(i,1))
						check = 0;
			}
			if ((check == 1) && (barcode.Mid(posInBarcode,1) != mask.Mid(posInMask,1)))
				return(-1);
			posInBarcode++;
			posInMask++;
		}

		if (posInBarcode < barcode.GetLength())
			return(-1);
		return(0);
	}


	//-----------------------------------------------------------------------------------------------------
	function CheckKitlot(variable maskIn, variable barcodeIn)
	//-----------------------------------------------------------------------------------------------------
	{

		string kitLot("");
		string lotFile("");

		string sql("");
		string kID("");
		string kDate("");
		string kTime("");

		file fKitLot;

		string mask("");
		string barcode("");

		string traceSource("");
		string traceAction("");
		string expDate;
		string expTime;

		traceSource = StringTable::Load(IDE::traceSource);		// "SYSTEM"
		traceAction = StringTable::Load(IDE::checkKitlot);		// "Check Kitlot"

		if (hslTrue != IsString(maskIn))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));
		if (hslTrue != IsString(barcodeIn))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));

		if ( 0 != CheckBarcode(maskIn, barcodeIn))
		{
			expDate = StringTable::Load(IDE::kitLotmaskInvalid);
			StrReplace(expDate, "%s1", maskIn );			// kitlotname
			StrReplace(expDate, "%s2", barcodeIn );		// kitlotname
			FormatTrace(traceSource, traceAction, 4 /*TraceStatus::progress*/,expDate);
			return(-2);
		}

		mask 		= maskIn;
		barcode	= barcodeIn;

		initAll();

		onerror goto kitlot_error;
		// split kitlot out of barcode
		kitLot = SplitBarcode(mask, getKitLotJoker(), barcode);
		onerror goto 0;

		if (0 == kitLot.GetLength())
		{
			expDate = StringTable::Load(IDE::kitLotNoJokers);
			StrReplace(expDate, "%s1", maskIn );			// kitlotname
			FormatTrace(traceSource, traceAction, 4 /*TraceStatus::progress*/,expDate);
			return(-1);
		}
		
		// load kitlot data from kitlot file
		if (0 == HSLKitLot_KitLotPath.GetLength( ))
			lotFile = GetSystemPath();
		else
			lotFile = HSLKitLot_KitLotPath;

		

		lotFile = lotFile + "\\";
		lotFile = lotFile + HSLKitLot_KitLotFile;
		lotFile = lotFile + " ";
		lotFile = lotFile + HSLKitLot_KitLotTable;
		
		sql = sql + "SELECT * FROM [";
		sql = sql + HSLKitLot_KitLotTable;
		sql = sql + "] WHERE [";
		sql = sql + HSLKitLot_KitLotIdCol;
		sql = sql + "] LIKE '"; 
		sql = sql + kitLot;
		sql = sql + "'";
		fKitLot.AddField( HSLKitLot_KitLotIdCol, kID, hslString);
		fKitLot.AddField( HSLKitLot_KitLotDateCol, kDate, hslString);
		fKitLot.AddField( HSLKitLot_KitLotTimeCol, kTime, hslString);

	
		onerror goto file_error;
		if (OpenFile(fKitLot, lotFile, hslRead, sql, HSLKitLot_maxRepetition , timeBetween) == hslFalse)
			return(-5);

		while (!fKitLot.Eof( ))
		{
			fKitLot.ReadRecord( );
			if (0 == kID.Compare(kitLot))
			{
				fKitLot.Close();
				if (0 < kDate.Compare(GetDate("%Y-%m-%d")))
				{
					expDate = StringTable::Load(IDE::kitLotIsValid);
					StrReplace(expDate, "%s1", kID );			// kitlotname
					StrReplace(expDate, "%s2", kDate );			// expiryDate
					StrReplace(expDate, "%s3", kTime );			// expiryTime 
					FormatTrace(traceSource, traceAction, 4 /*TraceStatus::progress*/,expDate);
					return(0);
				}
				if (0 > kDate.Compare(GetDate("%Y-%m-%d")))
				{
					expDate = StringTable::Load(IDE::kitLotExpired);
					StrReplace(expDate, "%s1", kID );			// kitlotname
					StrReplace(expDate, "%s2", kDate );			// expiryDate
					StrReplace(expDate, "%s3", kTime );			// expiryTime 
					FormatTrace(traceSource, traceAction, 4 /*TraceStatus::progress*/,expDate);
					return(-4);
				}
				if (0 <= kTime.Compare(GetTime("%H:%M:%S")))
				{
					expDate = StringTable::Load(IDE::kitLotIsValid);
					StrReplace(expDate, "%s1", kID );			// kitlotname
					StrReplace(expDate, "%s2", kDate );			// expiryDate
					StrReplace(expDate, "%s3", kTime );			// expiryTime 
					FormatTrace(traceSource, traceAction, 4 /*TraceStatus::progress*/,expDate);
					return(0);
				}
				else
				{
					expDate = StringTable::Load(IDE::kitLotExpired);
					StrReplace(expDate, "%s1", kID );			// kitlotname
					StrReplace(expDate, "%s2", kDate );			// expiryDate
					StrReplace(expDate, "%s3", kTime );			// expiryTime 
					FormatTrace(traceSource, traceAction, 4 /*TraceStatus::progress*/,expDate);
					return(-4);
				}
			}
		}
		fKitLot.Close();
		{
			expDate = StringTable::Load(IDE::kitLotNotDefined);
			StrReplace(expDate, "%s1", kitLot );			// kitlotname
			FormatTrace(traceSource, traceAction, 4 /*TraceStatus::progress*/,expDate);
			return(-3);
		}

		// error handling
		kitlot_error:
		{
			expDate = StringTable::Load(IDE::kitLotmaskInvalid);
			StrReplace(expDate, "%s1", maskIn );			// kitlotname
			StrReplace(expDate, "%s2", barcodeIn );			// kitlotname
			FormatTrace(traceSource, traceAction, 4 /*TraceStatus::progress*/,expDate);
			return(-2);
		}
		file_error:
		{
			return(-5);
		}
	}


	//-----------------------------------------------------------------------------------------------------
	function GetKitlotValue(variable maskIn, variable barcodeIn, variable valueNameIn, variable &valueOut)
	//-----------------------------------------------------------------------------------------------------
	{

		string kitLot("");
		string lotFile("");

		string sql("");
		string kValue("");
		string kID("");

		file fKitLot;

		string mask("");
		string barcode("");

		if (hslTrue != IsString(maskIn))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));
		if (hslTrue != IsString(barcodeIn))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));
		if (hslTrue != IsString(valueNameIn))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));
		if (hslTrue != IsString(valueOut))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));

		mask 		= maskIn;
		barcode	= barcodeIn;


		initAll();
		valueOut = "";
		onerror goto kitlot_error;
		// split kitlot out of barcode
		kitLot = SplitBarcode(mask, getKitLotJoker(), barcode);
		onerror goto 0;

		if (0 == kitLot.GetLength())
			return(-1);
		
		// load kitlot data from kitlot file
		if (0 == HSLKitLot_KitLotPath.GetLength( ))
			lotFile = GetSystemPath();
		else
			lotFile = HSLKitLot_KitLotPath;

		lotFile = lotFile + "\\";
		lotFile = lotFile + HSLKitLot_KitLotFile;
		lotFile = lotFile + " ";
		lotFile = lotFile + HSLKitLot_KitLotTable;
		
		sql = sql + "SELECT * FROM [";
		sql = sql + HSLKitLot_KitLotTable;
		sql = sql + "] WHERE [";
		sql = sql + HSLKitLot_KitLotIdCol;
		sql = sql + "] LIKE '"; 
		sql = sql + kitLot;
		sql = sql + "'";
		fKitLot.AddField( HSLKitLot_KitLotIdCol, kID, hslString);
		fKitLot.AddField( valueNameIn, kValue, hslString);

		if (OpenFile(fKitLot, lotFile, hslRead, sql, HSLKitLot_maxRepetition , timeBetween) == hslFalse)
			return(-5);

		onerror goto file_error;
		while (!fKitLot.Eof( ))
		{
			fKitLot.ReadRecord( );
			if (0 == kID.Compare(kitLot))
			{
				fKitLot.Close();
				valueOut = kValue;
				return(0);
			}
		}
		fKitLot.Close();
		return(-3);

		// error handling
		kitlot_error:
		{
			return(-2);
		}
		file_error:
		{
			return(-6);
		}
	}

	//-----------------------------------------------------------------------------------------------------
	function SetAccessRepetition(variable repetition)
	//-----------------------------------------------------------------------------------------------------
	{
		initAll();
		if (hslTrue != IsNumber(repetition))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));
		SynEnterCriticalSection(HSLKitLot_Sync);
		if (repetition < 0)
			HSLKitLot_maxRepetition	= -1;
		else	
			HSLKitLot_maxRepetition	= repetition;
		SynLeaveCriticalSection(HSLKitLot_Sync);
	}

	//-----------------------------------------------------------------------------------------------------
	function SetKitlotPath(variable path)
	//-----------------------------------------------------------------------------------------------------
	{
		initAll();
		if (hslTrue != IsString(path))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));
		SynEnterCriticalSection(HSLKitLot_Sync);
		HSLKitLot_KitLotPath	= path;
		SynLeaveCriticalSection(HSLKitLot_Sync);
	}

	//-----------------------------------------------------------------------------------------------------
	function SetKitlotFile(variable name)
	//-----------------------------------------------------------------------------------------------------
	{
		initAll();
		if (hslTrue != IsString(name))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));
		SynEnterCriticalSection(HSLKitLot_Sync);
		HSLKitLot_KitLotFile	= name;
		SynLeaveCriticalSection(HSLKitLot_Sync);
	}

	//-----------------------------------------------------------------------------------------------------
	function SetTableName(variable name)
	//-----------------------------------------------------------------------------------------------------
	{
		initAll();
		if (hslTrue != IsString(name))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));
		SynEnterCriticalSection(HSLKitLot_Sync);
		HSLKitLot_KitLotTable = name; 
		SynLeaveCriticalSection(HSLKitLot_Sync);
	}

	//-----------------------------------------------------------------------------------------------------
	function SetIdColName(variable name)
	//-----------------------------------------------------------------------------------------------------
	{
		initAll();
		if (hslTrue != IsString(name))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));
		SynEnterCriticalSection(HSLKitLot_Sync);
		HSLKitLot_KitLotIdCol = name;
		SynLeaveCriticalSection(HSLKitLot_Sync);
	}

	//-----------------------------------------------------------------------------------------------------
	function SetDateColName(variable name)
	//-----------------------------------------------------------------------------------------------------
	{
		initAll();
		if (hslTrue != IsString(name))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));

		SynEnterCriticalSection(HSLKitLot_Sync);
		HSLKitLot_KitLotDateCol = name;
		SynLeaveCriticalSection(HSLKitLot_Sync);
	}
		
	//-----------------------------------------------------------------------------------------------------
	function SetTimeColName(variable name)
	//-----------------------------------------------------------------------------------------------------
	{
		initAll();
		if (hslTrue != IsString(name))
			err.Raise(1,StringTable::Load(IDE::invalidParameter));

		SynEnterCriticalSection(HSLKitLot_Sync);
		HSLKitLot_KitLotTimeCol = name;
		SynLeaveCriticalSection(HSLKitLot_Sync);
	}


} // end of namespace HSLKitLot
#endif
// $$author=wbarmettler$$valid=1$$time=2017-03-14 13:14$$checksum=edc8381d$$length=088$$