// This is a part of the HSL Object Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
//
// Modification History
// 2002-08-23  bandenmatten : Initial file creation.
// 2002-12-05  bandenmatten : Specified return values for exported library functions.
// 2003-03-24  bandenmatten : Added functions Object::EnumNext() and Object::EnumReset().
// 2007-07-02  bandenmatten : Removed define _WINNT.
// 2007-10-08  bandenmatten : Added AddCheckSum() line to function Object::EmitCode() (SCR#1328).


#ifndef __HSLObjLib_hsl__
#define __HSLObjLib_hsl__	1

// Interface to Object Library 
#ifndef HSL_RUNTIME
namespace Object
{
	function CreateObject(variable& programId) variable																					{return(0);}
	function ReleaseObject(variable objectId) variable																						{return(0);}
	function PropertyGet(variable objectId, variable& propertyName) variable														{return(0);}
	function PropertySet(variable objectId, variable& propertyName, variable& propertyValue) void							{return;}
	function Invoke0(variable objectId, variable& functionName) variable																{return(0);}
	function Invoke1(variable objectId, variable& functionName, variable& parameter1) variable								{return(0);}
	function Invoke2(variable objectId, variable& functionName, variable& parameter1, variable& parameter2) variable	{return(0);}
	function Invoke3(variable objectId, variable& functionName, variable& parameter1, variable& parameter2, variable& parameter3) variable		{return(0);}
	function Invoke4(variable objectId, variable& functionName, variable& parameter1, variable& parameter2, variable& parameter3, variable& parameter4) variable		{return(0);}
	function Invoke5(variable objectId, variable& functionName, variable& parameter1, variable& parameter2, variable& parameter3, variable& parameter4, variable& parameter5) variable		{return(0);}
	function SetResultObject(variable objectId) void																						{return;}
	function ResetResultObject() void																											{return;}
	function SetNumberOfParameters(variable numberOfParameters) void																	{return;}
	function GetNumberOfParameters() variable																									{return(0);}
	function AddParameter(variable& parameter) void																							{return;}
	function SetParameterAt(variable index, variable& parameter) void																	{return;}
	function GetParameterAt(variable index) variable																						{return(0);}
	function RemoveAllParameters() void																											{return;}
	function Invoke(variable objectId, variable& functionName) variable																{return(0);}
	function IsNull(variable objectId) variable																								{return(0);}
	function EnumNext(variable objectId, variable& nextItem) variable																	{return(0);}
	function EnumReset(variable objectId) variable																							{return(0);}
}
#endif

// Implementation of Object Library 
#ifdef HSL_RUNTIME

#ifndef __HSLSynLib_hsl__
#include "HSLSynLib.hsl"
#endif

namespace Object
{
	// Debugging
	//#define _DEBUG		1								// specifies the debug version of the Object Library 

	static variable cmdPrompt("cmd.exe");

	// Data 
	static global object objects[];					// place to create objects 
	static global variable freeList[];				// place to store state (free/occupied) of elements in objects collection
	static variable parameters[];						// place to hold parameters
	static variable resultObjectId(0);				// result object id
	static global variable cs(0);						// critical section
	static variable initializedLib(hslFalse);		// initialization state of the Object Library 
	static const variable maxNumberOfParams(20);	// maximum number of parametres 

	namespace Context
	{
		static const variable dispatchMethod(0);			// the member is invoked as a method
		static const variable dispatchPropertyGet(1);	// the member is retrieved as a property or data member
		static const variable dispatchPropertySet(2);	// the member is changed as a property or data member
	}

	// Functions
	static function InitObjectLibrary()
	{
		// initialize the Object Library once only
		if (!initializedLib)
		{
			//StringTable::Init("HSLObjLib");
			#ifdef _DEBUG
			//StringTable::Dump();
			#endif
			if (0 == cs)
				cs = SynInitializeCriticalSection();
			initializedLib = hslTrue;
		}
		return(initializedLib);
	}

	namespace Error
	{
		static function RaiseLast()
		{
			// re-raise error
			err.Raise();
		}
	}

	function CreateObject(variable& programId) variable
	{
		variable index;
		variable size;
		variable objectId(-1);							// object id (1-based)

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// find a free object
		size = freeList.GetSize();
		for (index = 0; index < size; index++)
		{
			if (0 == freeList.ElementAt(index))
			{
				// found a free object,
				// set 1-based object id
				objectId = index + 1;
				break;
			}
		}

		if (objectId < 0)
		{
			// didn't find a free object,
			// create new one
			objectId = objects.GetSize() + 1;
			objects.SetSize(objectId);
			freeList.SetSize(objectId);
		}

		// create object
		if ("" != programId)
			objects[objectId - 1].CreateObject(programId);

		// update free list
		freeList.SetAt(objectId - 1, 1);

		// release access to global data
		SynLeaveCriticalSection(cs);

		// return 1-based object id
		return(objectId);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function ReleaseObject(variable objectId) variable
	{

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// release object
		objects[objectId - 1].ReleaseObject();

		// update free list
		freeList.SetAt(objectId - 1, 0);

		// release access to global data
		SynLeaveCriticalSection(cs);

		return(hslTrue);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	static function EmitCode(				// emits and parses invoke function 
		variable& functionName,				// i: name of function to be invoked (string)
		variable context,						// i: context of the invoke call
		variable numberOfFuncParams,		// i: number of params to be emitted for the invoked function (integer)
		variable numberOfInvokeParams)	// i: number of params to be emitted for the invoke function (integer)
	{
		file f;
		variable tmpFile(GetLogFilesPath() + "\\__Invoke__.txt");
		string tmpFileStr(tmpFile);
		variable index;
		variable code;

		// switch over context
		if (Context::dispatchMethod == context)
		{
			code = "\nfunction __Invoke__(variable objId, object& objs[]";
			for (index = 1; index <= numberOfInvokeParams; index++)
			{
				code = code + ", variable& param" + IStr(index);
			}
			code = code + ")\n{\n\tobject o;\n\to = objs.ElementAt(objId - 1);\n\treturn(o." + functionName + "(";
			for (index = 1; index <= numberOfFuncParams; index++)
			{
				code = code + "param" + IStr(index);
				if (index < numberOfFuncParams)
					code = code + ", ";
			}
			code = code + "));\n}\n";
		}
		if (Context::dispatchPropertyGet == context)
		{
			code = "\nfunction __Invoke__(variable objId, object& objs[]";
			if (0 == resultObjectId)
			{
				code = code + ", variable& param1";
			}
			else
			{
				code = code + ", object& param1";
			}
			code = code + ")\n{\n\tobject o;\n\to = objs.ElementAt(objId - 1);\n\tparam1 = o." + functionName + ";\n\treturn(hslTrue);\n}\n";
		}
		if (Context::dispatchPropertySet == context)
		{
			code = "\nfunction __Invoke__(variable objId, object& objs[], variable& param1)\n{\n\tobject o;\n\to = objs.ElementAt(objId - 1);\n\to." + functionName + " = param1;\n\treturn(hslTrue);\n}\n";
		}

		f.SetDelimiter(hslAsciiText);
		f.AddField(1, code, hslString);
		f.Open(tmpFile, hslWrite);
		f.WriteRecord();
		f.Close();
		//>> 20071008
		AddCheckSum(tmpFileStr, "//", hslTrue);
		//<< 20071008
		<< tmpFileStr;
	}

	static function DeleteCode()
	{
		variable tmpFile(GetLogFilesPath() + "\\__Invoke__.txt");
		Shell(cmdPrompt + " /c del \"" + tmpFile + "\"", hslHide, hslSynchronous);
	}

	static function __Invoke__(variable objId, object& objs[] /*, ... */);

	function PropertyGet(variable objectId, variable& propertyName) variable
	{
		object resultObj;
		variable resultVar(0);

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// emit code
		EmitCode(propertyName, Context::dispatchPropertyGet, 0, 1);

		// get property
		if (0 == resultObjectId)
		{
			__Invoke__(objectId, objects, resultVar);
		}
		else
		{
			__Invoke__(objectId, objects, resultObj);
			objects.SetAt(resultObjectId - 1, resultObj);
		}

		// delete code
		DeleteCode();

		// release access to global data
		SynLeaveCriticalSection(cs);

		if (0 == resultObjectId)
			return(resultVar);
		else
			return(hslTrue);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function PropertySet(variable objectId, variable& propertyName, variable& propertyValue) void
	{
		object propertyObj;

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// emit code
		EmitCode(propertyName, Context::dispatchPropertySet, 0, 1);

		// set property
		__Invoke__(objectId, objects, propertyValue);

		// delete code
		DeleteCode();

		// release access to global data
		SynLeaveCriticalSection(cs);

		return;

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function Invoke0(variable objectId, variable& functionName) variable
	{
		variable result(0);

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// emit code
		EmitCode(functionName, Context::dispatchMethod, 0, 0);

		// invoke function
		if (0 == resultObjectId)
			result = __Invoke__(objectId, objects);
		else
			objects.SetAt(resultObjectId - 1, __Invoke__(objectId, objects));

		// delete code
		DeleteCode();

		// release access to global data
		SynLeaveCriticalSection(cs);

		return(result);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function Invoke1(variable objectId, variable& functionName, variable& parameter1) variable
	{
		variable result(0);

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// emit code
		EmitCode(functionName, Context::dispatchMethod, 1, 1);

		// invoke function
		if (0 == resultObjectId)
			result = __Invoke__(objectId, objects, parameter1);
		else
			objects.SetAt(resultObjectId - 1, __Invoke__(objectId, objects, parameter1));

		// delete code
		DeleteCode();

		// release access to global data
		SynLeaveCriticalSection(cs);

		return(result);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function Invoke2(variable objectId, variable& functionName, variable& parameter1, variable& parameter2) variable
	{
		variable result(0);

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// emit code
		EmitCode(functionName, Context::dispatchMethod, 2, 2);

		// invoke function
		if (0 == resultObjectId)
			result = __Invoke__(objectId, objects, parameter1, parameter2);
		else
			objects.SetAt(resultObjectId - 1, __Invoke__(objectId, objects, parameter1, parameter2));

		// delete code
		DeleteCode();

		// release access to global data
		SynLeaveCriticalSection(cs);

		return(result);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function Invoke3(variable objectId, variable& functionName, variable& parameter1, variable& parameter2, variable& parameter3) variable
	{
		variable result(0);

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// emit code
		EmitCode(functionName, Context::dispatchMethod, 3, 3);

		// invoke function
		if (0 == resultObjectId)
			result = __Invoke__(objectId, objects, parameter1, parameter2, parameter3);
		else
			objects.SetAt(resultObjectId - 1, __Invoke__(objectId, objects, parameter1, parameter2, parameter3));

		// delete code
		DeleteCode();

		// release access to global data
		SynLeaveCriticalSection(cs);

		return(result);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function Invoke4(variable objectId, variable& functionName, variable& parameter1, variable& parameter2, variable& parameter3, variable& parameter4) variable
	{
		variable result(0);

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// emit code
		EmitCode(functionName, Context::dispatchMethod, 4, 4);

		// invoke function
		if (0 == resultObjectId)
			result = __Invoke__(objectId, objects, parameter1, parameter2, parameter3, parameter4);
		else
			objects.SetAt(resultObjectId - 1, __Invoke__(objectId, objects, parameter1, parameter2, parameter3, parameter4));

		// delete code
		DeleteCode();

		// release access to global data
		SynLeaveCriticalSection(cs);

		return(result);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function Invoke5(variable objectId, variable& functionName, variable& parameter1, variable& parameter2, variable& parameter3, variable& parameter4, variable& parameter5) variable
	{
		variable result(0);

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// emit code
		EmitCode(functionName, Context::dispatchMethod, 5, 5);

		// invoke function
		if (0 == resultObjectId)
			result = __Invoke__(objectId, objects, parameter1, parameter2, parameter3, parameter4, parameter5);
		else
			objects.SetAt(resultObjectId - 1, __Invoke__(objectId, objects, parameter1, parameter2, parameter3, parameter4, parameter5));

		// delete code
		DeleteCode();

		// release access to global data
		SynLeaveCriticalSection(cs);

		return(result);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function SetResultObject(variable objectId) void
	{
		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// set result object id
		resultObjectId = objectId;

		// release access to global data
		SynLeaveCriticalSection(cs);

		return;

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function ResetResultObject() void
	{
		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// set result object id
		resultObjectId = 0;

		// release access to global data
		SynLeaveCriticalSection(cs);

		return;

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function SetNumberOfParameters(variable numberOfParameters) void
	{
		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		parameters.SetSize(numberOfParameters);

		// release access to global data
		SynLeaveCriticalSection(cs);

		return;

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function GetNumberOfParameters() variable
	{
		variable numberOfParameters;

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		numberOfParameters = parameters.GetSize();

		// release access to global data
		SynLeaveCriticalSection(cs);

		return(numberOfParameters);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function AddParameter(variable& parameter) void
	{
		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// add parameter
		parameters.AddAsLast(parameter);

		// release access to global data
		SynLeaveCriticalSection(cs);

		return;

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function SetParameterAt(variable index, variable& parameter) void
	{
		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// set parameter
		parameters.SetAt(index, parameter);

		// release access to global data
		SynLeaveCriticalSection(cs);

		return;

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function GetParameterAt(variable index) variable
	{
		variable parameter;

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// set parameter
		parameter = parameters.ElementAt(index);

		// release access to global data
		SynLeaveCriticalSection(cs);

		return(parameter);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function RemoveAllParameters() void
	{

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// remove parameters
		parameters.SetSize(0);

		// release access to global data
		SynLeaveCriticalSection(cs);

		return;

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function Invoke(variable objectId, variable& functionName) variable
	{
		variable index;
		variable numberOfFuncParams;
		variable params[](maxNumberOfParams + 1);
		variable result(0);

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// copy parameters
		numberOfFuncParams = parameters.GetSize();
		for (index = 0; index < numberOfFuncParams; index++)
			params.SetAt(index + 1, parameters.ElementAt(index));

		// emit code
		EmitCode(functionName, Context::dispatchMethod, numberOfFuncParams, maxNumberOfParams);

		// invoke function
		if (0 == resultObjectId)
			result = __Invoke__(objectId, objects, params.ElementAt(1), params.ElementAt(2), params.ElementAt(3), params.ElementAt(4), params.ElementAt(5), params.ElementAt(6), params.ElementAt(7), params.ElementAt(8), params.ElementAt(9), params.ElementAt(10),
									  params.ElementAt(11), params.ElementAt(12), params.ElementAt(13), params.ElementAt(14), params.ElementAt(15), params.ElementAt(16), params.ElementAt(17), params.ElementAt(18), params.ElementAt(19), params.ElementAt(20));
		else
			objects.SetAt(resultObjectId - 1, __Invoke__(objectId, objects, params.ElementAt(1), params.ElementAt(2), params.ElementAt(3), params.ElementAt(4), params.ElementAt(5), params.ElementAt(6), params.ElementAt(7), params.ElementAt(8), params.ElementAt(9), params.ElementAt(10),
																  params.ElementAt(11), params.ElementAt(12), params.ElementAt(13), params.ElementAt(14), params.ElementAt(15), params.ElementAt(16), params.ElementAt(17), params.ElementAt(18), params.ElementAt(19), params.ElementAt(20)));

		// delete code
		DeleteCode();

		// update parameters
		for (index = 0; index < numberOfFuncParams; index++)
			parameters.SetAt(index, params.ElementAt(index + 1));

		// release access to global data
		SynLeaveCriticalSection(cs);

		return(result);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function IsNull(variable objectId) variable
	{
		variable isNull(hslTrue);

		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// test for null
		isNull = objects[objectId - 1].IsNull();

		// release access to global data
		SynLeaveCriticalSection(cs);

		return(isNull);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function EnumNext(variable objectId, variable& nextItem) variable
	{
		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// enumearte next item
		if (0 == resultObjectId)
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			return(objects[objectId - 1].EnumNext(nextItem));
		}
		else
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			return(objects[objectId - 1].EnumNext(objects.ElementAt(resultObjectId - 1)));
		}
		return(0);

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

	function EnumReset(variable objectId) void
	{
		// initialize the Object Library 
		InitObjectLibrary();

		// activate error handler
		onerror goto Unexpected;

		// get access to global data
		SynEnterCriticalSection(cs);

		// enumearte next item
		objects[objectId - 1].EnumReset();

		// release access to global data
		SynLeaveCriticalSection(cs);

		return;

		Unexpected:
		{
			// release access to global data
			SynLeaveCriticalSection(cs);
			Error::RaiseLast();
		}
	}

}
#endif

#endif
// $$author=wbarmettler$$valid=1$$time=2017-03-09 07:27$$checksum=da4592fd$$length=090$$