// This is a part of the Vector Database Tracking Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
//
// Modification History
// 2006-05-11  bandenmatten : Initial file creation.
// 2006-06-20  bandenmatten : Added function GetDeckID2.
// 2006-06-29  bandenmatten : Updated functions corresponding to changes of IHxVectorDbTracking.
// 2006-09-15  bandenmatten : Renamed LabwareID to ElementID (labwareID to elementID).
// 2006-09-20  bandenmatten : Added static function TrackingEnabled().
// 2006-10-02  ubernhard	 : - Divided Library into different namespaces to have a better overview within Method Editor
//										- Added several new functions
// 2006-05-22  mhosang      : added new functions
//                            - IsLabwareLoadedByLabwareIdPositionId()
//									   - IsBarcodeLoadedEx()
// 2007-08-17  ubernhard	 : added new function
//                            - StartExperimentTrackingByElementIDs()
// 2007-09-27  ubernhard	 : added new functions
//                            - AddExperimentSourceLabware(), GetExperimentSourceLabwareEx(),
//										  CheckBarcode(), CheckBarcodeEx() and LoadLabware()
// 2007-10-17  mhosang      : replaced functions CheckBarcode() & CheckBarcodeEx() with function
//                            CheckBarcodeByLabwareIdPositionId()

#ifndef __HSLVectorDbTracking_hsl__
#define __HSLVectorDbTracking_hsl__	1

// Interface to the Vector Database Tracking Library
#ifndef HSL_RUNTIME

//*****************************************************************************************************************
namespace VectorDb_Deck
//*****************************************************************************************************************
{
	function GetDeckID(
		variable& instrumentName) variable				// [in]: The name of the instrument for which the deck ID has to be retrieved (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the deck ID given an instrument name.
	// 
	// Return:
	// The deck ID for the given instrument (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetDeckID2(
		device& instrument) variable						// [in]: The instrument for which the deck ID has to be retrieved (device)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the deck ID given an instrument.
	// 
	// Return:
	// The deck ID for the given instrument (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}
}

//*****************************************************************************************************************
namespace VectorDb_Run
//*****************************************************************************************************************
{
	function GetRunID() variable
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the run ID of current run.
	// 
	// Return:
	// The run ID of current run (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetRuns(
		variable& runIDs[],									// [in/out] Array to retrieve run ID's (integer)
		variable& methodNames[],							// [in/out] Array to retrieve method names (string)
		variable& runGUIDs[],								// [in/out] Array to retrieve run GUID's (string)
		variable& startTimes[],								// [in/out] Array to retrieve start times (float if namedFormat = VectorDb_DateTimeFormat::Unformatted, otherwise string)
		variable& endTimes[],								// [in/out] Array to retrieve end times (float if namedFormat = VectorDb_DateTimeFormat::Unformatted, otherwise string)
		variable& runStates[],								// [in/out] Array to retrieve run states (integer)
		variable namedFormat) variable					// [in]: Numeric value that indicates the date/time format used (integer, one of VectorDb_DateTimeFormat).
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves detailed informations about all runs carried out so far.
	// 
	// Return:
	// The number of runs carried out (integer). 
	//
	// Note:
	//	Function throws an error if the databse is not the enhanced Vector database.
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}
}

//*****************************************************************************************************************
namespace VectorDb_Labware
//*****************************************************************************************************************
{
	function GetAllLabwareOnDeck(
		variable deckID,										// [in]: The ID of the deck for which the labware has to be retrieved (integer)
		variable labwareLevel,								// [in]: The labware level for which the labware has to be retrieved (integer, one of VectorDb_LabwareLevel)
		variable& elementIDs[],								// [in/out] Array to retrieve element ID's (integer)
		variable& parentElementIDs[],						// [in/out] Array to retrieve parent element ID's (integer)
		variable& labwareLevels[],							// [in/out]	Array to retrieve labware levels (integer)
		variable& labwareNames[],							// [in/out] Array to retrieve labware names (string)	
		variable& labwareBarcodes[]) variable			// [in/out] Array to retrieve labware barcodes (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves all loaded labware given a deck ID filtered by given labware level.
	//
	// Return:
	// The number of labware added to the output parameters (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function LoadLabware(
		device& instrument,									// [in]: used instrument (device)
		variable& labwareId,									// [in]: Labware id (string)
		variable& positionId) variable					// [in]: Position id (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Loads the given labware within the Vector Database.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function IsLabwareLoaded(
   	variable& labwareAccessName) variable			// [in]: Labware access name, e.g. ML_STAR\TemplateA\Rack1\1 (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Returns the ID of the labware if the labware is loaded at the given position on the given deck.
	// 
	// Return:
	// The ID of the labware if the labware is loaded at the given position on the given deck, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function IsLabwareLoadedByLabwareId(
		variable deckID,										// [in]: Deck ID (integer)
		variable& labwareId)									// [in]: Labware id (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Returns the element ID of the labware if the labware is loaded on the given deck.
	// 
	// Return:
	// The element ID of the labware if the labware is loaded on the given deck, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function IsLabwareLoadedByLabwareIdPositionId(
		variable deckID,										// [in]: Deck ID (integer)
		variable& labwareId,									// [in]: Labware id (string)
		variable& positionId)								// [in]: Position id (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Returns the element ID of the labware if the labware is loaded on the given deck.
	// 
	// Return:
	// The element ID of the labware if the labware is loaded on the given deck, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function IsBarcodeLoaded(
		variable deckID,										// [in]: Deck ID (integer)
		variable& barcode) variable						// [in]: Barcode (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Returns the ID of the labware with the given barcode if the barcode is loaded on the given deck.
	// 
	// Return:
	// The ID of the labware if the labware with the given barcode is loaded on the given deck, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function IsBarcodeLoadedEx(
		variable deckID,										// [in]: Deck ID (integer)
		variable& barcode) variable[]						// [in]: Barcode (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Returns an array filled with the IDs of each on the given deck loaded labware with the given barcode.
	// 
	// Return:
	// The IDs of all on the given deck loaded labware with the given barcode. If no matching labware can be found,
	// an empty array will be returned.
	//--------------------------------------------------------------------------------------------------------------
	{variable dummy[]; return(dummy);}

	function CheckBarcodeByLabwareIdPositionId(
		variable& barcode,									// [in]: Barcode to be checked (string)
		device& instrument,  					         // [in]: used instrument (device)
      variable& labwareId,                         // [in]: Labware id (string)
      variable& positionId) variable               // [in]: Position id (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Checks whether given barcode is unique.
	//
	//	Note:
	// If the given barcode at the given position must not be unique, the function will return the state
	// 'AlreadyUsedAsUnique' in case of an existing unique barcode.
	// 
	// Return:
	// Barcode unique state (integer, one of HxVectorDbUniqueBarcodeCheckResult).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetElementID(
   	variable& labwareAccessName) variable			// [in]: Labware access name, e.g. ML_STAR\TemplateA\Rack1\1 (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the ElementID given a labware access name.
	// 
	// Return:
	// The ElementID for the given labware (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetElementIDByDeckIDLabwareId(
		variable deckID,										// [in]: Deck ID (integer)
		variable& labwareId) variable						// [in]: Labware id (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the ElementID for the given labware and deck.
	// 
	// Return:
	// The ElementID for the given labware and deck (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareLoadingTime(
   	variable& labwareAccessName,						// [in]: Labware access name, e.g. ML_STAR\TemplateA\Rack1\1 (string)
   	variable namedFormat) variable					// [in]: Numeric value that indicates the date/time format used (integer, one of VectorDb_DateTimeFormat).
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the labware loading time given a labware access name.
	// 
	// Return:
	// The labware loading time given labware (float if namedFormat = VectorDb_DateTimeFormat::Unformatted, otherwise string).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareLoadingTimeByElementID(
		variable deckID,										// [in]: Deck ID (integer)
		variable elementID,									// [in]: Element ID (integer)
   	variable namedFormat) variable					// [in]: Numeric value that indicates the date/time format used (integer, one of VectorDb_DateTimeFormat).
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the labware loading time on given deck for given labware.
	// 
	// Return:
	// The labware loading time on given deck for given labware (float if namedFormat = VectorDb_DateTimeFormat::Unformatted, otherwise string).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function AssignLabwareToJob(
		variable jobID, 										// [in]: Job ID (integer)
		variable sourceElementID, 							// [in]: Source labware ID (integer)
		variable targetElementID) variable				// [in]: Target labware ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Assigns given job to given labware.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function AssignLoadedLabwareToJobs(
		variable deckID) variable							// [in]: Deck ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Assigns labware loaded on given deck to corresponding 'Unprocessed' jobs .
	// 
	// Return:
	// The number of newly assigned jobs (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);} 

	function GetLabware(
		variable& labwareAccessName,						// [in]: Labware access name, e.g. ML_STAR\TemplateA\Rack1\1 (string)
		variable& deckID,										// [out]: Deck ID (integer)
		variable& parentElementID,							// [out]: Parent labware ID (integer)
		variable& elementID,									// [out]: Element ID (integer)
		variable& labwareName,								// [out]: Labware name (string)
		variable& labwareLevel,								// [out]: Labware level (integer), one of VectorDb_LabwareLevel
		variable& barcode,									// [out]: Barcode (string)
		variable& volume,										// [out]: Voulme in ul (float)
		variable& labwareState,								// [out]: Labware state (integer), one of VectorDb_LabwareState
		variable& userLabwareState,						// [out]: User labware state (integer)
		variable& deckCoordinateX,							// [out]: X-coordinate (float)
		variable& deckCoordinateY,							// [out]: Y-coordinate (float)
		variable& deckCoordinateZ,							// [out]: Z-coordinate (float)
		variable& userLabwareTypeID) variable			// [out]: User labware type ID (integer, 0 if not used)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves labware details information given a labware access name.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareByElementID(
		variable elementID,									// [in]: Element ID (integer)
		variable& deckID,										// [out]: Deck ID (integer)
		variable& parentElementID,							// [out]: Parent labware ID (integer)
		variable& labwareName,								// [out]: Labware name (string)
		variable& labwareLevel,								// [out]: Labware level (integer), one of VectorDb_LabwareLevel
		variable& barcode,									// [out]: Barcode (string)
		variable& volume,										// [out]: Voulme in ul (float)
		variable& labwareState,								// [out]: Labware state (integer), one of VectorDb_LabwareState
		variable& userLabwareState,						// [out]: User labware state (integer)
		variable& deckCoordinateX,							// [out]: X-coordinate (float)
		variable& deckCoordinateY,							// [out]: Y-coordinate (float)
		variable& deckCoordinateZ,							// [out]: Z-coordinate (float)
		variable& userLabwareTypeID) variable			// [out]: User labware type ID (integer, 0 if not used)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves labware details information given a labware ID.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareBarcode(
		variable& labwareAccessName) variable			// [in]: Labware access name, e.g. ML_STAR\TemplateA\Rack1\1 (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the barcode given a labware access name.
	// 
	// Return:
	// The barcode of the given a labware (string).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareBarcodeByElementID(
		variable elementID) variable						// [in]: Element ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the barcode given a labware ID.
	// 
	// Return:
	// The barcode of the given a labware (string).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareVolume(
		variable& labwareAccessName) variable			// [in]: Labware access name, e.g. ML_STAR\TemplateA\Rack1\1 (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the volume given a labware access name.
	// 
	// Return:
	// The volume of the given a labware (float).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareVolumeByElementID(
		variable elementID) variable						// [in]: Element ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the volume given a labware ID.
	// 
	// Return:
	// The volume of the given a labware (float).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetAllChildLabware(
		variable elementID) variable []					// [in]: Element ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves all child labware (next labware level) of given element ID.
	// 
	// Return:
	// Array containing all child element ID's (integer).
	//--------------------------------------------------------------------------------------------------------------
	{variable arrChildElementIDs[]; return(arrChildElementIDs);}

	function GetLabwareOfLastLoadAction(
		variable& elementIDs[],								// [in/out] Array to retrieve element ID's (integer)
		variable& parentElementIDs[],						// [in/out] Array to retrieve parent element ID's (integer)
		variable& initialLabwareAccessNames[],			// [in/out] Array to retrieve initial labware access names (string)
		variable& labwareNames[],							// [in/out] Array to retrieve labware names (string)
		variable& labwareLevels[],							// [in/out] Array to retrieve labware levels (integer)
		variable& barcodes[]) variable					// [in/out] Array to retrieve barcodes (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves data of the last load action.
	// 
	// Return:
	// Number off element ID's loaded by last load action (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetElementIDByCurrentPositionOfSequence(
		variable deckID,										// [in]: Deck ID (integer)
		sequence& Sequence) variable 						// [in]: Sequence of interest
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the element ID at current sequence position.
	// 
	// Return:
	// Element ID at current sequence position (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareHierarchyByCurrentPositionOfSequence(
		variable deckID,										// [in]: Deck ID (integer)
		sequence& Sequence,			 						// [in]: Sequence of interest
		variable templateID,									// [out]: Template ID (integer)
		variable rackID) variable							// [out]: Rack ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves element ID's of template, rack and well at current sequence position.
	// 
	// Return:
	// Element ID of well at current sequence position (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetElementIDsOfSequencePositions(
		variable deckID,										// [in]: Deck ID (integer)
		sequence& Sequences[]) variable []				// [in]: Sequence(s) of interest
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves all element ID's of given sequence(s).
	// 
	// Return:
	// Element ID's for given sequences (integer).
	//--------------------------------------------------------------------------------------------------------------
	{variable arrElementIDs[]; return(arrElementIDs);}


	function CreateSequenceForRacks(
		variable deckID,										// [in]: Deck ID (integer)
		variable& rackElementIDs[], 						// [in]: Array with rack element ID's (integer)
		variable rackSortingCritera,						// [in]: Rack sorting criteria (integer)
		variable wellSortingCriteria,						// [in]: Well sorting criteria (integer)
		sequence& Sequence) variable						// [out]: Sequence object
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Creates a sequence given deck ID and rack element ID's. The sequence is sorted by rack and well sorting criteria.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareAccessName(
		variable& elementID) variable						// [in]: Element ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the labware access name given an element ID.
	// 
	// Return:
	// The labware access name (string).
	//--------------------------------------------------------------------------------------------------------------
	{return("");}

	function GetLabwareOfRun(
		variable runID,										// [in] The run ID (integer)
		variable labwareLevel,								// [in] The level of interesting labware (integer, one of VectorDb_LabwareLevel)
		variable& elementIDs[],								// [in/out] Array to retrieve element ID's (integer)
		variable& initialParentElementIDs[],			// [in/out] Array to retrieve initial parent element ID's (integer)
		variable& initialLabwareAccessNames[],			// [in/out] Array to retrieve initial labware access names (string)
		variable& initialLabwareNames[],					// [in/out] Array to retrieve initial labware names (string)
		variable& barcodes[],								// [in/out] Array to retrieve barcodes (string)
		variable& labwareLevels[],							// [in/out] Array to retrieve labware levels (integer, one of VectorDb_LabwareLevel)
		variable& labwareStates[],							// [in/out] Array to retrieve labware states (integer, one of VectorDb_LabwareState)
		variable& loadingTimes[],							// [in/out] Array to retrieve loading times (float if namedFormat = VectorDb_DateTimeFormat::Unformatted, otherwise string)
		variable namedFormat) variable					// [in]: Numeric value that indicates the date/time format used (integer, one of VectorDb_DateTimeFormat).
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves detailed informations about labware of given run.
	// 
	// Return:
	// The number of labware found (integer).
	//
	// Note:
	//	Function throws an error if the database is not the enhanced Vector database.
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function ReloadLabware(
		variable currentRunElementID,						// [in] The element ID of current run (integer)
		variable previousRunElementID) variable		// [in] The element ID of previous run (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Reloads a labware given current and previous run element ID.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//
	// Note:
	//	Function throws an error if the database is not the enhanced Vector database.
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function AddLabwareAdditionalData(
		variable elementID, 									// [in] The element ID (integer)
		variable additionalDataKey,						// [in] Additional data key (string)
		variable additionalDataValue) variable			// [in] Additional data value (integer, float or string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Adds additional labware data given element ID.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareAdditionalData(
		variable elementID,									// [in] The element ID (integer)
		variable& additionalDataIDs[],					// [in/out] Array to retrieve additional data ID's (integer)
		variable& additionalDataKeys[],					// [in/out] Array to retrieve additional data keys (string)
		variable& additionalDataTypes[],					// [in/out] Array to retrieve additional data types (integer, one of VectorDb_ValueType)
		variable& additionalDataValues[]) variable	// [in/out] Array to retrieve additional data values (integer, float or string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves additional labware data given element ID.
	// 
	// Return:
	// The number of additional labware data (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareAdditionalDataByKey(
		variable elementID,									// [in] The element ID (integer)
		variable additionalDataKey, 						// [in] Additional data key (string)
		variable& additionalDataID,   					// [out] Additional data ID (integer)
		variable& additionalDataType, 					// [out] Additional data type (integer, one of VectorDb_ValueType)
		variable& additionalDataValue)	variable		// [out] Additional data value (integer, float or string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves additional labware data given element ID and additional data key.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function DeleteLabwareAdditionalData(
		variable elementID,									// [in] The element ID (integer)
		variable additionalDataKey) variable			// [in] Additional data key (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Deletes additional labware data given element ID and additional data key.
	// 
	// Return:
	// The number of affected rows (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}
}

//*****************************************************************************************************************
namespace VectorDb_Misc
//*****************************************************************************************************************
{
	static function TrackingEnabled() variable
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Indicates whether Vector Database tracking is enabled.
	// 
	// Return:
	// Nonzero if Vector Database tracking is enabled, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}
}

//*****************************************************************************************************************
namespace VectorDb_Experiment
//*****************************************************************************************************************
{
	function StartExperimentTracking(
		variable& name,									// [in]: Experiment name (string)
		variable& description,							// [in]: Experiment description (string)
		variable& sourceAccessName) variable		// [in]: Labware access name, e.g. ML_STAR\TemplateA\Rack1\1 (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Starts the experiment tracking given name, description and source access name.
	// 
	// Return:
	// The ID of experiment started (integer)
	//--------------------------------------------------------------------------------------------------------------
	{return(0);} 

	function StartExperimentTrackingByElementID(
		variable& name,									// [in]: Experiment name (string)
		variable& description,							// [in]: Experiment description (string)
		variable sourceElementID) variable 			// [in]: Element ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Starts the experiment tracking given name, description and source element ID.
	// 
	// Return:
	// The ID of experiment started (integer)
	//--------------------------------------------------------------------------------------------------------------
	{return(0);} 


	function StartExperimentTrackingByElementIDs(
		variable& name,									// [in]: Experiment name (string)
		variable& description,							// [in]: Experiment description (string)
		variable& sourceElementIDs[]) variable 	// [in]: Array containing the element IDs (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Starts the experiment tracking given name, description and source element IDs.
	// 
	// Return:
	// The ID of experiment started (integer)
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}


	function GetAllExperiments(
		variable& experimentIDs[],						// [in/out]: Array to retrieve the experiment ID's (integer)
		variable& names[],								// [in/out]: Array to retrieve the experiment names (string)
		variable& descriptions[],						// [in/out]: Array to retrieve the experiment descriptions (string)
		variable& experimentTimes[],					// [in/out]: Array to retrieve the experiment date/times (float if namedFormat = VectorDb_DateTimeFormat::Unformatted, otherwise string)
		variable namedFormat) variable				// [in]: Numeric value that indicates the date/time format used (integer, one of VectorDb_DateTimeFormat).
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves all experiments with details.
	// 
	// Return:
	// Number of experiments (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);} 

	function GetExperimentSourceLabware(
		variable experimentID) variable				// [in]: Experiment ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the element ID of source labware given an experiment ID.
	// 
	// Return:
	// The element ID of source labware (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);} 

	function GetExperimentSourceLabwareEx(
		variable experimentID) variable[]			// [in]: Experiment ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves all element ID's of source labware given an experiment ID.
	// 
	// Return:
	// An array of source element ID's (integer).
	//--------------------------------------------------------------------------------------------------------------
	{variable dummy[]; return(dummy);}

	function GetAllExperimentLabware(
		variable experimentID,							// [in]: Experiment ID (integer)
		variable& elementIDs[]) variable				// [in/out]: Array to retrieve element ID's (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves all element ID's given a experiment ID.
	//
	// Return:
	// Number of element ID's found.
	//--------------------------------------------------------------------------------------------------------------
	{return(0);} 

	function GetExperiment(
		variable experimentID,							// [in]: Experiment ID (integer)
		variable& name,									// [out]: Experiment name (string)
		variable& description,							//	[out]: Experiment description (string)
		variable& experimentTime,						// [out]: Experiment date/time (float if namedFormat = VectorDb_DateTimeFormat::Unformatted, otherwise string)
   	variable namedFormat) variable				// [in]: Numeric value that indicates the date/time format used (integer, one of VectorDb_DateTimeFormat).
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves experiment details given experiment ID.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);} 

	function AddExperimentLabware(
		variable experimentID,							// [in]: Experiment ID (integer)
		variable elementID) variable					// [in]: Element ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Assigns a labware with given element ID to given experiment ID.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function AddExperimentSourceLabware(
		variable experimentID,							// [in]: Experiment ID (integer)
		variable sourceElementID) variable			// [in]: Element ID of source (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Assigns a source labware with given element ID to given experiment ID.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function DeleteExperiment(
		variable experimentID) variable				// [in]: Experiment ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Deletes the experiment given experiment ID.
	// 
	// Return:
	// The number of affected rows (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function RemoveExperimentLabware(
		variable experimentID,							// [in]: Experiment ID (integer)
		variable elementID) variable					// [in]: Element ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Removes a labware from a given experiment ID and element ID.
	// 
	// Return:
	// The number of affected rows (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}
}

//*****************************************************************************************************************
namespace VectorDb_TrackAction
//*****************************************************************************************************************
{
	function CustomAction(
		variable& labwareAccessName, 					// [in]: Labware access name, e.g. ML_STAR\TemplateA\Rack1\1 (string)
		variable actionState,							// [in]: Action state (integer)
		variable additionalData_Key,					// [in]: Additional key (string)
		variable additionalData_Value) variable	// [in]: Additional value (string, float or integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Allows tracking of a custom action given a labware access name.
	// 
	// Return:
	// The Action ID of the custom action (integer)
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}
}

//*****************************************************************************************************************
namespace VectorDb_LabwareType
//*****************************************************************************************************************
{
	function CreateSequenceForLabwareTypes(
		variable deckID,										// [in]: Deck ID (integer)
		variable& rackLabwareTypeIDs[], 					// [in]: Array with rack labware type ID's (integer)
		variable& wellLabwareTypeIDs[], 					// [in]: Array with well labware type ID's (integer)
		variable rackSortingCritera,						// [in]: Rack sorting criteria (integer)
		variable wellSortingCriteria,						// [in]: Well sorting criteria (integer)
		sequence& Sequence) variable						// [out]: Sequence object
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Creates a sequence given deck ID, rack labware type and well labware type ID's.
	// The sequence is sorted by rack and well sorting criteria.
	// 
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function SetLabwareType(
		variable& mainTypeName,								// [in]: Main type name (string)
		variable& typeName, 									// [in]: Type name (string)
		variable& accessName) variable					// [in]: Labware access name, e.g. ML_STAR\TemplateA\Rack1\1 (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Allows to specify the main type and the type of a lawbare given the labware access name.
	//	e.g. main type = "Hep-A", type = "Verification"
	//
	// Return:
	// The labware type ID (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function SetLabwareTypeByElementID(
		variable& mainTypeName,								// [in]: Main type name (string)
		variable& typeName, 									// [in]: Type name (string)
		variable elementID) variable						// [in]: Element ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Allows to specify the main type and the type of a lawbare given the element ID.
	//	e.g. main type = "Hep-A", type = "Verification"
	//
	// Return:
	// The labware type ID (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function SetLabwareTypeID(
		variable labwareTypeID,								// [in]: Labware type ID (integer)
		variable& accessName) variable					// [in]: Labware access name, e.g. ML_STAR\TemplateA\Rack1\1 (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Allows to set the labware type given labware type and labware access name.
	//
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function SetLabwareTypeIDByElementID(
		variable labwareTypeID,								// [in]: Labware type ID (integer)
		variable elementID) variable						// [in]: Element ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Allows to set the labware type given labware type and element ID.
	//
	// Return:
	// Nonzero if the function succeeded, otherwise zero (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareTypeID(
		variable& accessName) variable					// [in]: Labware access name, e.g. ML_STAR\TemplateA\Rack1\1 (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the labware type ID given a labware access name.
	//
	// Return:
	// The labware type ID (integer). Zero, if there is no labware type set.
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareTypeIDByElementID(
		variable elementID) variable						// [in]: Element ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the labware type ID given the element ID.
	//
	// Return:
	// The labware type ID (integer). Zero, if there is no labware type set.
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareTypeIDByTypeName(
		variable& mainTypeName,								// [in]: Main type name (string)
		variable& typeName, 									// [in]: Type name (string)
		variable createIfNotExist) variable				// [in]: Flag, indicates whether the labware type has to be created if not exist (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the labware type ID given labware main type and labware type.
	//
	// Return:
	// The labware type ID (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareMainTypeIDByTypeName(
		variable& mainTypeName,								// [in]: Main type name (string)
		variable createIfNotExist) variable				// [in]: Flag, indicates whether the labware type has to be created if not exist (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves the labware type ID given labware main type.
	//
	// Return:
	// The labware type ID (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareMainTypes(
		variable& mainTypeIDs[],							// [in/out]: Array to retrieve the labware main type ID's (integer)
		variable& mainTypeNames[]) variable				// [in/out]: Array to retrieve the labware main type names (sting)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves all labware type ID's and main type names.
	//
	// Return:
	// The number of labware main types found (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareTypesOfMainType(
		variable& mainType,									// [in]: Main type name (string)
		variable& mainTypeIDs[],							// [in/out]: Array to retrieve the labware main type ID's (integer)
		variable& typeNames[]) variable					// [in/out]: Array to retrieve the labware type names (sting)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves labware type ID's and type names given a labware main type name.
	//
	// Return:
	// The number of labware types found (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLabwareTypesOfMainTypeByMainTypeID(
		variable mainTypeID,									// [in]: Main type ID (integer)
		variable& mainTypeIDs[],							// [in/out]: Array to retrieve the labware main type ID's (integer)
		variable& typeNames[]) variable					// [in/out]: Array to retrieve the labware type names (sting)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves labware type ID's and type names given a labware main type ID.
	//
	// Return:
	// The number of labware types found (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function DeleteLabwareMainType(
		variable& mainTypeName) variable					// [in]: Main type name (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Deletes all labware types given a labware main type name. 
	// If a labware has assigned the main type deleted, the labware type of those labware will be set null.
	//
	// Return:
	// The number of main types deleted (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function DeleteLabwareMainTypeByMainTypeID(
		variable mainTypeID) variable						// [in]: Main type ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Deletes all labware types given a labware main type ID. 
	// If a labware has assigned the main type deleted, the labware type of those labware will be set null.
	//
	// Return:
	// The number of main types deleted (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function DeleteLabwareType(
		variable& mainTypeName,								// [in]: Main type name (string)
		variable& typeName) variable						// [in]: Type name (string)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Deletes a labware type given labware main type and labware type name.
	// If a labware has assigned the labware type deleted, the labware type of those labware will be set null.
	//
	// Return:
	// The number of affected rows (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function DeleteLabwareTypeByTypeID(
		variable typeID) variable							// [in]: Labware type ID (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Deletes a labware type given labware type ID.
	// If a labware has assigned the labware type deleted, the labware type of those labware will be set null.
	//
	// Return:
	// The number of affected rows (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLoadedLabwareByLabwareTypeID(
		variable deckID, 										// [in]: Deck ID (integer)
		variable labwareLevel,								// [in]: The labware level (integer, one of VectorDb_LabwareLevel)
		variable labwareTypeID, 							// [in]: Labware type ID (integer)
		variable& elementIDs[], 							// [in/out]: Array to retrieve the element ID's of currently loaded labware (integer)
		variable& labwareTypeIDs[]) variable			// [in/out]: Array to retrieve the labware type ID's of currently loaded labware (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves currently loaded labware given deck ID, labware level and labware type ID.
	//
	// Return:
	// The number of labware found (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}

	function GetLoadedChildrenLabwareByLabwareTypeID(
		variable deckID, 										// [in]: Deck ID (integer)
		variable parentElementID, 							// [in]: Parent element ID (integer)
		variable labwareTypeID, 							// [in]: Labware type ID (integer)
		variable& elementIDs[], 							// [in/out]: Array to retrieve the element ID's of currently loaded labware (integer)
		variable& labwareTypeIDs[]) variable			// [in/out]: Array to retrieve the labware type ID's of currently loaded labware (integer)
	//--------------------------------------------------------------------------------------------------------------
	// Description:
	// Retrieves currently loaded labware given parent element ID and labware type ID.
	//
	// Return:
	// The number of children labware found (integer).
	//--------------------------------------------------------------------------------------------------------------
	{return(0);}
}

#endif

// Implementation of the Vector Database Tracking Library
#ifdef HSL_RUNTIME
	#ifndef __HSLVectorDbTrackingImpl_hsl__
		#include "HSLVectorDbTrackingImpl.hs_"
	#endif
#endif

#endif
// $$author=mhosang$$valid=0$$time=2007-10-17 13:25$$checksum=a308272f$$length=086$$