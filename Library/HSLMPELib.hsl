
// ======================================================================
// Interface of the library to control the Hamilton MPE
//
// Copyright (C) by HAMILTON Reno, NV
// All rights reserved.
// ======================================================================
//
// Modification History
//
// 2015-07-22 Miles Lugo
//    - Created Initial File.
//  
// 2015-10-08 Vladimir Mamaev
//    - Added multi-device support
//
// 2016-05-10 Vladimir Mamaev
//    - Added StartVacuum, StopVacuum, and GetVacuumStatus function
//
// 2017-05-23 Samuel Huff
//    - ConnectUsingX now smart initializes the vacuum
//    - Plate height values can now be simulated (CollectionPlatePlaced, FilterPlatePlaced)
//
// 2017-08-23 cuciak_c
//    - Added support for evaporator, heater and dispenser
// ======================================================================


#ifndef __HSLMPE_Lib_hsl__
#define __HSLMPE_Lib_hsl__ 1

#ifndef HSL_RUNTIME

namespace HSLMPELib
{

   function ConnectUsingIP(
      variable ipAddress,                      // In:  String 
      variable portNumber,                     // In:  Integer
      variable simulationMode,                 // In:  Integer
      variable& deviceId,                      // Out: Integer
      variable mpeOptions)                     // In: Integer
      variable { return(0); }  

   function ConnectUsingCOM(
      variable comPort,                        // In:  Integer
      variable baudRate,                       // In:  Integer
      variable simulationMode,                 // In:  Integer
      variable& deviceId,                      // Out: Integer
      variable mpeOptions)                     // In: Integer
      variable { return(0); }

   function IsInitialized(
      variable deviceId,                       // In:  Integer
      variable& isInitialized)                 // Out: Integer
      variable {return(0); }

   function IsConnected(
      variable deviceId,                       // In:  Integer
      variable& isConnected)                   // Out: Integer
      variable {return(0); }
     
   function Disconnect(
      variable deviceId)                       // In:  Integer
      variable { return(0); }
   
   function Initialize(
      variable deviceId)                       // In:  Integer  	
      variable {return(0); }

   function InitializeWithParameters(
      variable deviceId,                       // In:  Integer
      variable smart,                          // In:  Integer
      variable wasteContainerId,               // In:  Integer
      variable vacuumRunTime,                  // In:  Integer
      variable disableVacuumCheck)             // In:  Integer  	
      variable {return(0); }

   function ClampFilterPlate(
      variable deviceId)                       // In:  Integer
      variable {return(0); }   

   function CollectionPlatePlaced(
      variable deviceId,                       // In:  Integer
      variable collectionPlateHeight,          // In:  Float
      variable offsetFromNozzles)      	     // In:  Float
      variable {return(0); }

   function CollectionPlateRemoved(
      variable deviceId)                       // In:  Integer    
      variable {return(0); }

   function FilterPlatePlaced(
      variable deviceId,                       // In:  Integer
      variable filterHeight,                   // In:  Float
      variable nozzleHeight)                   // In:  Float
      variable {return(0); }

   function FilterPlateRemoved(
      variable deviceId)                       // In:  Integer     
      variable {return(0); }
        
   function ProcessFilterToCollectionPlate(
      variable deviceId,                       // In:  Integer
      variable controlPoints,                  // In:  String
      variable returnPlateToIntegrationArea)   // In:  Integer
      variable {return(0); }
   
   function ProcessFilterToWasteContainer(
      variable deviceId,                       // In:  Integer
      variable controlPoints,                  // In:  Integer
      variable returnPlateToIntegrationArea,   // In:  Integer
      variable wasteContainerId,               // In:  Integer
      variable disableVacuumCheck)             // In:  Integer
      variable {return(0); }

   function RetrieveFilterPlate(
      variable deviceId)                       // In:  Integer
      variable {return(0); }

   function StartMPEVacuum(
      variable deviceId,                       // In:  Integer
      variable wasteContainerId,               // In:  Integer
      variable disableVacuumCheck)             // In:  Integer                     
      variable {return(0); }

   function StartVacuum(
      variable deviceId,                       // In:  Integer
      variable wasteContainerId,               // In:  Integer
      variable seconds,                        // In:  Float
      variable disableVacuumCheck)             // In:  Integer                     
      variable {return(0); }

   function StopVacuum(
      variable deviceId)                       // In:  Integer
      variable {return(0); }

   function GetVacuumStatus(
      variable deviceId,                       // In:  Integer
      variable& vacuumActive)                  // Out: Integer
      variable {return(0); }
                  
   function GetLastError(
      variable deviceId,                       // In:  Integer
      variable clearError,                     // In:  Integer
      variable& errorMessage)                  // Out: String
      variable {return(0); }  

   function Dispense(
      variable deviceId,                       // In:  Integer
      variable sourceId,                       // In:  Integer
      variable wellVolume,                     // In:  Float
      variable flowRate,                       // In:  Float
      variable needleOffset)                   // In:  Float
      variable {return(0); }

   function DispenseNonStandard(
      variable deviceId,                       // In:  Integer
      variable sourceId,                       // In:  Integer
      variable wellVolume,                     // In:  Float
      variable flowRate,                       // In:  Float
      variable needleOffset,                   // In:  Float
      variable edgeToWellOffset,               // In:  Float
      variable wellToWellOffsets[])            // In:  Float
      variable {return(0); }
 
    function Prime(
      variable deviceId,                       // In:  Integer
      variable sourceId,                       // In:  Integer
      variable wellVolume,                     // In:  Float
      variable flowRate,                       // In:  Float
      variable wasteContainerId)               // In:  Float
      variable {return(0); }      

   function Flush(
      variable deviceId,                       // In:  Integer
      variable wellVolume,                     // In:  Float
      variable flowRate,                       // In:  Float
      variable wasteContainerId)               // In:  Float
      variable {return(0); }

   function Evaporate(
      variable deviceId,                       // In:  Integer
      variable plateHeight,                    // In:  Float
      variable needleOffset,                   // In:  Float
      variable wellDepth,                      // In:  Float
      variable evaporateTime)                  // In:  Integer
      variable {return(0); }

   function EvaporateWithRate(
      variable deviceId,                       // In:  Integer
      variable plateHeight,                    // In:  Float
      variable needleOffset,                   // In:  Float
      variable evaporatorTravelDistance,       // In:  Float
      variable evaporateTime,                  // In:  Integer
      variable followRate)                     // In:  Float
      variable {return(0); }

   function EvaporatePrepare(
      variable deviceId,                       // In:  Integer
      variable temperature,                    // In:  Float
      variable pressure,                       // In:  Float
      variable timeout)                        // In:  Integer
      variable {return(0); }

   function EvaporateEnd(
      variable deviceId,                       // In:  Integer
      variable timeout)                        // In:  Integer
      variable {return(0); }

   function GetTemperatureRange(
      variable deviceId,                       // In:  Integer
      variable& minimumTemperature,            // Out: Float
      variable& maximumTemperature)            // Out: Float
      variable {return(0); }

   function GetCurrentHeaterStatus(
      variable deviceId,                       // In:  Integer
      variable reset,                          // In:  Integer
      variable& currentEvaporatorTemperature,  // Out: Float
      variable& currentGasTemperature,         // Out: Float
      variable& heating )                      // Out: Integer
      variable {return(0); }

   function GetHeaterTemperatureRange(
      variable deviceId,                       // In:  Integer
      variable reset,                          // In:  Integer
      variable& minimumEvaporatorTemperature,  // Out: Float
      variable& maximumEvaporatorTemperature,  // Out: Float
      variable& minimumGasTemperature,         // Out: Float
      variable& maximumGasTemperature,         // Out: Float
      variable& targetTemperature,             // Out: Float
      variable& heating )                      // Out: Integer
      variable {return(0); }

   function SetSourceConfiguration(
      variable deviceId )                      // In:  Integer
      variable {return(0); }

   function GetSourceConfiguration(
      variable deviceId)                       // In:  Integer
      variable {return(0); }

   function ClearSourceConfiguration(
      variable deviceId,                       // In:  Integer
      variable reset)                          // In:  Integer
      variable {return(0); }

   function StartContainerCalibration(
      variable deviceId,                       // In:  Integer
      variable sourceId,                       // In:  Integer
      variable volume)                         // In:  Float
      variable {return(0); }

   function CancelContainerCalibration(
      variable deviceId,                       // In:  Integer
      variable sourceId)                       // In:  Integer
      variable {return(0); }

   function GetContainerCalibration(
      variable deviceId,                       // In:  Integer
      variable sourceId,                       // In:  Integer
      variable& volume,                        // Out: Float
      variable& emptyReading,                  // Out: Integer
      variable& fullReading,                   // Out: Integer
      variable& calibrationDate)               // Out: String
      variable {return(0); }

   function MeasureEmptyContainer(
      variable deviceId,                       // In:  Integer
      variable sourceId,                       // In:  Integer
      variable& emptyReading)                  // Out: Integer
      variable {return(0); }

   function MeasureFullContainer(
      variable deviceId,                       // In:  Integer
      variable sourceId,                       // In:  Integer
      variable& fullReading)                   // Out: Integer
      variable {return(0); }

   function SaveContainerCalibration(
      variable deviceId,                       // In:  Integer
      variable sourceId)                       // In:  Integer
      variable {return(0); }
}

#endif //end of #ifdef HSL_RUNTIME

#ifdef HSL_RUNTIME

// Include the implementation file
#include "HSLMPELib.hs_"

#endif //end of #ifdef HSL_RUNTIME

#endif


// $$author=cuciak_c$$valid=0$$time=2018-03-02 16:52$$checksum=b6b18b9f$$length=085$$