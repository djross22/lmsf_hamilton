//  ------------------------------------------------------------------------------------
//  Hamilton Company Software Product.
//  File: HSLSTCCLib.hs_
//
//  This is a part of the module HxSTCompCmd.
//  Exported interfaces and data members of the STCC Template Library,
//  used from the general steps in the method editor.
//
//  File creation date:  2004-03-15 by CJo
//  Last revision date:  2008-12-18 by CJo
//
//  Copyright (c) 2008 by Hamilton Bonaduz AG.
//
//
//  Modification History
//  --------------------
//  1.00  2004-03-15 by CJo  Initial file creation.
//  1.01  2004-04-02 by CJo  Remove comment containing 'sharp'ifndef. Produces errors if
//                           the library is included twice.
//  1.02  2006-03-17 by BAn  Included the library HSLImportWorklist.hs_ that supports the Smart Step 'Import Worklist'.
//  1.03  2006-05-19 by BAn  Included the library HSLUpdateWorklist.hs_ that supports the Smart Step 'Update Job Status'.
//  1.04  2007-07-25 by UBe  Declared new functions GenerateMappingFileV42() and GenerateMappingFileV42Ex1().
//  1.05  2008-12-18 by CJo  Declared new functions GenerateMappingFileV43() and GenerateMappingFileV43Ex1().
//  ------------------------------------------------------------------------------------

#pragma once

#ifndef HSL_RUNTIME
namespace STCC
{
	// --------------------------------------------------------------------------------------
	// Exported functions
	// --------------------------------------------------------------------------------------

	// Step 'Generate Mapping File'
	static function ResetFilterSequences() void {}	// Resets all previous addded filter sequences.

	static function AddFilterSequence(				// Adds a filter sequence used by the next GenerateMappingFile
		device    deviceContext,						// i: instrument on which the filter sequence must be valid
		sequence& filterSequence) void {}			// i: its labware between first and end position used as filter
																// Throws an exception if failed.

	static function GenerateMappingFileV43(		// Same as function GenerateMappingFileV43 with the following changes:
																// - removed arrExperiments start/end index because this was never working
																//   and is not longer supported by the dialog.
																// - added filterFlagsEx parameter
		device    deviceContext,						// i: instrument on which the target sequence must be valid
		sequence& targetSequence,						// i: a mapping file for racks between first and end position is generated
      variable  filterMode,                     // i: filter mode to be used
      variable& arrFilters[],                   // i: array contains the filter to be used (may be empty)
      variable  sortMode,                       // i: sort mode to be used
      variable& arrColumnIds[],                 // i: array contains the column identifier
      variable& arrColumnNames[],               // i: array contains the column names to be used
      variable& arrExperiments[],               // i: array contains the experiment names (may be empty)
		variable& strFilename,							// i: file name (with placeholders) used for file generation
      variable  createOneFile,                  // i: flag, indicating wheter one file must be created
      variable  openFileToAppend,               // i: flag, indicating wheter data shall be appended to an existing file
		variable& strPath,								// i: path into which the mapping files should be generated (may be empty)
		variable  filterFlagsEx,						// i: added in V4.3: Additional FilterFlagsEx, bitwise combination.
		variable& arrStrGeneratedFiles[]) void {}	// o: array contains the generated files names as string.

	static function GenerateMappingFileV43Ex1(	// same as GenerateMappingFileV43, but without the out parameter arrStrGeneratedFiles
		device    deviceContext,						// i:
      sequence& targetSequence,						// i:
      variable  filterMode,                     // i:
      variable& arrFilters[],                   // i:
      variable  sortMode,                       // i:
      variable& arrColumnIds[],                 // i:
      variable& arrColumnNames[],               // i:
      variable& arrExperiments[],               // i:
		variable& strFilename,							// i:
      variable  createOneFile,                  // i:
      variable  openFileToAppend,               // i:
		variable& strPath,								// i:
		variable  filterFlagsEx) void {}			// i: added in V4.3: Additional FilterFlagsEx, bitwise combination.


	static function GenerateMappingFileV42(		// Generates a mapping file for each rack in target sequence. Resets
																// the added filter sequences if the function is done.
		device    deviceContext,						// i: instrument on which the target sequence must be valid
		sequence& targetSequence,						// i: a mapping file for racks between first and end position is generated
      variable  filterMode,                     // i: filter mode to be used
      variable& arrFilters[],                   // i: array contains the filter to be used (may be empty)
      variable  sortMode,                       // i: sort mode to be used
      variable& arrColumnIds[],                 // i: array contains the column identifier
      variable& arrColumnNames[],               // i: array contains the column names to be used
      variable& arrExperiments[],               // i: array contains the experiment names (may be empty)
		variable  arrExpStartIndex,					// i: start index
		variable  arrExpEndIndex,						// i: end index
		variable& strFilename,							// i: file name (with placeholders) used for file generation
      variable  createOneFile,                  // i: flag, indicating wheter one file must be created
      variable  openFileToAppend,               // i: flag, indicating wheter data shall be appended to an existing file
		variable& strPath,								// i: path into which the mapping files should be generated (may be empty)
		variable& arrStrGeneratedFiles[]) void {}	// o: array contains the generated files names as string.

	static function GenerateMappingFileV42Ex1(	// same as GenerateMappingFileV42, but without the out parameter arrStrGeneratedFiles
		device    deviceContext,						// i:
      sequence& targetSequence,						// i:
      variable  filterMode,                     // i:
      variable& arrFilters[],                   // i:
      variable  sortMode,                       // i:
      variable& arrColumnIds[],                 // i:
      variable& arrColumnNames[],               // i:
      variable& arrExperiments[],               // i:
		variable  arrExpStartIndex,					// i:
		variable  arrExpEndIndex,						// i:
		variable& strFilename,							// i:
      variable  createOneFile,                  // i:
      variable  openFileToAppend,               // i:
		variable& strPath) void {}						// i:


	static function GenerateMappingFile(			// Generates a mapping file for each rack in target sequence. Resets
																// the added filter sequences if the function is done.
		device    deviceContext,						// i: instrument on which the target sequence must be valid
		sequence& targetSequence,						// i: a mapping file for racks between first and end position is generated
		variable& strFilename,							// i: file name (with placeholders) used for file generation
		variable& strPath,								// i: path into which the mapping files should be generated (may be empty)
		variable& arrStrGeneratedFiles[]) void {}	// o: array contains the generated files names as string.

	static function GenerateMappingFileEx1(		// same as GenerateMappingFile, but without the out parameter arrStrGeneratedFiles
		device    deviceContext,						// i:
		sequence& targetSequence,						// i:
		variable& strFilename,							// i:
		variable& strPath) void {}						// i:


	static function SetElementBarcode(				// Sets the element barcode for a rack or a well/cup position.
																// if positionID is an empty string the barcode is set for the rack.
		device    deviceContext,						// i: instrument on which LabId / PosID must be a valid labware
		variable& labwareID,								// i: the labware for which the barcode should be set (string)
		variable& positionID,							// i: the position for which the barcode should be set (string, may be empty)
		variable& barcode) void {}						// i: barcode to set for specified posID /labID (string).

	static function SetElementBarcodeForSequencePos(	// Sets the element barcode for a rack or a well/cup position
																		// specifed by a sequence position.
																		// if sequencePosition is less than zero the element barcode is set
																		// for the current sequence position.
		device    deviceContext,						// i: instrument on which the sequence must be valid
		sequence& targetSequence,						// i: the sequence from which the labID / posID is evaluated
		variable  sequencePosition,					// i: the sequence position identifies the labID / posID of interest (integer, ignored if less than zero)
		variable  setBarcodeForRack,					// i: hslTrue if the barcode should be set for the rack
																//    hslFalse if the barcode should be set for the well/cup
		variable& barcode) void {}						// i: barcode to set for specified posID /labID (string).


	static function RemoveElement(					// Removes an element from sample tracker (rack or well/cup)
																// if positionID is an empty string the barcode is set for the rack.
		device    deviceContext,						// i: instrument on which LabId / PosID must be a valid labware
		variable& labwareID,								// i: the labware to remove (string)
		variable& positionID) void {}					// i: the position to remove (string, may be empty)

	static function RemoveElementAtSequencePos(	// Removes an element from sample tracker (rack or well/cup)
																// specifed by a sequence position.
																// if sequencePosition is less than zero the element at
																// the current sequence position is removed.
		device    deviceContext,						// i: instrument on which the sequence must be valid
		sequence& targetSequence,						// i: the sequence from which the labID / posID is evaluated
		variable  sequencePosition,					// i: the sequence position identifies the labID / posID to remove (integer, ignored if less than zero)
		variable  removeRack) void {}					// i: hslTrue if the rack should be removed
																//    hslFalse if the well/cup should be removed
}

#ifndef __HSLUtilLib2_hsl__
	#include "HSLUtilLib2.hsl"		// Support for functions Util2::VarArrElementAt() and Util2::SeqArrElementAt()
#endif

#ifndef __HSLUtilLib2Def_hs___
	#include "HSLUtilLib2Def.hs_"
#endif

#ifndef __HSLImportWorklist_hs___
	#include "HSLImportWorklist.hs_"
#endif

#ifndef __HSLUpdateWorklist_hs___
	#include "HSLUpdateWorklist.hs_"
#endif

#endif


// Implementation of to the STCC Template Library only included at runtime
#ifdef HSL_RUNTIME

	#include "HSLSTCCLibImpl.hs_"

	#ifndef __HSLImportWorklistImpl_hs___
		#include "HSLImportWorklistImpl.hs_"
	#endif

	#ifndef __HSLImportWorklistDefs_hs___
		#include "HSLImportWorklistDefs.hs_"
	#endif

	#ifndef __HSLUpdateWorklist_hs___
		#include "HSLUpdateWorklist.hs_"
	#endif

#endif

// $$author=wbarmettler$$valid=1$$time=2017-03-09 07:27$$checksum=e5b58bd6$$length=088$$