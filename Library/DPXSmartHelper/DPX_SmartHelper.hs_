
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 2/27/2018 12:32:12 PM

#pragma once
#ifndef HSL_RUNTIME
namespace DPX_SMARTHELPER {
function _InitLibrary() { }
function _ExitLibrary() { }
function Add_Whitespace_To_Str( variable i_String, variable i_TotalCharactersToOccupy, variable & io_StringToConcat ) void { }
function Add_Zero_To_Str( variable i_String, variable i_TotalCharactersToOccupy, variable & io_StringToConcat ) void { }
function ConvertmmToFWParameterWithCorrection( variable i_flt_Length, variable i_flt_CorrectionLength, variable i_int_NumCharacters, variable i_int_MultFactor, variable & o_str_FWParam ) variable {  return (0); }
function Dispense96HeadOverSequence( device & ML_STAR, sequence i_TargetSequence ) void { }
function DispenseChannelsOverSequence( device & ML_STAR, sequence i_TargetSequence ) void { }
function DispenseChannelsOverSequence_2( device & ML_STAR, sequence i_TargetSequence, variable i_flt_DispenseHeight, variable i_flt_DispenseSpeed ) void { }
function DispenseChannelsOverSequence_3( device & ML_STAR, sequence i_TargetSequence, variable i_flt_DispenseHeight, variable i_flt_DispenseSpeed, variable i_flt_DispenseVolume ) void { }
function Dose_1mLChannel( device & ML_STAR ) void { }
function Dose_96Head( device & ML_STAR ) void { }
function GET_TipType_Parameters( variable i_str_TipType, variable & o_flt_MaxTipVolume, variable & o_int_ChannelType, variable & o_int_TipType, variable & o_int_Channels_Available, variable & o_str_SingleChannelVariable, variable & o_str_DefaultChannelVariable ) void { }
function Init_96Head( device & ML_STAR ) void { }
function Init_SmartHelper( device & ML_STAR ) void { }
function MoveChannel_RelativeZPosition( device & ML_STAR, variable i_NumberOfChannels, variable i_Distance, variable i_Speed, variable i_Direction ) void { }
function MoveChannel_ZPosition( device & ML_STAR, variable i_Position, variable i_Speed ) void { }
function MoveChannelsOverSequence( device & ML_STAR, sequence i_TargetSequence ) void { }
function MoveHeadOverSequence( device & ML_STAR, sequence i_TargetSequence ) void { }
function MoveHead_RelativeZPosition( device & ML_STAR, variable i_Distance, variable i_Speed, variable i_Direction ) void { }
function MoveHead_ZPosition( device & ML_STAR, variable i_Position, variable i_Speed ) void { }
function MovePlunger_96Head( device & ML_STAR, variable i_Volume, variable i_AspOrDisp, variable i_Speed ) void { }
function Positions_Remaining( sequence & i_Seq ) variable {  return (0); }
function ResetTipLength( device & ML_STAR, variable i_TipType ) variable {  return (0); }
function STARInit( device & ML_STAR ) void { }
function SetTipLength( device & ML_STAR, variable i_TipType, variable i_flt_NewTipLength, variable & o_flt_NewTipVolume ) variable {  return (0); }
function Shake_Waste( device & ML_STAR, variable i_Duration ) void { }
function TipOnTipPickup_Channels( device & Device, variable i_intChannelsToMove, sequence & i_seqTarget, variable i_ZHeight, variable i_TraverseHeight ) variable {  return (0); }
function UTIL_Trace2Sequences( sequence & i_FirstSequence, sequence & i_SecondSequence ) void { }
global variable gbl_str_Single1mLChannelVariable;
global variable gbl_str_Single5mLChannelVariable;
global variable gbl_int_Sim_State;
global variable gbl_bln_AutoLoad_Installed;
global variable gbl_str_DateAndTime;
global variable gbl_str_UserName;
global variable gbl_bln_HasCoRe96Head;
global variable gbl_int_1mLRasterWidth;
global variable gbl_int_AutoLoadHome;
global variable gbl_int_1mLChannelsInstalled;
global variable gbl_int_5mLChannelsInstalled;
global variable gbl_str_Default1mLChannelVariable;
global variable gbl_str_Default5mLChannelVariable;
global variable gbl_str_InstrumentViewName;
global variable gbl_str_HamiltonDirectory;
global variable gbl_str_STARSerialNum;
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=Hamilton$$valid=0$$time=2018-02-27 12:32$$checksum=a820e7d0$$length=085$$