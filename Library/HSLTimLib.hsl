// This is a part of the HSL Time Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
//
// Modification History
// 2001-06-26  bandenmatten : Removed onerror goto statements from library functions.
// 2001-07-17  bandenmatten : Divided library into interface and implemenation.
// 2001-00-02  bandenmatten : Added functons TimGetFormattedTime and TimGetFormattedDate.
// 2002-04-06  bandenmatten : Added functon TimWaitTimer.
// 2002-07-06  bandenmatten : Made library language independant.
// 2002-12-05  bandenmatten : Specified return values for exported library functions.
// 2005-06-03  bandenmatten : Declared function TimWaitTimer as static (obsolete).
// 2007-04-11  bandenmatten : Declared functions TimGetTime and TimGetDate as static (obsolete).
// 2007-07-02  bandenmatten : Removed define _TIM_WIN98.

#ifndef __HSLTimLib_hsl__
#define __HSLTimLib_hsl__	1

// Interface to Date/Time library 
#ifndef HSL_RUNTIME
static function TimGetTime() variable									{return(0);}
static function TimGetDate() variable									{return(0);}
function TimGetFormattedTime(variable& format) variable			{return(0);}
function TimGetFormattedDate(variable& format) variable			{return(0);}
static function TimWaitTimer(timer& timerObj, variable show) variable	{return(0);}
#endif

// Implementation of Date/Time library 
#ifdef HSL_RUNTIME

// Data 
#define _TIM_WINDOWS_2000	1
// #define _TIM_WINNT	1 
#ifdef _TIM_WINNT
static variable timCmdPrompt("cmd.exe");
static variable timTimeWith(11);
static variable timDateWith(10);
static variable timTimeRightOffset(11);
static variable timDateRightOffset(10);
#endif
#ifdef _TIM_WINDOWS_2000
static variable timCmdPrompt("cmd.exe");
static variable timTimeWith(11);
static variable timDateWith(10);
static variable timTimeRightOffset(11);
static variable timDateRightOffset(11);
#endif

namespace Tim
{

	// --------------------------------------------------------------------------------------
	// Error Ids
	// --------------------------------------------------------------------------------------

	namespace IDE
	{
		static const variable first(0);									// guard
		static const variable noError(first);							// No error.
		static const variable shellOutEchoFailed(first + 1);		// Failed to shell out echo command.
		static const variable shellOutDateTimeFailed(first + 2);	// Failed to shell out date/time command.
		static const variable shellOutDeleteFailed(first + 3);	// Failed to shell out delete command.
		static const variable addFieldFailed(first + 4);			// Failed to add field to record.
		static const variable openFileFailed(first + 5);			// Failed to open file : 
		static const variable closeFileFailed(first + 6);			// Failed to close file : 
		static const variable readRecordFailed(first + 7);			// Failed to read record.
		static const variable last(first + 7);							// guard
	}

	// --------------------------------------------------------------------------------------
	// String Ids
	// --------------------------------------------------------------------------------------

	namespace IDS
	{
		static const variable first(IDE::last + 1);					// guard
		static const variable helpFileName(first + 1);				// help file name
		static const variable last(first + 1);							// guard
	}

	#ifndef __HSLStringTableLib_hsl__
	#include "HSLStringTableLib.hs_"
	#endif

	// --------------------------------------------------------------------------------------
	// Library Initialization 
	// --------------------------------------------------------------------------------------

	static variable initializedLib(hslFalse);							// initialization state of the Time Library
	static function InitTimeLibrary();									// initializes the Time Library (only once)

	// --------------------------------------------------------------------------------------
	// Exception handling
	// --------------------------------------------------------------------------------------

	namespace Error
	{
		static function Raise(												// raises a runtime error
			variable errorId,													// i: error id, one of IDE
			variable& fileName,												// i: file name
			variable& funcName,												// i: function name
			variable& lineNumber)											// i: line number
		{
			variable description("");

			// set error description
			description = fileName + "(" + lineNumber + ") : " + funcName + "()\n" + StringTable::Load(errorId);
			err.SetDescription(description);

			// raise error
			err.Raise(errorId, err.GetDescription(), StringTable::Load(IDS::helpFileName));
		}

		static function RaiseEx(
			variable errorId,
			variable errorDetail,
			variable& fileName,
			variable& funcName,
			variable& lineNumber)
		{
			variable description("");

			// set error description
			description = fileName + "(" + lineNumber + ") : " + funcName + "()\n" + StringTable::Load(errorId) + errorDetail;
			err.SetDescription(description);

			// raise error
			err.Raise(errorId, err.GetDescription(), StringTable::Load(IDS::helpFileName));
		}
	}

	// --------------------------------------------------------------------------------------
	// Functions
	// --------------------------------------------------------------------------------------

	static function InitTimeLibrary()
	{
		// initialize the Time Library once only
		if (!initializedLib)
		{
			StringTable::Init("HSLTimLib");
			//StringTable::Dump();
			initializedLib = hslTrue;
		}
		return(initializedLib);
	}
}

// Helper function  
static function TimGetDateTime(variable& commandStr, variable rightOffset, variable width)
{
	file f;
	string dateTime;
	variable length;
	variable nulFile(GetLogFilesPath() + "\\Null_9BA6.txt");			// avoid file name that is too long
	variable tmpFile(GetLogFilesPath() + "\\DateTime_9BA6.txt");	// avoid file names that is too long

	// initialize String Library
	Tim::InitTimeLibrary();

	if (!Shell(timCmdPrompt + " /c echo. > \"" + nulFile + "\"", hslHide, hslSynchronous))
		Tim::Error::Raise(Tim::IDE::shellOutEchoFailed, GetFileName(), GetFunctionName(), GetLineNumber());
	if (!Shell(timCmdPrompt + " /c echo. > \"" + tmpFile + "\"", hslHide, hslSynchronous))
		Tim::Error::Raise(Tim::IDE::shellOutEchoFailed, GetFileName(), GetFunctionName(), GetLineNumber());
	if (!Shell(timCmdPrompt + " /c " + commandStr + " >> " + tmpFile + " < " + nulFile, hslHide, hslSynchronous))
		Tim::Error::Raise(Tim::IDE::shellOutDateTimeFailed, GetFileName(), GetFunctionName(), GetLineNumber());
	f.SetDelimiter(hslAsciiText);
	if (!f.AddField(1, dateTime, hslString))
		Tim::Error::Raise(Tim::IDE::addFieldFailed, GetFileName(), GetFunctionName(), GetLineNumber());
	if (!f.Open(tmpFile, hslRead))
		Tim::Error::RaiseEx(Tim::IDE::openFileFailed, tmpFile, GetFileName(), GetFunctionName(), GetLineNumber());
	if (!f.ReadRecord())
		Tim::Error::Raise(Tim::IDE::readRecordFailed, GetFileName(), GetFunctionName(), GetLineNumber());
	if (!f.ReadRecord())
		Tim::Error::Raise(Tim::IDE::readRecordFailed, GetFileName(), GetFunctionName(), GetLineNumber());
	if (f.Close())
		Tim::Error::RaiseEx(Tim::IDE::closeFileFailed, tmpFile, GetFileName(), GetFunctionName(), GetLineNumber());
	if (!Shell(timCmdPrompt + " /c del \"" + tmpFile + "\"", hslHide, hslSynchronous))
		Tim::Error::Raise(Tim::IDE::shellOutDeleteFailed, GetFileName(), GetFunctionName(), GetLineNumber());
	if (!Shell(timCmdPrompt + " /c del \"" + nulFile + "\"", hslHide, hslSynchronous))
		Tim::Error::Raise(Tim::IDE::shellOutDeleteFailed, GetFileName(), GetFunctionName(), GetLineNumber());
	length = dateTime.GetLength();
	return(dateTime.Mid(length - rightOffset, width));
}

// Returns the current time (string)  
function TimGetTime() variable
{
	return(TimGetDateTime("time", timTimeRightOffset, timTimeWith));
}

// Returns the current date (string)  
function TimGetDate() variable
{
	return(TimGetDateTime("date", timDateRightOffset, timDateWith));
}

// Returns the current formatted time (string)  
function TimGetFormattedTime(variable& format) variable
{
	return(GetTime(format));
}

// Returns the current formatted time (string)  
function TimGetFormattedDate(variable& format) variable
{
	return(GetDate(format));
}

// Wrapper function
function TimWaitTimer(timer& timerObj, variable show) variable
{
	return(timerObj.WaitTimer(show));
}

#endif

#endif
// $$author=wbarmettler$$valid=1$$time=2017-03-09 07:27$$checksum=4c1dc137$$length=090$$