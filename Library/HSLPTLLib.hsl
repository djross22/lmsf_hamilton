// This is a part of the Microlab® STAR Pipetting Template Library (PTL).
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
//
// Modification History
// 2001-06-01  bandenmatten : Initial file creation.
// 2001-08-23  bandenmatten : Modified include HSLPTLLibImpl.hsl -> HSLPTLLibImpl.hs_.
// 2001-11-19  bandenmatten : Added washing functions.
// 2002-01-18  bandenmatten : Added tip handling functions.
// 2001-02-26  bandenmatten : Added functions GetWashingStateDefault and SetWashingStateDefault.
// 2001-02-26  bandenmatten : Added functions GetLoadingStateEx, SetLoadingStateEx and ResetLoadingStateEx.
// 2001-10-28  bandenmatten : Added PTL::IDS::smartStepPipette.
// 2006-03-09  bandenmatten : Added function PTL::Pipette2() (supports array for param volume).
// 2006-03-22  bandenmatten : Added function PTL::Load2() (supports Smart Step 'Load and Match').
// 2006-04-12  bandenmatten : Added PTL::IDS::smartStepLoadAndMatch.
// 2006-04-13  bandenmatten : Included HSLMatchWorklist.hs_.
// 2016-21-09  ubernhard : Added function PTL::Pipette3() and PTL::Pipette4() (supports array for asp/disp sequences).

#ifndef __HSLPTLLib_hsl__
#define __HSLPTLLib_hsl__	1

#ifndef __HSLUtilLib2_hsl__
	#include "HSLUtilLib2.hsl"		// Support for functions Util2::VarArrElementAt() and Util2::SeqArrElementAt()
#endif

#ifndef __HSLMatchWorklistDefs_hs___
	#include "HSLMatchWorklistDefs.hs_"
#endif

#ifndef __HSLMatchWorklist_hs___
	#include "HSLMatchWorklist.hs_"
#endif

// Interface to the Pipetting Template Library
#ifndef HSL_RUNTIME
namespace PTL
{
	// --------------------------------------------------------------------------------------
	// Pipetting
	// --------------------------------------------------------------------------------------

	// The GetPipettingState function retrives the pipetting information 
	// for a specified pipetting control setting. The structure that specifies 
	// the pipetting control settings is the Pipetting Control Block (PCB).

	function GetPipettingState(
		variable& pcbKey,														// i: the name of the pipetting control setting
		variable& pcbValue)													// o: a reference to a variable to retrieve the value of the pipetting control setting
	{}

	// The GetPipettingSequence function retrives the pipetting information 
	// for a specified pipetting sequence. The structure that specifies 
	// the pipetting control settings is the Pipetting Control Block (PCB).

	function GetPipettingSequence(
		variable& pcbKey,														// i: the name of the pipetting sequence
		sequence& pcbValue)													// o: a reference to a sequence to retrieve the value of the pipetting sequence
	{}

	// The SetPipettingState function sets the pipetting information 
	// for a specified pipetting control setting. The structure that specifies 
	// the pipetting control settings is the Pipetting Control Block (PCB).

	function SetPipettingState(
		variable& pcbKey,														// i: the name of the pipetting control setting
		variable& pcbValue)													// i: the value of the pipetting control setting
	{}

	// The SetPipettingSequence function sets the pipetting information 
	// for a specified pipetting sequence. The structure that specifies 
	// the pipetting control settings is the Pipetting Control Block (PCB).

	function SetPipettingSequence(
		variable& pcbKey,														// i: the name of the pipetting sequence
		sequence& pcbValue)													// i: the value of the pipetting sequence
	{}

	// The ResetPipettingStateAndSequences function resets the pipetting information 
	// for all pipetting control settings and sequences to their default 
	// values. The structure that specifies the pipetting control settings 
	// is the Pipetting Control Block (PCB).

	function ResetPipettingStateAndSequences(
		variable& pipettingCfgFile)										// i: the name of a file that specifies one or more values of the pipetting control settings (string; may be empty)
	{}

	// The Pipette function implements a simple pipetting procedure on a Microlab® STAR 
	// as the single aspirating and subsequent complete dispensing of a liquid volume. 

	function Pipette(
		device& ML_STAR,														// i: pipetting device
		sequence& tipPickupSequence,										// i/o: tip pickup sequence
		sequence& aspirateSequence,										// i/o: aspirate sequence
		sequence& dispenseSequence,										// i/o: dispense sequence
		variable aspirateMultiplicity,									// i:	aspirate multiplicity (integer) 
		variable dispenseMultiplicity,									// i:	dispense multiplicity (integer)
		variable pipettingVolume,											// i: total pipetting volume [ul] (integer)
		variable restVolume,													// i: rest volume after dispense [ul] (integer)
		variable drivingMode,												// i: driving mode, ( 1 = aspirate driven, 2 = dispense driven)
		variable tipRenewalCycleSeq,										// i:	tip renewal cycle in the sequence loop (integer)
		variable tipRenewalCycleMul,										// i:	tip renewal cycle in the multiplicity loop (integer)
		variable tipRenewalCycleVol,										// i:	tip renewal cycle in the volume loop (integer)
		variable& tipType)													// i: tip type, UNUSED, one of {"LowVolumeTip", "StandardVolumeTip", "HighVolumeTip", "LowVolumeTipWithFilter", "StandardVolumeTipWithFilter", "HighVolumeTipWithFilter"}
	{}

	function Pipette2(
		device& ML_STAR,														// i: pipetting device
		sequence& tipPickupSequence,										// i/o: tip pickup sequence
		sequence& aspirateSequence,										// i/o: aspirate sequence
		sequence& dispenseSequence,										// i/o: dispense sequence
		variable aspirateMultiplicity,									// i:	aspirate multiplicity (integer) 
		variable dispenseMultiplicity,									// i:	dispense multiplicity (integer)
		variable& pipettingVolumes[],										// i: total pipetting volumes [ul] (integer)
		variable restVolume,													// i: rest volume after dispense [ul] (integer)
		variable drivingMode,												// i: driving mode, ( 1 = aspirate driven, 2 = dispense driven)
		variable tipRenewalCycleSeq,										// i:	tip renewal cycle in the sequence loop (integer)
		variable tipRenewalCycleMul,										// i:	tip renewal cycle in the multiplicity loop (integer)
		variable tipRenewalCycleVol,										// i:	tip renewal cycle in the volume loop (integer)
		variable& tipType)													// i: tip type, UNUSED, one of {"LowVolumeTip", "StandardVolumeTip", "HighVolumeTip", "LowVolumeTipWithFilter", "StandardVolumeTipWithFilter", "HighVolumeTipWithFilter"}
	{}

	function Pipette3(
		device& ML_STAR,														// i: pipetting device
		sequence& tipPickupSequence,										// i/o: tip pickup sequence
		sequence& aspirateSequences[],									// i/o: array of aspirate sequences
		sequence& dispenseSequences[],									// i/o: array of dispense sequences
		variable aspirateMultiplicity,									// i:	aspirate multiplicity (integer) 
		variable dispenseMultiplicity,									// i:	dispense multiplicity (integer)
		variable pipettingVolume,  										// i: total pipetting volume [ul] (integer)
		variable restVolume,													// i: rest volume after dispense [ul] (integer)
		variable drivingMode,												// i: driving mode, ( 1 = aspirate driven, 2 = dispense driven)
		variable tipRenewalCycleSeq,										// i:	tip renewal cycle in the sequence loop (integer)
		variable tipRenewalCycleMul,										// i:	tip renewal cycle in the multiplicity loop (integer)
		variable tipRenewalCycleVol,										// i:	tip renewal cycle in the volume loop (integer)
		variable& tipType,													// i: tip type, UNUSED, one of {"LowVolumeTip", "StandardVolumeTip", "HighVolumeTip", "LowVolumeTipWithFilter", "StandardVolumeTipWithFilter", "HighVolumeTipWithFilter"}
      sequence& seqMergedAspirate,                             // o: merged aspirate sequence 
      sequence& seqMergedDispense)                             // o: merged dispense sequence
	{}

	function Pipette4(
		device& ML_STAR,														// i: pipetting device
		sequence& tipPickupSequence,										// i/o: tip pickup sequence
		sequence& aspirateSequences[],									// i/o: array of aspirate sequences
		sequence& dispenseSequences[],									// i/o: array of dispense sequences
		variable aspirateMultiplicity,									// i:	aspirate multiplicity (integer) 
		variable dispenseMultiplicity,									// i:	dispense multiplicity (integer)
		variable& pipettingVolumes[],										// i: total pipetting volumes [ul] (integer)
		variable restVolume,													// i: rest volume after dispense [ul] (integer)
		variable drivingMode,												// i: driving mode, ( 1 = aspirate driven, 2 = dispense driven)
		variable tipRenewalCycleSeq,										// i:	tip renewal cycle in the sequence loop (integer)
		variable tipRenewalCycleMul,										// i:	tip renewal cycle in the multiplicity loop (integer)
		variable tipRenewalCycleVol,										// i:	tip renewal cycle in the volume loop (integer)
		variable& tipType,													// i: tip type, UNUSED, one of {"LowVolumeTip", "StandardVolumeTip", "HighVolumeTip", "LowVolumeTipWithFilter", "StandardVolumeTipWithFilter", "HighVolumeTipWithFilter"}
      sequence& seqMergedAspirate,                             // o: merged aspirate sequence 
      sequence& seqMergedDispense)                             // o: merged dispense sequence
	{}

	// --------------------------------------------------------------------------------------
	// Loading
	// --------------------------------------------------------------------------------------
	
	// The GetLoadingStateEx function retrives the loading information for a specified loading 
	// control setting. The structure that specifies the loading control settings is the Loading 
	// Control Block (LCB).

	function GetLoadingStateEx(
		device& ML_STAR,														// i: the loading device (a Microlab® STAR)
		sequence& sequenceObj,												// i: the loading sequence
		variable& lcbKey, 													// i: the key of the loading control setting (string)
		variable& lcbValue)													// i: a reference to a variable to retrieve the values of the loading control setting (integer, float, or string)
	{}

	// The SetLoadingStateEx function sets the loading information for a specified loading control 
	// setting. The structure that specifies the loading control settings is the Loading Control 
	// Block (LCB).

	function SetLoadingStateEx(
		device& ML_STAR, 														// i: the loading device (a Microlab® STAR)
		sequence& sequenceObj, 												// i: the loading sequence
		variable& lcbKey, 													// i: the loading sequence
		variable& lcbValue,													// i: the value of the loading control setting (integer, float, or string)
		variable lcbStatus)													// i: the status of the SetLoadingStateEx function (0 = start, 1 = progress, 2 = complete)
	{}

	// The ResetLoadingStateEx function resets the loading information of all advanced loading 
	// control settings of the specified sequence to their default values.

	function ResetLoadingStateEx(
		device& ML_STAR, 														// i: the loading device (a Microlab® STAR)
		sequence& sequenceObj) 												// i: the loading sequence
	{}

	// The GetLoadingState function retrives the loading information 
	// for a specified loading control setting. The structure that specifies 
	// the loading control settings is the Loading Control Block (LCB).

	function GetLoadingState(
		variable& lcbKey,														// i: the name of the loading control setting
		variable& lcbValue)													// o: a reference to a variable to retrieve the value of the loading control setting
	{}

	// The SetLoadingState function sets the loading information 
	// for a specified loading control setting. The structure that specifies 
	// the loading control settings is the Loading Control Block (LCB).

	function SetLoadingState(
		variable& lcbKey,														// i: the name of the loading control setting
		variable& lcbValue)													// i: the value of the loading control setting
	{}

	// The GetLoadingStateDefault function gets the loading state default for a specified 
	// loading control setting. The structure that specifies the loading control settings 
	// is the Loading Control Block (LCB).

	function GetLoadingStateDefault(
		variable& lcbKey, 													// i: the key of the loading control setting (string)
		variable& lcbValue)													// i: a reference to a variable to retrieve the default value of the specified loading control setting (integer, float, or string)
	{}

	// The SetLoadingStateDefault function sets the loading state default for a specified 
	// loading control setting. The structure that specifies the loading control settings 
	// is the Loading Control Block (LCB).

	function SetLoadingStateDefault(
		variable& lcbKey,  													// i: the key of the loading control setting (string)
		variable& lcbValue) 													// i: the default value of the loading control setting (integer, float, or string)
	{}

	// Establishes the loading size. Since indexes are zero-based, 
	// the loading size is 1 greater than the largest index.

	function SetLoadingSize(
		variable newSize)														// i: the new loading size (number of sequences)
	{}

	// Returns the loading size. Since indexes are zero-based, 
	// the loading size is 1 greater than the largest index.

	function GetLoadingSize()
	{}

	// Sets the sequence to load at the specified index.

	function SetLoadingSequence(
		variable index,														// i: an integer index that is greater than or equal to 0 and less than the value returned by GetLoadSize()
		sequence& sequenceObj,												// i: the sequence object 
		variable first,														// i: the first position in the sequence (integer)
		variable last,															// i: the last position in the sequence (integer)
		variable editable,													// i: specifies whether sequence editing by the user is enabled (hslTrue or hslFalse)
		variable readTipCount,												// i: specifies whether to read the tip count from the file HxTipCount.xls in the LogFiles directory (hslTrue or hslFalse)
		variable& tipCountIdentifier)										// i: tip count identifier (string)
	{}

	// Gets the sequence loaded at the specified index.

	function GetLoadingSequence(
		variable index,														// i: an integer index that is greater than or equal to 0 and less than the value returned by GetLoadSize()
		sequence& sequenceObj)												// i: a reference to a sequence to retrieve the sequence loaded at the specified index
	{}

	// The ResetLoadingStateAndSequences function resets the loading 
	// information for all loading control settings and sequences to 
	// their default values.

	function ResetLoadingStateAndSequences()
	{}

	// The Load function loads all sequences previously set via the SetLoadSequence 
	// and provides a way to reduce these sequences graphically.

	function Load(
		device& ML_STAR,														// i: the loading device 
		variable calibrateSequences)										// i: indicates if carriers should be calibrated (if supported)
	{}

	// The Load2 function loads the sequence previously set via the SetLoadSequence 
	// and provides a way to reduce this sequence graphically (supports Smart Step 'Load and Match').

	function Load2(
		device& ML_STAR,														// [in] The loading device 
		variable calibrateSequences,										// [in] Indicates whether carriers should be calibrated (0 = don't calibrate, 1 = calibrate if supported)
		variable scanAutoloadTray,											// [in] Indicates whether to scan the the Microlab® STAR's autoload try and to load only those carriers that have been detected (0 = don't scan, 1 = scan)
		variable unloadUnusedSampleTubes) variable					// [in] Indicates whether to unload unused sample tubes (0 = don't unload, 1 = unload)
	{return(0);}

	// --------------------------------------------------------------------------------------
	// Unloading
	// --------------------------------------------------------------------------------------

	// The GetUnloadingState function retrives the unloading information 
	// for a specified unloading control setting. The structure that specifies 
	// the unloading control settings is the Unloading Control Block (UCB).

	function GetUnloadingState(
		variable& ucbKey,														// i: the name of the unloading control setting
		variable& ucbValue)													// o: a reference to a variable to retrieve the value of the loading control setting
	{}

	// The SetUnloadingState function sets the unloading information 
	// for a specified unloading control setting. The structure that specifies 
	// the unloading control settings is the Unloading Control Block (UCB).

	function SetUnloadingState(
		variable& ucbKey,														// i: the name of the unloading control setting
		variable& ucbValue)													// i: the value of the unloading control setting
	{}

	// Establishes the unloading size. Since indexes are zero-based, 
	// the unloading size is 1 greater than the largest index.

	function SetUnloadingSize(
		variable newSize)														// i: the new unloading size (number of sequences)
	{}

	// Returns the unloading size. Since indexes are zero-based, 
	// the unloading size is 1 greater than the largest index.

	function GetUnloadingSize()
	{}

	// Sets the sequence to be unloaded at the specified index.

	function SetUnloadingSequence(
		variable index,														// i: an integer index that is greater than or equal to 0 and less than the value returned by GetUnloadSize()
		sequence& sequenceObj,												// i: the sequence object 
		variable writeTipCount,												// i: specifies whether to write the tip count to the file HxTipCount.xls in the LogFiles directory (hslTrue or hslFalse)
		variable& tipCountIdentifier)										// i: tip count identifier (string)
	{}

	// Gets the sequence to be unloaded at the specified index.

	function GetUnloadingSequence(
		variable index,														// i: an integer index that is greater than or equal to 0 and less than the value returned by GetUnloadSize()
		sequence& sequenceObj)												// i: a reference to a sequence to retrieve the sequence to be unloaded at the specified index
	{}

	// The ResetUnloadingStateAndSequences function resets the unloading 
	// information for all unloading control settings and sequences to 
	// their default values.

	function ResetUnloadingStateAndSequences()
	{}

	// The Unload function unloads all sequences previously set via the SetUnloadSequence.

	function Unload(
		device& ML_STAR)														// i: the unloading device 
	{}

	// --------------------------------------------------------------------------------------
	// Washing
	// --------------------------------------------------------------------------------------

	// The GetWashingState function retrives the washing information 
	// for a specified wash sequence and washing control setting. 
	// The structure that specifies the washing control settings is 
	// the Washing Control Block (WCB).

	function GetWashingState(
		device& ML_STAR,														// i: the washing device 
		sequence& washSequence,												// i: the wash sequence
		variable& wcbKey,														// i: the name of the washing control setting
		variable& wcbValue[],												// o: a reference to an array of variables to retrieve the values of the washing control setting per wash station
		variable& wcbLabId[])												// o: a reference to an array of variables to retrieve the labware ids of the wash station
	{}

	// The SetWashingState function sets the washing information 
	// for a specified wash sequence and washing control setting. 
	// The structure that specifies the washing control settings is 
	// the Washing Control Block (WCB).

	function SetWashingState(
		device& ML_STAR,														// i: the washing device 
		sequence& washSequence,												// i: the wash sequence
		variable& wcbKey,														// i: the name of the washing control setting
		variable& wcbValue,													// i: the value of the washing control setting
		variable wcbStatus)													// i: the status of the SetWashingState function (0 = start, 1 = progress, 2 = complete)
	{}

	// The ResetWashingState function resets the washing 
	// information of all washing control settings of the 
	// specified wash sequence to their default values.

	function ResetWashingState(
		device& ML_STAR,														// i: the washing device 
		sequence& washSequence)												// i: the wash sequence
	{}

	// The GetWashingStateDefault function gets the washing state 
	// default for a specified washing control setting out of the 
	// following subset of the Washing Control Block (WCB):
	//		RinseTime1
	//		SoakTime1
	//		FlowRate1
	//		RinseTime2
	//		SoakTime2
	//		FlowRate2
	//		DrainingTime
	//		StartWashLiquid

	function GetWashingStateDefault(
		variable& wcbKey,														// i: the name of the washing control setting
		variable& wcbValue)													// o: a reference to a variable to retrieve the value of the washing control setting
	{}

	// The SetWashingStateDefault function sets the washing state 
	// default for a specified washing control setting out of the 
	// following subset of the Washing Control Block (WCB):
	//		RinseTime1
	//		SoakTime1
	//		FlowRate1
	//		RinseTime2
	//		SoakTime2
	//		FlowRate2
	//		DrainingTime
	//		StartWashLiquid

	function SetWashingStateDefault(
		variable& wcbKey,														// i: the name of the washing control setting
		variable& wcbValue)													// i: the default value of the washing control setting
	{}

	// The NeedlePickup function picks up needls from the given wash sequence.

	function NeedlePickup(
		device& ML_STAR,														// i: the washing device 
		sequence& washSequence,												// i/o: wash sequence
		variable autoIncrement)												// i: specifies whether the wash sequence should be incremented automatically (hslTrue or hslFalse)
	{}

	// The NeedleEject function ejects needls to the given wash sequence.

	function NeedleEject(
		device& ML_STAR,														// i: the washing device 
		sequence& washSequence,												// i/o: wash sequence
		variable startWash)													// i: specifies whether the needls should be washed after they have been ejected (hslTrue or hslFalse)
	{}

	// --------------------------------------------------------------------------------------
	// Tip Handling
	// --------------------------------------------------------------------------------------

	// The GetTipHandlingState function retrives the tip handling information 
	// for a specified tip handling control setting. 
	// The structure that specifies the tip handling control settings is 
	// the Tip Handling Control Block (TCB).

	function GetTipHandlingState(
		variable& tcbKey,														// i: the name of the tip handling control setting
		variable& tcbValue)													// o: a reference to a variable to retrieve the value of the tip handling control setting
	{}

	// The SetTipHandlingState function sets the tip handling information 
	// for a specified tip handling control setting. 
	// The structure that specifies the tip handling control settings is 
	// the Tip Handling Control Block (TCB).

	function SetTipHandlingState(
		variable& tcbKey,														// i: the name of the tip handling control setting
		variable& tcbValue)													// i: the value of the tip handling control setting
	{}

	// The ResetTipHandlingState function resets the tip handling 
	// information of all tip handling control settings to their 
	// default values.

	function ResetTipHandlingState()
	{}

	// The TipPickup function picks up tips from the given tip pickup sequence.

	function TipPickup(
		device& ML_STAR,														// i: the tip handling device 
		sequence& tipPickupSequence)										// i/o: tip pickup sequence
	{}

	// The TipEject function ejects tips to the default waste destination.

	function TipEject(
		device& ML_STAR)														// i: the tip handling device 
	{}

	// --------------------------------------------------------------------------------------
	// Error Handling
	// --------------------------------------------------------------------------------------

	static function RaiseRuntimeError(									// raises a runtime error
		variable errorId,														// i: error id (integer)
		variable stepNameStrTblId,											// i: step name string table id (integer)
		variable errorDescriptionStrTblId,								// i: error description string table id (integer)
		variable& moduleName)												// i: name of module supplying help for the errorId (string), e.g. HxGruCompCmd
	{}

	// --------------------------------------------------------------------------------------
	// String Ids
	// --------------------------------------------------------------------------------------

	namespace IDS
	{
		static const variable smartStepPipetteWithTips;			// smart step name (obsolete)
		static const variable smartStepAdvancedLoadSettings;	// smart step name
		static const variable smartStepLoad;						// smart step name
		static const variable smartStepUnload;						// smart step name
		static const variable smartStepNeedleWashSettings;		// smart step name
		static const variable smartStepNeedlePickup;				// smart step name
		static const variable smartStepNeedleEject;				// smart step name
		static const variable smartStepTipPickup;					// smart step name
		static const variable smartStepTipEject;					// smart step name
		static const variable smartStepRuntimeError;				// smart step runtime error 
		static const variable smartStepUnspecifiedError;		// smart step unspecified error 
		static const variable smartStepFailed;						// smart step failed 
		static const variable smartStepPipette;					// smart step name
		static const variable smartStepLoadAndMatch;				// smart step name
	}
}
#endif

#ifdef HSL_RUNTIME
namespace PTL
{
	// --------------------------------------------------------------------------------------
	// Pipetting
	// --------------------------------------------------------------------------------------

	// The GetPipettingState function retrives the pipetting information 
	// for a specified pipetting control setting. The structure that specifies 
	// the pipetting control settings is the Pipetting Control Block (PCB).

	function GetPipettingState(
		variable& pcbKey,														// i: the name of the pipetting control setting
		variable& pcbValue);													// o: a reference to a variable to retrieve the value of the pipetting control setting

	// The GetPipettingSequence function retrives the pipetting information 
	// for a specified pipetting sequence. The structure that specifies 
	// the pipetting control settings is the Pipetting Control Block (PCB).

	function GetPipettingSequence(
		variable& pcbKey,														// i: the name of the pipetting sequence
		sequence& pcbValue);													// o: a reference to a sequence to retrieve the value of the pipetting sequence

	// The SetPipettingState function sets the pipetting information 
	// for a specified pipetting control setting. The structure that specifies 
	// the pipetting control settings is the Pipetting Control Block (PCB).

	function SetPipettingState(
		variable& pcbKey,														// i: the name of the pipetting control setting
		variable& pcbValue);													// i: the value of the pipetting control setting

	// The SetPipettingSequence function sets the pipetting information 
	// for a specified pipetting sequence. The structure that specifies 
	// the pipetting control settings is the Pipetting Control Block (PCB).

	function SetPipettingSequence(
		variable& pcbKey,														// i: the name of the pipetting sequence
		sequence& pcbValue);													// i: the value of the pipetting sequence

	// The ResetPipettingStateAndSequences function resets the pipetting information 
	// for all pipetting control settings and sequences to their default 
	// value. The structure that specifies the pipetting control settings 
	// is the Pipetting Control Block (PCB).

	function ResetPipettingStateAndSequences(
		variable& pipettingCfgFile);										// i: the name of a file that specifies one or more values of the pipetting control settings (string; may be empty)

	// The Pipette function implements a simple pipetting procedure on a Microlab® STAR 
	// as the single aspirating and subsequent complete dispensing of a liquid volume. 

	function Pipette(
		device& ML_STAR,														// i: pipetting device
		sequence& tipPickupSequence,										// i/o: tip pickup sequence
		sequence& aspirateSequence,										// i/o: aspirate sequence
		sequence& dispenseSequence,										// i/o: dispense sequence
		variable aspirateMultiplicity,									// i:	aspirate multiplicity (integer) 
		variable dispenseMultiplicity,									// i:	dispense multiplicity (integer)
		variable pipettingVolume,											// i: total pipetting volume [ul] (integer)
		variable restVolume,													// i: rest volume after dispense [ul] (integer)
		variable drivingMode,												// i: driving mode, ( 1 = aspirate driven, 2 = dispense driven)
		variable tipRenewalCycleSeq,										// i:	tip renewal cycle in the sequence loop (integer)
		variable tipRenewalCycleMul,										// i:	tip renewal cycle in the multiplicity loop (integer)
		variable tipRenewalCycleVol,										// i:	tip renewal cycle in the volume loop (integer)
		variable& tipType);													// i: tip type, one of {"LowVolumeTip", "StandardVolumeTip", "HighVolumeTip", "LowVolumeTipWithFilter", "StandardVolumeTipWithFilter", "HighVolumeTipWithFilter"}

	function Pipette2(
		device& ML_STAR,														// i: pipetting device
		sequence& tipPickupSequence,										// i/o: tip pickup sequence
		sequence& aspirateSequence,										// i/o: aspirate sequence
		sequence& dispenseSequence,										// i/o: dispense sequence
		variable aspirateMultiplicity,									// i:	aspirate multiplicity (integer) 
		variable dispenseMultiplicity,									// i:	dispense multiplicity (integer)
		variable& pipettingVolumes[],										// i: total pipetting volumes [ul] (integer)
		variable restVolume,													// i: rest volume after dispense [ul] (integer)
		variable drivingMode,												// i: driving mode, ( 1 = aspirate driven, 2 = dispense driven)
		variable tipRenewalCycleSeq,										// i:	tip renewal cycle in the sequence loop (integer)
		variable tipRenewalCycleMul,										// i:	tip renewal cycle in the multiplicity loop (integer)
		variable tipRenewalCycleVol,										// i:	tip renewal cycle in the volume loop (integer)
		variable& tipType);													// i: tip type, one of {"LowVolumeTip", "StandardVolumeTip", "HighVolumeTip", "LowVolumeTipWithFilter", "StandardVolumeTipWithFilter", "HighVolumeTipWithFilter"}

	function Pipette3(
		device& ML_STAR,														// i: pipetting device
		sequence& tipPickupSequence,										// i/o: tip pickup sequence
		sequence& aspirateSequences[],									// i/o: array of aspirate sequences
		sequence& dispenseSequences[],									// i/o: array of dispense sequences
		variable aspirateMultiplicity,									// i:	aspirate multiplicity (integer) 
		variable dispenseMultiplicity,									// i:	dispense multiplicity (integer)
		variable pipettingVolume,  										// i: total pipetting volume [ul] (integer)
		variable restVolume,													// i: rest volume after dispense [ul] (integer)
		variable drivingMode,												// i: driving mode, ( 1 = aspirate driven, 2 = dispense driven)
		variable tipRenewalCycleSeq,										// i:	tip renewal cycle in the sequence loop (integer)
		variable tipRenewalCycleMul,										// i:	tip renewal cycle in the multiplicity loop (integer)
		variable tipRenewalCycleVol,										// i:	tip renewal cycle in the volume loop (integer)
		variable& tipType,													// i: tip type, UNUSED, one of {"LowVolumeTip", "StandardVolumeTip", "HighVolumeTip", "LowVolumeTipWithFilter", "StandardVolumeTipWithFilter", "HighVolumeTipWithFilter"}
      sequence& seqMergedAspirate,                             // o: merged aspirate sequence 
      sequence& seqMergedDispense);                            // o: merged dispense sequence

	function Pipette4(
		device& ML_STAR,														// i: pipetting device
		sequence& tipPickupSequence,										// i/o: tip pickup sequence
		sequence& aspirateSequences[],									// i/o: array of aspirate sequences
		sequence& dispenseSequences[],									// i/o: array of dispense sequences
		variable aspirateMultiplicity,									// i:	aspirate multiplicity (integer) 
		variable dispenseMultiplicity,									// i:	dispense multiplicity (integer)
		variable& pipettingVolumes[],										// i: total pipetting volumes [ul] (integer)
		variable restVolume,													// i: rest volume after dispense [ul] (integer)
		variable drivingMode,												// i: driving mode, ( 1 = aspirate driven, 2 = dispense driven)
		variable tipRenewalCycleSeq,										// i:	tip renewal cycle in the sequence loop (integer)
		variable tipRenewalCycleMul,										// i:	tip renewal cycle in the multiplicity loop (integer)
		variable tipRenewalCycleVol,										// i:	tip renewal cycle in the volume loop (integer)
		variable& tipType,													// i: tip type, UNUSED, one of {"LowVolumeTip", "StandardVolumeTip", "HighVolumeTip", "LowVolumeTipWithFilter", "StandardVolumeTipWithFilter", "HighVolumeTipWithFilter"}
      sequence& seqMergedAspirate,                             // o: merged aspirate sequence 
      sequence& seqMergedDispense);                            // o: merged dispense sequence

	// --------------------------------------------------------------------------------------
	// Loading
	// --------------------------------------------------------------------------------------
	
	// The GetLoadingStateEx function retrives the loading information for a specified loading 
	// control setting. The structure that specifies the loading control settings is the Loading 
	// Control Block (LCB).

	function GetLoadingStateEx(
		device& ML_STAR,														// i: the loading device (a Microlab® STAR)
		sequence& sequenceObj,												// i: the loading sequence
		variable& lcbKey, 													// i: the key of the loading control setting (string)
		variable& lcbValue);													// i: a reference to a variable to retrieve the values of the loading control setting (integer, float, or string)

	// The SetLoadingStateEx function sets the washing information for a specified loading control 
	// setting. The structure that specifies the loading control settings is the Loading Control 
	// Block (LCB).

	function SetLoadingStateEx(
		device& ML_STAR, 														// i: the loading device (a Microlab® STAR)
		sequence& sequenceObj, 												// i: the loading sequence
		variable& lcbKey, 													// i: the loading sequence
		variable& lcbValue,													// i: the value of the loading control setting (integer, float, or string)
		variable lcbStatus);													// i: the status of the SetLoadingStateEx function (0 = start, 1 = progress, 2 = complete)

	// The ResetLoadingStateEx function resets the loading information of all advanced loading 
	// control settings of the specified sequence to their default values.

	function ResetLoadingStateEx(
	device& ML_STAR, 															// i: the loading device (a Microlab® STAR)
	sequence& sequenceObj); 												// i: the loading sequence

	// The GetLoadingState function retrives the loading information 
	// for a specified loading control setting. The structure that specifies 
	// the loading control settings is the Loading Control Block (LCB).

	function GetLoadingState(
		variable& lcbKey,														// i: the name of the loading control setting
		variable& lcbValue);													// o: a reference to a variable to retrieve the value of the loading control setting

	// The SetLoadingState function sets the loading information 
	// for a specified loading control setting. The structure that specifies 
	// the loading control settings is the Loading Control Block (LCB).

	function SetLoadingState(
		variable& lcbKey,														// i: the name of the loading control setting
		variable& lcbValue);													// i: the value of the loading control setting

	// Establishes the loading size. Since indexes are zero-based, 
	// the loading size is 1 greater than the largest index.

	function GetLoadingStateDefault(
		variable& lcbKey, 													// i: the key of the loading control setting (string)
		variable& lcbValue);													// i: a reference to a variable to retrieve the default value of the specified loading control setting (integer, float, or string)

	// The SetLoadingStateDefault function sets the loading state default for a specified 
	// loading control setting. The structure that specifies the loading control settings 
	// is the Loading Control Block (LCB).

	function SetLoadingStateDefault(
		variable& lcbKey,  													// i: the key of the loading control setting (string)
		variable& lcbValue); 												// i: the default value of the loading control setting (integer, float, or string)

	function SetLoadingSize(
		variable newSize);													// i: the new loading size (number of sequences)

	// Returns the loading size. Since indexes are zero-based, the 
	// loading size is 1 greater than the largest index.

	function GetLoadingSize();

	// Sets the sequence to load at the specified index.

	function SetLoadingSequence(
		variable index,														// i: an integer index that is greater than or equal to 0 and less than the value returned by GetLoadSize()
		sequence& sequenceObj,												// i: the sequence object 
		variable first,														// i: the first position in the sequence (integer)
		variable last,															// i: the last position in the sequence (integer)
		variable editable,													// i: specifies whether sequence editing by the user is enabled (hslTrue or hslFalse)
		variable readTipCount,												// i: specifies whether to read the tip count from the file HxTipCount.xls in the LogFiles directory (hslTrue or hslFalse)
		variable& tipCountIdentifier);									// i: tip count identifier (string)

	// Gets the sequence loaded at the specified index.

	function GetLoadingSequence(
		variable index,														// i: an integer index that is greater than or equal to 0 and less than the value returned by GetLoadSize()
		sequence& sequenceObj);												// i: a reference to a sequence to retrieve the sequence loaded at the specified index

	// The ResetLoadingStateAndSequences function resets the loading 
	// information for all loading control settings and sequences to 
	// their default values.

	function ResetLoadingStateAndSequences();

	// The Load function loads all sequences previously set via the SetLoadSequence 
	// and provides a way to reduce these sequences graphically.

	function Load(
		device& ML_STAR,														// i: the loading device 
		variable calibrateSequences);										// i: indicates if carriers should be calibrated (if supported)

	// The Load2 function loads the sequence previously set via the SetLoadSequence 
	// and provides a way to reduce this sequence graphically (supports Smart Step 'Load and Match').

	function Load2(
		device& ML_STAR,														// [in] The loading device 
		variable calibrateSequences,										// [in] Indicates whether carriers should be calibrated (0 = don't calibrate, 1 = calibrate if supported)
		variable scanAutoloadTray,											// [in] Indicates whether to scan the the Microlab® STAR's autoload try and to load only those carriers that have been detected (0 = don't scan, 1 = scan)
		variable unloadUnusedSampleTubes) variable;					// [in] Indicates whether to unload unused sample tubes (0 = don't unload, 1 = unload)

	// --------------------------------------------------------------------------------------
	// Unloading
	// --------------------------------------------------------------------------------------

	// The GetUnloadingState function retrives the unloading information 
	// for a specified unloading control setting. The structure that specifies 
	// the unloading control settings is the Unloading Control Block (UCB).

	function GetUnloadingState(
		variable& ucbKey,														// i: the name of the loading control setting
		variable& ucbValue);													// o: a reference to a variable to retrieve the value of the loading control setting

	// The SetUnloadingState function sets the unloading information 
	// for a specified unloading control setting. The structure that specifies 
	// the unloading control settings is the Unloading Control Block (UCB).

	function SetUnloadingState(
		variable& ucbKey,														// i: the name of the unloading control setting
		variable& ucbValue);													// i: the value of the unloading control setting

	// Establishes the unloading size. Since indexes are zero-based, 
	// the unloading size is 1 greater than the largest index.

	function SetUnloadingSize(
		variable newSize);													// i: the new unloading size (number of sequences)

	// Returns the unloading size. Since indexes are zero-based, 
	// the unloading size is 1 greater than the largest index.

	function GetUnloadingSize();

	// Sets the sequence to be unloaded at the specified index.

	function SetUnloadingSequence(
		variable index,														// i: an integer index that is greater than or equal to 0 and less than the value returned by GetUnloadSize()
		sequence& sequenceObj,												// i: the sequence object 
		variable writeTipCount,												// i: specifies whether to write the tip count to the file HxTipCount.xls in the LogFiles directory (hslTrue or hslFalse)
		variable& tipCountIdentifier);									// i: tip count identifier (string)

	// Gets the sequence to be unloaded at the specified index.

	function GetUnloadingSequence(
		variable index,														// i: an integer index that is greater than or equal to 0 and less than the value returned by GetUnloadSize()
		sequence& sequenceObj);												// i: a reference to a sequence to retrieve the sequence to be unloaded at the specified index

	// The ResetUnloadingStateAndSequences function resets the unloading 
	// information for all unloading control settings and sequences to 
	// their default values.

	function ResetUnloadingStateAndSequences();

	// The Unload function unloads all sequences previously set via the SetUnloadSequence.

	function Unload(
		device& ML_STAR);														// i: the unloading device 

	// --------------------------------------------------------------------------------------
	// Washing
	// --------------------------------------------------------------------------------------

	// The GetWashingState function retrives the washing information 
	// for a specified wash sequence and washing control setting. 
	// The structure that specifies the washing control settings is 
	// the Washing Control Block (WCB).

	function GetWashingState(
		device& ML_STAR,														// i: the washing device 
		sequence& washSequence,												// i: the wash sequence
		variable& wcbKey,														// i: the name of the washing control setting
		variable& wcbValue[],												// o: a reference to an array of variables to retrieve the values of the washing control setting per wash station
		variable& wcbLabId[]);												// o: a reference to an array of variables to retrieve the labware ids of the wash station

	// The SetWashingState function sets the washing information 
	// for a specified wash sequence and washing control setting. 
	// The structure that specifies the washing control settings is 
	// the Washing Control Block (WCB).

	function SetWashingState(
		device& ML_STAR,														// i: the washing device 
		sequence& washSequence,												// i: the wash sequence
		variable& wcbKey,														// i: the name of the washing control setting
		variable& wcbValue,													// i: the value of the washing control setting
		variable wcbStatus);													// i: the status of the SetWashingState function (0 = start, 1 = progress, 2 = complete)

	// The ResetWashingState function resets the washing 
	// information of all washing control settings of the 
	// specified wash sequence to their default values.

	function ResetWashingState(
		device& ML_STAR,														// i: the washing device 
		sequence& washSequence);											// i: the wash sequence

	// The GetWashingStateDefault function gets the washing state 
	// default for a specified washing control setting out of the 
	// following subset of the Washing Control Block (WCB):
	//		RinseTime1
	//		SoakTime1
	//		FlowRate1
	//		RinseTime2
	//		SoakTime2
	//		FlowRate2
	//		DrainingTime
	//		StartWashLiquid

	function GetWashingStateDefault(
		variable& wcbKey,														// i: the name of the washing control setting
		variable& wcbValue);													// o: a reference to a variable to retrieve the value of the washing control setting

	// The SetWashingStateDefault function sets the washing state 
	// default for a specified washing control setting out of the 
	// following subset of the Washing Control Block (WCB):
	//		RinseTime1
	//		SoakTime1
	//		FlowRate1
	//		RinseTime2
	//		SoakTime2
	//		FlowRate2
	//		DrainingTime
	//		StartWashLiquid

	function SetWashingStateDefault(
		variable& wcbKey,														// i: the name of the washing control setting
		variable& wcbValue);													// i: the default value of the washing control setting

	// The NeedlePickup function picks up needls from the given wash sequence.

	function NeedlePickup(
		device& ML_STAR,														// i: the washing device 
		sequence& washSequence,												// i/o: wash sequence
		variable autoIncrement);											// i: specifies whether the wash sequence should be incremented automatically (hslTrue or hslFalse)

	// The NeedleEject function ejects needls to the given wash sequence.

	function NeedleEject(
		device& ML_STAR,														// i: the washing device 
		sequence& washSequence,												// i/o: wash sequence
		variable startWash);													// i: specifies whether the needls should be washed after they have been ejected (hslTrue or hslFalse)

	// --------------------------------------------------------------------------------------
	// Tip Handling
	// --------------------------------------------------------------------------------------

	// The GetTipHandlingState function retrives the tip handling information 
	// for a specified tip handling control setting. 
	// The structure that specifies the tip handling control settings is 
	// the Tip Handling Control Block (TCB).

	function GetTipHandlingState(
		variable& tcbKey,														// i: the name of the tip handling control setting
		variable& tcbValue);													// o: a reference to a variable to retrieve the value of the tip handling control setting

	// The SetTipHandlingState function sets the tip handling information 
	// for a specified tip handling control setting. 
	// The structure that specifies the tip handling control settings is 
	// the Tip Handling Control Block (TCB).

	function SetTipHandlingState(
		variable& tcbKey,														// i: the name of the tip handling control setting
		variable& tcbValue);													// i: the value of the tip handling control setting

	// The ResetTipHandlingState function resets the tip handling 
	// information of all tip handling control settings to their 
	// default values.

	function ResetTipHandlingState();

	// The TipPickup function picks up tips from the given tip pickup sequence.

	function TipPickup(
		device& ML_STAR,														// i: the tip handling device 
		sequence& tipPickupSequence);										// i/o: tip pickup sequence

	// The TipEject function ejects tips to the default waste destination.

	function TipEject(
		device& ML_STAR);														// i: the tip handling device 

	// --------------------------------------------------------------------------------------
	// Error Handling
	// --------------------------------------------------------------------------------------

	static function RaiseRuntimeError(									// raises a runtime error
		variable errorId,														// i: error id (integer)
		variable stepNameStrTblId,											// i: step name string table id (integer)
		variable errorDescriptionStrTblId,								// i: error description string table id (integer)
		variable& moduleName);												// i: name of module supplying help for the errorId (string), e.g. HxGruCompCmd
}
#endif

// --------------------------------------------------------------------------------------
// Loading the Pipetting Template Library 
// --------------------------------------------------------------------------------------

// If the constant HSL_LOAD_ON_DEMAND is definded, the library is not loaded until 
// the LoadPipettingLibrary function is called.

function LoadPipettingLibrary()											// loads the pipetting library
{
	<< "HSLPTLLibImpl.hs_";
}

// Implementation of to the Pipetting Template Library
#ifdef HSL_RUNTIME
#ifndef HSL_LOAD_ON_DEMAND
#ifndef __HSLPTLLibImpl_hsl__
	#include "HSLPTLLibImpl.hs_"
#endif
#endif
#endif

#endif
// $$author=wbarmettler$$valid=1$$time=2017-03-14 13:14$$checksum=7cf59a8e$$length=090$$