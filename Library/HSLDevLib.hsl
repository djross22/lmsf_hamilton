// This is a part of the HSL Device Library.
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
//
// Modification History
// 2001-06-26  bandenmatten : Removed onerror goto statements from library functions.
// 2001-06-10  bandenmatten : Added library functions DevGetTemplateLabwareNames, and DevGetTemplateLabwareNameAt.
// 2001-07-17  bandenmatten : Divided library into interface and implemenation.
// 2001-07-19  bandenmatten : Added function DevComputeContainerVolume.
// 2001-09-19  bandenmatten : Added parameter 'deckCoordinates' to function DevComputeContainerVolume.
// 2001-10-30  bandenmatten : Added function DevGetSequenceRef.
// 2001-10-31  bandenmatten : Added function DevResetSequence.
// 2001-11-19  bandenmatten : Added function DevGetInstrumentName.
// 2002-01-15  bandenmatten : Added functions DevLock and DevUnlock.
// 2002-01-23  bandenmatten : Moved functions DevLock and DevUnlock to HSLUtilLib.hsl.
// 2002-03-04  bandenmatten : Function DevGetInstrumentName didn't return a value. Fixed this bug.
// 2002-03-12  bandenmatten : Added functions DevGetReleaseVersion and DevGetPositionsLabwareNames.
// 2002-03-13  bandenmatten : Added functions DevGetCfgValueWithKey.
// 2002-06-06  bandenmatten : Added function DevGetLabwarePositionEx2.
// 2002-06-05  bandenmatten : Renamed parameter of function DevGetPositionsLabwareNames.
// 2002-12-05  bandenmatten : Specified return values for exported library functions.
// 2003-01-22  bandenmatten : Added functions DevAddLabwareToTemplate(), DevRemoveLabwareFromTemplate().
// 2003-01-23  bandenmatten : Added function DevAddPreloadedLabware().
// 2003-01-28  bandenmatten : Added function DevGetDeckLayoutFileName().
// 2004-02-19  bandenmatten : Added functions DevGetBarcodeData(), DevSetBarcodeData().
// 2004-02-19  bandenmatten : Added functions DevGetBarcodeData2(), DevSetBarcodeData2().
// 2004-02-19  bandenmatten : Added functions DevGetBarcodeData3(), DevSetBarcodeData3().
// 2005-05-17  bandenmatten : Added function DevComputeContainerVolume2(), that supports 'connectedContainers'.
// 2005-06-07  bandenmatten : Added function DevCopyResetSequence().
// 2005-06-13  jjenal       : Added function DevAddSequence2()
// 2005-06-13  jjenal       : Added function DevEditSequences2()
// 2005-09-19  bandenmatten : The functions listed below always added 
//										the (optional) key HXP_LABWR_POSID to the pars package even when the 
//										position name passed into these functions was empty (//>> 20050919). Fixed this bug.
//										DevGetBarcodeData()
//										DevSetBarcodeData()
//										DevGetBarcodeData2()
//										DevSetBarcodeData2()
//										DevGetBarcodeData3()
//										DevSetBarcodeData3()
// 2006-02-09  bandenmatten : Added function DevIsValidLabwareForCurrentDeckLayout().
// 2006-09-28  bandenmatten : Added function DevAddContainerToRack().
// 2007-09-28  bandenmatten : Changed implementation of functions listed below using builtins GetBarcodeData() and 
//							  			SetBarcodeData() instead of deck layout object :
//										DevGetBarcodeData()
//										DevSetBarcodeData()
//										DevGetBarcodeData2()
//										DevSetBarcodeData2()
//										DevGetBarcodeData3()
//										DevSetBarcodeData3()
// 2007-09-28  bandenmatten : Added functions :
//										DevGetUniqueBarcode()
//										DevSetUniqueBarcode()
//										DevGetUniqueBarcode2()
//										DevSetUniqueBarcode2()
//										DevGetUniqueBarcode3()
//										DevSetUniqueBarcode3()
// 2008-10-01  bandenmatten : Added function  :
//										DevGetInstrumentViewName()

#ifndef __HSLDevLib_hsl__
#define __HSLDevLib_hsl__	1

// Interface to Device library 
#ifndef HSL_RUNTIME
function DevGetSequence(device& deviceObj, variable& sequenceName, sequence& sequenceCopy) void																												{return;}
function DevGetSequenceRef(device& deviceObj, variable& sequenceName, sequence& sequenceRef) variable																										{return(0);}
function DevResetSequence(device& deviceObj, variable& sequenceName) variable																																		{return(0);}
function DevCopyResetSequence(device& deviceObj, variable& sequenceName, sequence& sequenceObj) variable																											{return(0);}
function DevAddLabware(device& deviceObj, variable& labwareId, variable& configFile, variable xCoord, variable yCoord, variable zCoord, variable angle) variable						{return(0);}
function DevAddPreloadedLabware(device& deviceObj, variable& labwareId, variable& configFile, variable xCoord, variable yCoord, variable zCoord, variable angle, variable& preloadedLabIdBase) variable	{return(0);}
function DevRemoveLabware(device& deviceObj, variable& labwareId) variable																																			{return(0);}
function DevAddContainerToRack(device& deviceObj, variable& rackId, variable& positionId, variable& configFile, variable xOffset, variable yOffset, variable zOffset) variable	{return(0);}
function DevAddLabwareToTemplate(device& deviceObj, variable& labwareId, variable& configFile, variable& templateId, variable& siteId) variable												{return(0);}
function DevRemoveLabwareFromTemplate(device& deviceObj, variable& labwareId, variable& templateId) variable																							{return(0);}
function DevGetLabwarePosition(device& deviceObj, variable& labwareId, variable& xCoord, variable& yCoord, variable& zCoord, variable& angle) variable									{return(0);}
function DevGetLabwarePositionEx(device& deviceObj, variable& labwareId, variable& positionId, variable& xCoord, variable& yCoord, variable& zCoord, variable& angle) variable	{return(0);}
function DevGetLabwarePositionEx2(
	device& deviceObj, 
	variable& labwareId, 
	variable& xCoord, 
	variable& yCoord, 
	variable& zCoord, 
	variable& angle, 
	variable& dimX, 
	variable& dimY, 
	variable& boundary1X, 
	variable& boundary1Y, 
	variable& boundary2X, 
	variable& boundary2Y, 
	variable& boundary3X, 
	variable& boundary3Y, 
	variable& boundary4X, 
	variable& boundary4Y) variable																																												{return(0);}
function DevGetTemplateLabwareNames(device& deviceObj, variable& count) variable																													{return(0);}
function DevGetTemplateLabwareNameAt(variable index, variable& templateName, variable& labwareName) void																					{return;}
function DevGetLabwareData(device& deviceObj, variable& labwareId, variable& propertyKey) variable																							{return(0);}
function DevComputeContainerVolume(
	device& deviceObj, 
	variable& labwareId, 
	variable& positionId, 
	variable height, 
	variable deckCoordinates) variable																																											{return(0);}
function DevComputeContainerVolume2(
	device& deviceObj, 
	variable& labwareId, 
	variable& positionId, 
	variable height, 
	variable deckCoordinates,
	variable connectedContainers) variable																																										{return(0);}
function DevAddSequence(
	device& deviceObj, 
	sequence& sequenceObj,
	variable initFromCfg,
	variable first,
	variable last,
	variable editable,
	variable& cfgFile) void																																															{return;}
function DevAddSequence2(
	device& deviceObj, 
	sequence& editedSequenceObj,
	sequence& baseSeqenceObj,
	variable editable) void																																															{return;}
function DevEditSequences(
	device& deviceObj, 
	variable& title,
	variable& prompt,
	variable timeout) void																																															{return;}
function DevEditSequences2(
	device& deviceObj, 
	variable& title,
	variable& prompt,
	variable timeout,
  variable sound) void																																																{return;}
function DevRemoveSequences(
	device& deviceObj) void																																															{return;}
function DevPause() void																																															{return;}
function DevGetInstrumentName(
	device& deviceObj) variable																																													{return(0);}
function DevGetInstrumentViewName(
	device& deviceObj) variable																																													{return(0);}
function DevGetReleaseVersion(
	device& deviceObj) variable																																													{return(0);}
function DevGetPositionsLabwareNames(device& deviceObj, sequence& sequenceObj, variable& labwareName, variable& count) variable													{return(0);}
function DevGetPositionLabwareNameAt(variable index, variable& templateSite, variable& labwareName, variable& positionName) void													{return;}
function DevGetCfgValueWithKey(device& deviceObj, variable key) variable																															{return(0);}
function DevGetDeckLayoutFileName(device& deviceObj) variable																																			{return(0);}
function DevGetBarcodeData(device& deviceObj, variable& labwareName, variable& positionName, variable& barcodeData) variable														{return(0);}
function DevSetBarcodeData(device& deviceObj, variable& labwareName, variable& positionName, variable& barcodeData) variable														{return(0);}
function DevGetBarcodeData2(device& deviceObj, variable& labwareName[], variable& positionName[], variable& barcodeData[]) variable												{return(0);}
function DevSetBarcodeData2(device& deviceObj, variable& labwareName[], variable& positionName[], variable& barcodeData[]) variable												{return(0);}
function DevGetBarcodeData3(device& deviceObj, sequence& sequenceObj, variable& barcodeData[]) variable																					{return(0);}
function DevSetBarcodeData3(device& deviceObj, sequence& sequenceObj, variable& barcodeData[]) variable																					{return(0);}
function DevIsValidLabwareForCurrentDeckLayout(device& deviceObj, variable& labwareId) variable																								{return(0);}
function DevGetUniqueBarcode(device& deviceObj, variable& labwareName, variable& positionName, variable& uniqueBarcode) variable														{return(0);}
function DevSetUniqueBarcode(device& deviceObj, variable& labwareName, variable& positionName, variable uniqueBarcode) variable														{return(0);}
function DevGetUniqueBarcode2(device& deviceObj, variable& labwareName[], variable& positionName[], variable& uniqueBarcode[]) variable												{return(0);}
function DevSetUniqueBarcode2(device& deviceObj, variable& labwareName[], variable& positionName[], variable& uniqueBarcode[]) variable												{return(0);}
function DevGetUniqueBarcode3(device& deviceObj, sequence& sequenceObj, variable& uniqueBarcode[]) variable																					{return(0);}
function DevSetUniqueBarcode3(device& deviceObj, sequence& sequenceObj, variable& uniqueBarcode[]) variable																					{return(0);}
#endif

// Implementation of Device library 
#ifdef HSL_RUNTIME

#ifndef __HSLUtilLib2_hsl__
	#include "HSLUtilLib2.hsl"
#endif

#ifndef __HSLUtilLib2Def_hs___
	#include "HSLUtilLib2Def.hs_"
#endif

// ----------------------------------------------------------------------------------------------------
// Constants
// ----------------------------------------------------------------------------------------------------

namespace DevConstants
{
	static const variable crlf("\013\010");	// Carriage return linefeed combination
	

	static const variable traceActionGetBarcodeData("HSLDevLib > DevGetBarcodeData");
	static const variable traceActionSetBarcodeData("HSLDevLib > DevSetBarcodeData");
	static const variable traceActionGetUniqueBarcode("HSLDevLib > DevGetUniqueBarcode");
	static const variable traceActionSetUniqueBarcode("HSLDevLib > DevSetUniqueBarcode");
}

// Wrapper function  
function DevGetSequence(device& deviceObj, variable& sequenceName, sequence& sequenceCopy) void
{
	sequenceCopy = deviceObj.GetSequence(sequenceName);
}

// Wrapper function  
function DevGetSequenceRef(device& deviceObj, variable& sequenceName, sequence& sequenceRef) variable
{
	return(deviceObj.GetSequenceRef(sequenceName, sequenceRef));
}

// Wrapper function  
function DevResetSequence(device& deviceObj, variable& sequenceName) variable
{
	return(deviceObj.ResetSequence(sequenceName));
}

// Wrapper function  
function DevCopyResetSequence(device& deviceObj, variable& sequenceName, sequence& sequenceObj) variable
{
	return(deviceObj.CopyResetSequence(sequenceName, sequenceObj));
}

// Wrapper function  
function DevAddLabware(
	device& deviceObj, 
	variable& labwareId,
	variable& configFile, 
	variable xCoord,
	variable yCoord,
	variable zCoord,
	variable angle) variable
{
	variable position[](4);
	position[0] = xCoord;
	position[1] = yCoord;
	position[2] = zCoord;
	position[3] = angle;
	return (deviceObj.AddLabware(labwareId, configFile, position));
}

// Wrapper function  
function DevAddPreloadedLabware(device& deviceObj, variable& labwareId, variable& configFile, variable xCoord, variable yCoord, variable zCoord, variable angle, variable& preloadedLabIdBase) variable
{
	variable position[](4);
	position[0] = xCoord;
	position[1] = yCoord;
	position[2] = zCoord;
	position[3] = angle;
	return (deviceObj.AddLabware(labwareId, configFile, position, preloadedLabIdBase));
}

// Wrapper function  
function DevRemoveLabware(
	device& deviceObj, 
	variable& labwareId) variable
{
	return (deviceObj.RemoveLabware(labwareId));
}

// Wrapper function  
function DevAddContainerToRack(
	device& deviceObj, 
	variable& rackId, 
	variable& positionId, 
	variable& configFile, 
	variable xOffset, 
	variable yOffset, 
	variable zOffset) variable	
{
	variable offset[](3);
	offset[0] = xOffset;
	offset[1] = yOffset;
	offset[2] = zOffset;
	return (deviceObj.AddContainerToRack(rackId, positionId, configFile, offset));
}

// Wrapper function  
function DevAddLabwareToTemplate(device& deviceObj, variable& labwareId, variable& configFile, variable& templateId, variable& siteId) variable
{
	return (deviceObj.AddLabwareToTemplate(labwareId, configFile, templateId, siteId));
}

// Wrapper function  
function DevRemoveLabwareFromTemplate(device& deviceObj, variable& labwareId, variable& templateId) variable
{
	return (deviceObj.RemoveLabwareFromTemplate(labwareId, templateId));
}

// Wrapper function  
function DevGetLabwarePosition(
	device& deviceObj, 
	variable& labwareId, 
	variable& xCoord, 
	variable& yCoord, 
	variable& zCoord, 
	variable& angle) variable
{
	variable ret(0);
	variable position[];
	ret = deviceObj.GetLabwarePosition(labwareId, position);
	xCoord = position[0];
	yCoord = position[1];
	zCoord = position[2];
	angle  = position[3];
	return (ret);
}

// Wrapper function
function DevGetLabwarePositionEx(
	device& deviceObj,
	variable& labwareId,
	variable& positionId,
	variable& xCoord,
	variable& yCoord,
	variable& zCoord,
	variable& angle) variable
{
	variable ret(0);
	variable position[];
	ret = deviceObj.GetLabwarePosition(labwareId, position, positionId);
	xCoord = position[0];
	yCoord = position[1];
	zCoord = position[2];
	angle  = position[3];
	return (ret);
}

// Wrapper function
function DevGetLabwarePositionEx2(
	device& deviceObj, 
	variable& labwareId, 
	variable& xCoord, 
	variable& yCoord, 
	variable& zCoord, 
	variable& angle, 
	variable& dimX, 
	variable& dimY, 
	variable& boundary1X, 
	variable& boundary1Y, 
	variable& boundary2X, 
	variable& boundary2Y, 
	variable& boundary3X, 
	variable& boundary3Y, 
	variable& boundary4X, 
	variable& boundary4Y) variable
{
	variable ret(0);
	variable position[];
	ret = deviceObj.GetLabwarePositionEx(labwareId, position);
	xCoord = position[0];
	yCoord = position[1];
	zCoord = position[2];
	angle = position[3];
	dimX = position[4];
	dimY = position[5];
	boundary1X = position[6];
	boundary1Y = position[7];
	boundary2X = position[8];
	boundary2Y = position[9];
	boundary3X = position[10];
	boundary3Y = position[11];
	boundary4X = position[12];
	boundary4Y = position[13];
	return (ret);
}

namespace TemplateLabwareNames
{
	static variable templateNames[];		// place to hold template names
	static variable labwareNames[];		// place to hold labware names
}

// Wrapper function  
function DevGetTemplateLabwareNames(device& deviceObj, variable& count) variable
{
	variable ret(0);
	count = 0;
	TemplateLabwareNames::templateNames.SetSize(0);
	TemplateLabwareNames::labwareNames.SetSize(0);
	ret = deviceObj.GetTemplateLabwareNames(TemplateLabwareNames::templateNames, TemplateLabwareNames::labwareNames);
	count = TemplateLabwareNames::templateNames.GetSize();
	return(ret);
}

// Wrapper function  
function DevGetTemplateLabwareNameAt(variable index, variable& templateName, variable& labwareName) void
{
	templateName = TemplateLabwareNames::templateNames.GetAt(index);
	labwareName = TemplateLabwareNames::labwareNames.GetAt(index);
}

// Wrapper function  
function DevGetLabwareData(device& deviceObj, variable& labwareId, variable& propertyKey) variable
{
	variable keys[];
	variable values[];
	keys.AddAsLast(propertyKey);
	deviceObj.GetLabwareData(labwareId, keys, values);
	if (0 < values.GetSize())
		return (values.GetAt(0));
	else
		return ("");
}

// Wrapper function  
function DevComputeContainerVolume(device& deviceObj, variable& labwareId, variable& positionId, variable height, variable deckCoordinates) variable
{
	return (deviceObj.ComputeContainerVolume(labwareId, positionId, height, deckCoordinates));
}

// Wrapper function  
function DevComputeContainerVolume2(device& deviceObj, variable& labwareId, variable& positionId, variable height, variable deckCoordinates, variable connectedContainers) variable
{
	return (deviceObj.ComputeContainerVolume(labwareId, positionId, height, deckCoordinates, connectedContainers));
}

// Wrapper function  
function DevAddSequence(
	device& deviceObj, 
	sequence& sequenceObj,
	variable initFromCfg,
	variable first,
	variable last,
	variable editable,
	variable& cfgFile) void
{
	deviceObj.AddSequence(sequenceObj, initFromCfg, first, last, editable, cfgFile);
}

// Wrapper function  
function DevAddSequence2(
	device& deviceObj, 
	sequence& editedSequenceObj,
	sequence& baseSeqenceObj,
	variable editable) void
{
	deviceObj.AddSequence2(editedSequenceObj, baseSeqenceObj, editable);
}

// Wrapper function  
function DevEditSequences(
	device& deviceObj, 
	variable& title,
	variable& prompt,
	variable timeout) void
{
	deviceObj.EditSequences(title, prompt, timeout);
}

// Wrapper function  
function DevEditSequences2(
	device& deviceObj, 
	variable& title,
	variable& prompt,
	variable timeout,
  variable sound) void
{
	deviceObj.EditSequences(title, prompt, timeout, sound);
}
//<+JJ: 2005-06-13


// Wrapper function  
function DevRemoveSequences(
	device& deviceObj) void
{
	deviceObj.RemoveSequences();
}

// Wrapper function  
function DevPause() void
{
	pause;
}

// Wrapper function  
function DevGetInstrumentName(
	device& deviceObj) variable
{
	return(deviceObj.GetInstrumentName());
}

// Wrapper function  
function DevGetInstrumentViewName(
	device& deviceObj) variable
{
	return(deviceObj.GetInstrumentViewName());
}

// Wrapper function  
function DevGetReleaseVersion(
	device& deviceObj) variable
{
	return(deviceObj.GetReleaseVersion());
}

namespace PositionsLabwareNames
{
	static variable templateSites[];		// place to hold template sites
	static variable labwareNames[];		// place to hold labware names
	static variable positionNames[];		// place to hold position names
}

// Wrapper function  
function DevGetPositionsLabwareNames(device& deviceObj, sequence& sequenceObj, variable& labwareName, variable& count) variable
{
	variable ret(0);
	count = 0;
	PositionsLabwareNames::templateSites.SetSize(0);
	PositionsLabwareNames::labwareNames.SetSize(0);
	PositionsLabwareNames::positionNames.SetSize(0);
	ret = deviceObj.GetPositionsLabwareNames(	sequenceObj, labwareName, 
															PositionsLabwareNames::templateSites, 
															PositionsLabwareNames::labwareNames,
															PositionsLabwareNames::positionNames);
	count = PositionsLabwareNames::templateSites.GetSize();
	return(ret);
}

// Wrapper function  
function DevGetPositionLabwareNameAt(variable index, variable& templateSite, variable& labwareName, variable& positionName) void
{
	variable maxIndex(0);
	variable size1(0);
	variable size2(0);
	variable size3(0);
	templateSite = "";
	labwareName = "";
	positionName = "";
	size1 = PositionsLabwareNames::templateSites.GetSize();
	size2 = PositionsLabwareNames::labwareNames.GetSize();
	size3 = PositionsLabwareNames::positionNames.GetSize();
	if (size1 < size2)
		maxIndex = size1 - 1;
	else
		maxIndex = size2 - 1;
	if (size3 < maxIndex)
		maxIndex = size3 - 1;
	if (index <= maxIndex)
	{
		templateSite = PositionsLabwareNames::templateSites.GetAt(index);
		labwareName = PositionsLabwareNames::labwareNames.GetAt(index);
		positionName = PositionsLabwareNames::positionNames.GetAt(index);
	}
}

// Wrapper function  
function DevGetCfgValueWithKey(device& deviceObj, variable key) variable
{
	return(deviceObj.GetCfgValueWithKey(key));
}

// Wrapper function  
function DevGetDeckLayoutFileName(device& deviceObj) variable
{
	return(deviceObj.GetDeckLayoutFileName());
}

// Get barcode data for the instance of labware at (optional) position. If no data has been set, the empty string is returned.
function DevGetBarcodeData(device& deviceObj, variable& labwareName, variable& positionName, variable& barcodeData) variable
{
	variable errorDesc("");

	// Init output params.
	barcodeData = "";

	// Check params to be valid.
	errorDesc = DevConstants::traceActionGetBarcodeData + DevConstants::crlf;
	Util2::CheckValueTypeAndRange(labwareName, hslString, Util2::ValueCheck::RangeStringNotEmpty, errorDesc + "'labwareName'");
	Util2::CheckValueType(positionName, hslString, errorDesc + "'positionName'");

	// Get barcode data.
	barcodeData = deviceObj.GetBarcodeData(labwareName, positionName);
	return(hslTrue);
}

// Set barcode data for the instance of labware at (optional) position.
function DevSetBarcodeData(device& deviceObj, variable& labwareName, variable& positionName, variable& barcodeData) variable
{
	// Check params to be valid.
	variable errorDesc("");
	errorDesc = DevConstants::traceActionSetBarcodeData + DevConstants::crlf;
	Util2::CheckValueTypeAndRange(labwareName, hslString, Util2::ValueCheck::RangeStringNotEmpty, errorDesc + "'labwareName'");
	Util2::CheckValueType(positionName, hslString, errorDesc + "'positionName'");
	Util2::CheckValueType(barcodeData, hslString, errorDesc + "'barcodeData'");

	// Set barcode data.
	deviceObj.SetBarcodeData(labwareName, positionName, barcodeData);
	return(hslTrue);
}

// Get barcode data for the instance of labware at (optional) position. If no data has been set, the empty string is returned.
function DevGetBarcodeData2(device& deviceObj, variable& labwareName[], variable& positionName[], variable& barcodeData[]) variable
{
	variable i(0);
	variable s1(labwareName.GetSize());
	variable s2(positionName.GetSize());
	variable labwareId("");
	variable positionId("");
	variable barcodeId("");

	// Check params to be valid.
	// Nothing to check.

	// Get barcode data.
	barcodeData.SetSize(0);
	for (i = 0; i < s1 && i < s2; i++)
	{
		labwareId = labwareName.ElementAt(i);
		positionId = positionName.ElementAt(i);
		DevGetBarcodeData(deviceObj, labwareId, positionId, barcodeId);
		barcodeData.AddAsLast(barcodeId);
	}

	return(hslTrue);
}

// Set barcode data for the instance of labware at (optional) position.
function DevSetBarcodeData2(device& deviceObj, variable& labwareName[], variable& positionName[], variable& barcodeData[]) variable
{
	variable i(0);
	variable s1(labwareName.GetSize());
	variable s2(positionName.GetSize());
	variable s3(barcodeData.GetSize());
	variable labwareId("");
	variable positionId("");
	variable barcodeId("");

	// Check params to be valid.
	// Nothing to check.

	// Set barcode data.
	for (i = 0; i < s1 && i < s2 && i < s3; i++)
	{
		labwareId = labwareName.ElementAt(i);
		positionId = positionName.ElementAt(i);
		barcodeId = barcodeData.ElementAt(i);
		DevSetBarcodeData(deviceObj, labwareId, positionId, barcodeId);
	}

	return(hslTrue);
}

// Get barcode data for the instance of labware at (optional) position. If no data has been set, the empty string is returned.
function DevGetBarcodeData3(device& deviceObj, sequence& sequenceObj, variable& barcodeData[]) variable
{
	variable currentPosBak(-1);
	variable currentPos(0);
	variable labwareId("");
	variable positionId("");
	variable barcodeId("");

	// Check params to be valid.
	// Nothing to check.

	// Get barcode data.
	onerror goto Unexpected;
	barcodeData.SetSize(0);
	currentPosBak = sequenceObj.GetCurrentPosition();
	for (currentPos = sequenceObj.SetCurrentPosition(1); 
			0 < currentPos; 
			currentPos = sequenceObj.Increment(1))
	{
		labwareId = sequenceObj.GetLabwareId();
		positionId = sequenceObj.GetPositionId();
		DevGetBarcodeData(deviceObj, labwareId, positionId, barcodeId);
		barcodeData.AddAsLast(barcodeId);
	}
	sequenceObj.SetCurrentPosition(currentPosBak);

	return(hslTrue);
	
	Unexpected:
	{
		if (0 <= currentPosBak)
			sequenceObj.SetCurrentPosition(currentPosBak);
		err.Raise();
	}
}

// Set barcode data for the instance of labware at (optional) position.
function DevSetBarcodeData3(device& deviceObj, sequence& sequenceObj, variable& barcodeData[]) variable
{
	variable currentPosBak(-1);
	variable currentPos(0);
	variable labwareId("");
	variable positionId("");
	variable barcodeId("");
	variable i(0);
	variable s(barcodeData.GetSize());

	onerror goto Unexpected;
	currentPosBak = sequenceObj.GetCurrentPosition();
	for (currentPos = sequenceObj.SetCurrentPosition(1); 
			0 < currentPos && i < s; 
			currentPos = sequenceObj.Increment(1))
	{
		labwareId = sequenceObj.GetLabwareId();
		positionId = sequenceObj.GetPositionId();
		barcodeId = barcodeData.ElementAt(i);
		DevSetBarcodeData(deviceObj, labwareId, positionId, barcodeId);
		i++;
	}
	sequenceObj.SetCurrentPosition(currentPosBak);

	return(hslTrue);

	Unexpected:
	{
		if (0 <= currentPosBak)
			sequenceObj.SetCurrentPosition(currentPosBak);
		err.Raise();
	}
}

// Wrapper function  
function DevIsValidLabwareForCurrentDeckLayout(device& deviceObj, variable& labwareId) variable
{
	return(deviceObj.IsValidLabwareForCurrentDeckLayout(labwareId));
}

// Get unique barcode flag for the instance of labware at (optional) position. If no data has been set, 0 is returned.
function DevGetUniqueBarcode(device& deviceObj, variable& labwareName, variable& positionName, variable& uniqueBarcode) variable
{
	variable errorDesc("");

	// Init output params.
	uniqueBarcode = 0;

	// Check params to be valid.
	errorDesc = DevConstants::traceActionGetUniqueBarcode + DevConstants::crlf;
	Util2::CheckValueTypeAndRange(labwareName, hslString, Util2::ValueCheck::RangeStringNotEmpty, errorDesc + "'labwareName'");
	Util2::CheckValueType(positionName, hslString, errorDesc + "'positionName'");

	// Get unique barcode flag.
	uniqueBarcode = deviceObj.GetUniqueBarcode(labwareName, positionName);
	return(hslTrue);
}

// Set unique barcode flag for the instance of labware at (optional) position.
function DevSetUniqueBarcode(device& deviceObj, variable& labwareName, variable& positionName, variable uniqueBarcode) variable
{
	// Check params to be valid.
	variable errorDesc("");
	errorDesc = DevConstants::traceActionSetUniqueBarcode + DevConstants::crlf;
	Util2::CheckValueTypeAndRange(labwareName, hslString, Util2::ValueCheck::RangeStringNotEmpty, errorDesc + "'labwareName'");
	Util2::CheckValueType(positionName, hslString, errorDesc + "'positionName'");
	Util2::CheckValueType(uniqueBarcode, hslInteger, errorDesc + "'uniqueBarcode'");
	Util2::CheckValueRangeMinMax(uniqueBarcode, 0, 1, errorDesc + "'uniqueBarcode'");

	// Set unique barcode flag.
	deviceObj.SetUniqueBarcode(labwareName, positionName, uniqueBarcode);
	return(hslTrue);
}

// Get unique barcode flag for the instance of labware at (optional) position. If no data has been set, 0 is returned.
function DevGetUniqueBarcode2(device& deviceObj, variable& labwareName[], variable& positionName[], variable& uniqueBarcode[]) variable
{
	variable i(0);
	variable s1(labwareName.GetSize());
	variable s2(positionName.GetSize());
	variable labwareId("");
	variable positionId("");
	variable uniqueBarcodeFlag(0);

	// Check params to be valid.
	// Nothing to check.

	// Get unique barcode flag.
	uniqueBarcode.SetSize(0);
	for (i = 0; i < s1 && i < s2; i++)
	{
		labwareId = labwareName.ElementAt(i);
		positionId = positionName.ElementAt(i);
		DevGetUniqueBarcode(deviceObj, labwareId, positionId, uniqueBarcodeFlag);
		uniqueBarcode.AddAsLast(uniqueBarcodeFlag);
	}

	return(hslTrue);
}

// Set unique barcode flag for the instance of labware at (optional) position.
function DevSetUniqueBarcode2(device& deviceObj, variable& labwareName[], variable& positionName[], variable& uniqueBarcode[]) variable
{
	variable i(0);
	variable s1(labwareName.GetSize());
	variable s2(positionName.GetSize());
	variable s3(uniqueBarcode.GetSize());
	variable labwareId("");
	variable positionId("");
	variable uniqueBarcodeFlag(0);

	// Check params to be valid.
	// Nothing to check.

	// Set unique barcode flag.
	for (i = 0; i < s1 && i < s2 && i < s3; i++)
	{
		labwareId = labwareName.ElementAt(i);
		positionId = positionName.ElementAt(i);
		uniqueBarcodeFlag = uniqueBarcode.ElementAt(i);
		DevSetUniqueBarcode(deviceObj, labwareId, positionId, uniqueBarcodeFlag);
	}

	return(hslTrue);
}

// Get unique barcode flag for the instance of labware at (optional) position. If no data has been set, 0 is returned.
function DevGetUniqueBarcode3(device& deviceObj, sequence& sequenceObj, variable& uniqueBarcode[]) variable
{
	variable currentPosBak(-1);
	variable currentPos(0);
	variable labwareId("");
	variable positionId("");
	variable uniqueBarcodeFlag(0);

	// Check params to be valid.
	// Nothing to check.

	// Get unique barcode flag.
	onerror goto Unexpected;
	uniqueBarcode.SetSize(0);
	currentPosBak = sequenceObj.GetCurrentPosition();
	for (currentPos = sequenceObj.SetCurrentPosition(1); 
			0 < currentPos; 
			currentPos = sequenceObj.Increment(1))
	{
		labwareId = sequenceObj.GetLabwareId();
		positionId = sequenceObj.GetPositionId();
		DevGetUniqueBarcode(deviceObj, labwareId, positionId, uniqueBarcodeFlag);
		uniqueBarcode.AddAsLast(uniqueBarcodeFlag);
	}
	sequenceObj.SetCurrentPosition(currentPosBak);

	return(hslTrue);
	
	Unexpected:
	{
		if (0 <= currentPosBak)
			sequenceObj.SetCurrentPosition(currentPosBak);
		err.Raise();
	}
}

// Set unique barcode flag for the instance of labware at (optional) position.
function DevSetUniqueBarcode3(device& deviceObj, sequence& sequenceObj, variable& uniqueBarcode[]) variable
{
	variable currentPosBak(-1);
	variable currentPos(0);
	variable labwareId("");
	variable positionId("");
	variable uniqueBarcodeFlag("");
	variable i(0);
	variable s(uniqueBarcode.GetSize());

	onerror goto Unexpected;
	currentPosBak = sequenceObj.GetCurrentPosition();
	for (currentPos = sequenceObj.SetCurrentPosition(1); 
			0 < currentPos && i < s; 
			currentPos = sequenceObj.Increment(1))
	{
		labwareId = sequenceObj.GetLabwareId();
		positionId = sequenceObj.GetPositionId();
		uniqueBarcodeFlag = uniqueBarcode.ElementAt(i);
		DevSetUniqueBarcode(deviceObj, labwareId, positionId, uniqueBarcodeFlag);
		i++;
	}
	sequenceObj.SetCurrentPosition(currentPosBak);

	return(hslTrue);

	Unexpected:
	{
		if (0 <= currentPosBak)
			sequenceObj.SetCurrentPosition(currentPosBak);
		err.Raise();
	}
}

#endif
#endif
// $$author=wbarmettler$$valid=1$$time=2017-03-09 07:27$$checksum=b74c2177$$length=090$$