// programmed by Yvonne Dangendorf
// Version: 1.0
// 2009/02/18

#ifndef __HSLFileDirectoryLib_hsl__
#define __HSLFileDirectoryLib_hsl__ 1

namespace FileDirectoryLib
{
	private object FileDirectory;

	private function InitLibrary() void
	{
		if (FileDirectory.IsNull())
		{
			FileDirectory.CreateObject("FileDirectoryLib.Dialog");
		}
	}

   //FILES
   
   //GetFilesInDirectory
	function GetFilesInDirectory(variable& iPathDirectory, variable& iFileExtension, variable& oArrFiles[])
	{

      InitLibrary();
   

      oArrFiles = FileDirectory.GetAllDataFilesInDirectory(iPathDirectory,iFileExtension);

	}

   //GetNumberOfFilesInDirectory
   function GetNumberOfFilesInDirectory(variable& iPathDirectory, variable& oNumberOfFiles) 
   {
     InitLibrary();
      

     oNumberOfFiles= FileDirectory.GetNumberOfFilesInDirectory(iPathDirectory);
   }

   //CopyFile
   function CopyFile(variable& iPathFileSource, variable& iPathFileDestination)
   {
      variable returnValue;

      InitLibrary();

      
      returnValue = FileDirectory.CopyFile(iPathFileSource,iPathFileDestination);

      return (returnValue);
   }
   
   //MoveFile
   function MoveFile(variable& iPathFileSource, variable& iPathFileDestination)
   {
      variable returnValue;

      InitLibrary();

      returnValue = FileDirectory.MoveFile(iPathFileSource,iPathFileDestination);

      return (returnValue);

   }

   //DeleteFile
   function DeleteFile(variable& iPathFile) 
   {
      variable returnValue;

      InitLibrary();

      returnValue = FileDirectory.DeleteFile(iPathFile);

      return (returnValue);
   }

   //DeleteAllFilesInDirectory
   function DeleteAllFilesInDirectory(variable& iPathDirectory) 
   {
      variable returnValue;

      InitLibrary();

      returnValue = FileDirectory.DeleteAllFilesInDirectory(iPathDirectory);

      return (returnValue);
   }

   //RenameFile
   function RenameFile(variable& iPathFile, variable& iNewFileName)
   {
      variable returnValue;

      InitLibrary();

      returnValue = FileDirectory.RenameFile(iPathFile,iNewFileName);

      return (returnValue);
   }


   function CheckIfFileExists(variable& iPathFile)
   {
      variable returnValue;

      InitLibrary();

      returnValue = FileDirectory.CheckIfFileExists(iPathFile);

      return (returnValue);
   }
   //DIRECTORY
   //Delete Directory
   function DeleteDirectory(variable& iPathDirectory) 
   {
      variable returnValue;

      InitLibrary();

      returnValue = FileDirectory.DeleteDirectory(iPathDirectory);

      return (returnValue);
   }
   
   //MoveDirectory
   function MoveDirectory(variable& iPathDirectorySource, variable& iPathDirectoryDestination) 
   {
      variable returnValue;

      InitLibrary();

      returnValue = FileDirectory.MoveDirectory(iPathDirectorySource,iPathDirectoryDestination);

      return (returnValue);
   }

   //CreateDirectory
   function CreateDirectory(variable& iPathDirectory)
   {
      variable returnValue;

      InitLibrary();

      returnValue = FileDirectory.CreateDirectory(iPathDirectory);

      return (returnValue);
   }

   //GetSubdirectoriesOfDirectory
   function GetSubdirectoriesOfDirectory(variable& iPathDirectory,variable& oArrSubdirectories[]) 
   {
      InitLibrary();
   
      oArrSubdirectories = FileDirectory.GetSubdirectoriesOfDirectory(iPathDirectory);
   }

   //CheckIfDirectoryExists
   function CheckIfDirectoryExists(variable& iPathDirectory)
   {

      variable returnValue;

      InitLibrary();

      returnValue = FileDirectory.CheckIfDirectoryExists(iPathDirectory);

      return (returnValue);

   }
   

}

#endif
// $$author=YDangendorf$$valid=0$$time=2009-03-06 15:32$$checksum=f96634a9$$length=088$$