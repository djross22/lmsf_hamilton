//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\
//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\
//*\\ This library provides useful functions to sort sequences during method execution
//*\\ Compiled by Josh Brewer, Hamilton Robotics Applications Engineer
//*\\
//*\\  
//*\\ Version1.0 - August 15, 2014, - 1. Initial Release
//*\\
//*\\
//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\
//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\//*\\

#ifndef __HSLSeqSortingLib_hsl__
#define __HSLSeqSortingLib_hsl__  1

#ifndef __SequenceSorting_hsl__
     #include "HSLSeqSortingLib\\SequenceSorting.hs_"
#endif

namespace HSLSeqSortingLib
{

//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
// Variable Functions

      namespace RasterDistance
      {
         const variable _9mm(9.0);
         const variable _18mm(18.0);
      }
      namespace SortMode
      {
         const variable Single_Rack_Columns(0);
         const variable Multiple_Rack_Columns(1);
      }

//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//LIBRARY FUNCTIONS

   //Function to Sort a Sequence for Optimal Channel Access
   function SortOneSeqForChannels(device& ML_STAR, sequence& seqObject, variable& sort_distance, variable& sort_mode) void
     {
      SEQUENCESORTING::OneSeq_Channels(ML_STAR, seqObject, sort_distance, sort_mode);
     }

   //Function to Sort a Sequence for Optimal Channel Access
   function SortOneSeqOneVolumeForChannels(device& ML_STAR, sequence& seqObject, variable& volume_array[], variable& sort_distance, variable& sort_mode) void
     {
      SEQUENCESORTING::OneSeqOneVol_Channels(ML_STAR, seqObject, volume_array, sort_distance, sort_mode);
     }

   //Function to Sort Two Sequences for Optimal Channel Access
   function SortTwoSeqForChannels(device& ML_STAR, sequence& seqObject_main, sequence& seqObject_secondary, variable& sort_distance, variable& sort_mode) void
     {
      SEQUENCESORTING::TwoSeq_Channels(ML_STAR, seqObject_main, seqObject_secondary, sort_distance, sort_mode);
     }

   //Function to Sort a Sequence for Optimal Channel Access
   function SortTwoSeqOneVolumeForChannels(device& ML_STAR, sequence& seqObject_main, sequence& seqObject_secondary, variable& volume_array[], variable& sort_distance, variable& sort_mode) void
     {
      SEQUENCESORTING::TwoSeqOneVol_Channels(ML_STAR, seqObject_main, seqObject_secondary, volume_array, sort_distance, sort_mode);
     }

//End the namespace
}

#endif
// $$author=CMMR-SEQ-PC-2$$valid=0$$time=2016-06-16 11:12$$checksum=76e78d03$$length=092$$